package shlm.lmcs.com.lazycat.LazyCatProgramUnt.Views;import android.content.Context;import android.content.res.TypedArray;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.graphics.Path;import android.graphics.Rect;import android.util.AttributeSet;import android.util.Log;import android.view.View;import shlm.lmcs.com.lazycat.R;/*自定义View设置圆弧控件*/public class ArcView extends View {    private String MSG = "ArcView.java[+]";    /**     * 需要创建资源文件     */    /**     * <Resources>     * <declare-style name='mArcViewpage'>     * <attr name='arcHeight'/>     * <attr name='arcColor'/>     * </declare-style>     * </Resources>     */    private int mWidth;    private int mHeight;    private int mArcHeight;/*圆弧高度*/    private int mBackColor;/*背景颜色*/    private Paint mPaint;/*画笔*/    private Context mContext;/*上下文*/    public ArcView(Context context) {        this(context, null);    }    public ArcView(Context context, AttributeSet attrs) {        this(context, attrs, 0);    }    public ArcView(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.mArcViewpage);        /*资源文件*/        /*控件的高度*/        mArcHeight = typedArray.getDimensionPixelSize(R.styleable.mArcViewpage_arcHeight, 100);        /*控件的颜色*/        Log.i(MSG, "控件的高度" + mArcHeight);        mBackColor = typedArray.getColor(R.styleable.mArcViewpage_arcColor, Color.parseColor                ("#f30d88"));        mContext = context;        mPaint = new Paint();    }    public void setBackGroundColor(String _color) {        Log.i(MSG,"将要设置的拱形的颜色为:" + _color.trim());        this.mBackColor = Color.parseColor(_color);    }    public void setBackgroundColor(int _color) {        this.mBackColor = _color;    }    @Override    protected void onDraw(Canvas canvas) {        /*重写绘制*/        super.onDraw(canvas);        if (mPaint == null) {            mPaint = new Paint();        }        mPaint.setStyle(Paint.Style.FILL);        mPaint.setColor(mBackColor);        /*绘制矩形*/        Rect rect = new Rect(0, 0, mWidth, mHeight - mArcHeight);        canvas.drawRect(rect, mPaint);/*绘制*/        /*绘制弧形*/        Path path = new Path();        path.moveTo(0, mHeight - mArcHeight);        path.quadTo(mWidth / 2, mHeight, mWidth, mHeight - mArcHeight);        canvas.drawPath(path, mPaint);    }    /**     * 重写测量的方法 获取高度和宽度     *     * @param widthMeasureSpec     * @param heightMeasureSpec     */    @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        int widthSize = MeasureSpec.getSize(widthMeasureSpec);        int widthMode = MeasureSpec.getMode(widthMeasureSpec);        int heightSize = MeasureSpec.getSize(heightMeasureSpec);        int heightMode = MeasureSpec.getMode(heightMeasureSpec);        if (widthMode == MeasureSpec.EXACTLY) {            mWidth = widthSize;        }        if (heightMode == MeasureSpec.EXACTLY) {            mHeight = heightSize;        }    }}