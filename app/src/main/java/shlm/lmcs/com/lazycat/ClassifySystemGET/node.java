/* * 我会用双手书写我来到这个世界的意义 */package shlm.lmcs.com.lazycat.ClassifySystemGET;import android.content.Context;import android.util.Log;import org.xmlpull.v1.XmlPullParser;import java.util.ArrayList;import java.util.List;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyPage.WAIT_ITME_DIALOGPAGE;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;/** * 根据分类的标题获取节点信息 */public class node {    private static String MSG = "node.java[+]";    private static String ACTION_NODES = "nodes";    private static String ACTION_NAME = "_name";    /**     * 根据分类的标题获取节点信息     *     * @param _context 上下文对象     * @param _title   分类标题     */    public static void _getNode(final Context _context, String _title, final onNode _onNode) {        final List<Nodepages> _nodepages = new ArrayList<>();        LocalValues.HTTP_ADDRS http_addrs = new LocalValues.HTTP_ADDRS(_context);        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(true);        xmlInstance.setXmlTree(ACTION_NAME, _title);        xmlInstance.overDom();        Net.doPostXml(http_addrs.HTTP_ADDR_CLASSIFY_SYSTEM_GET_GETNODE, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                Log.i(MSG, "根据分类的标题获取节点信息：" + data.trim());                _refreshDialog.dismiss();                XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                    @Override                    public void onFaile() {                    }                    @Override                    public void onStartDocument(String tag) {                        _nodepages.clear();                    }                    @Override                    public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                        try {                            if (tag.equals(ACTION_NODES)) {                                Nodepages nodepage = new Nodepages();                                nodepage._nodeTitle = pullParser.nextText().trim();                                _nodepages.add(nodepage);                            }                        } catch (Exception e) {                            Log.e(MSG, "根据分类标题获取节点信息出错:" + e.getMessage());                        }                    }                    @Override                    public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                    }                    @Override                    public void onEndDocument() {                        if (_onNode != null) {                            if (_nodepages.size() <= 0) {                                _onNode.onNodata();/*没有数据信息*/                            } else {                                _onNode.onOk(true, _nodepages);/*存在数据信息 进行回调*/                            }                        } else {                        }                    }                });            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                final WaitDialog.RefreshDialog refreshDialog = new WaitDialog.RefreshDialog                        (_context);                WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                wait_itme_dialogpage.setImg(R.id.item_wait_img);                wait_itme_dialogpage.setView(R.layout.item_wait);                wait_itme_dialogpage.setTitle(R.id.item_wait_title);                refreshDialog.Init(wait_itme_dialogpage);                refreshDialog.showRefreshDialog("请稍后...", false);                return refreshDialog;            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree());    }    /**     * 节点信息表     */    public static class Nodepages {        public String _nodeTitle;    }    public interface onNode {        void onOk(Boolean _login, List<Nodepages> _nodepages);/*成功*/        void onNodata();/*没有数据信息*/        void onError();/*失败*/    }}