package shlm.lmcs.com.lazycat.LazyShopFrg;import android.annotation.SuppressLint;import android.os.Bundle;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.ListView;import android.widget.TextView;import org.xmlpull.v1.XmlPullParser;import java.util.ArrayList;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyClass.LazyCatFragment;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyPage.WEB_VALUES_ACT;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Config;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyShopAct.ShowshopOffice;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;/** * 购物车的操作 */public class Messagefrg extends LazyCatFragment {    private ListView listView;    private final static String XML_TAG_BIG_BEGIN = "BigMSGBody";    private final static String XML_TAG_BIG_MSGDATE = "BigMsgDate";    private final static String XML_TAG_BIG_HEADDATE = "BigMsgDate";    private final static String XML_TAG_BIG_HEADONCLICK = "BigHeadOnclick";    private final static String XML_TAG_BIG_HEADIMG = "BigHeadimg";    private final static String XML_TAG_BIG_HEADTITLE = "BigHeadTitle";    private final static String XML_TAG_BIG_HEADTITLECOLOR = "BigHeadTitlecolor";    private final static String XML_TAG_BIG_LINEITEM_BEGIN = "LineItem";    private final static String XML_TAG_BIG_LINEITEM_TITLE = "ItemTitle";    private final static String XML_TAG_BIG_LINEITEM_TITLECOLOR = "ItemTitleColor";    private final static String XML_TAG_BIG_LINEITEM_ONCLICK = "ItemOnclick";    private final static String XML_TAG_BIG_LINEITEM_IMGURL = "ItemImgurl";    private final static String MSG = "Messagefrg.java[+]";    private ArrayList<MsgValue> msgValues = new ArrayList<MsgValue>();    private MsgValue msgValue;/*整理通知集合*/    private LineItemValues lineItemValues;/*LineItem参数结合*/    @SuppressLint("NewApi")    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle            savedInstanceState) {        View item = inflater.inflate(R.layout.fragment_message, null);        /*listview控件*/        listView = item.findViewById(R.id.fragment_message_listView);        init(item);        return item;    }    @SuppressLint({"NewApi", "ResourceType"})    private void init(View _item) {        Net.doPostXml(getContext(), LocalValues.HTTP_ADDRS.HTTP_ADDR_GET_SYSTEMMSG, new                ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                Log.i(MSG, "获取系统信息数据为:" + data.trim());                XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                    @Override                    public void onFaile() {                    }                    @Override                    public void onStartDocument(String tag) {                    }                    @Override                    public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                        try {                            /*开始节点*/                            if (tag.equals(XML_TAG_BIG_BEGIN)) {                                msgValue = new MsgValue();                            }                            if (tag.equals(XML_TAG_BIG_HEADDATE)) {                                if (msgValue != null) {                                    msgValue.setBigMSGDate(pullParser.nextText().trim());                                }                            }                            /*标题开始节点*/                            if (tag.equals(XML_TAG_BIG_HEADTITLE)) {                                if (msgValue != null) {                                    msgValue.setBigHeadTitle(pullParser.nextText().trim());                                }                            }                            /*标题颜色开始节点*/                            if (tag.equals(XML_TAG_BIG_HEADTITLECOLOR)) {                                if (msgValue != null) {                                    msgValue.setBigHeadTitlecolor(pullParser.nextText().trim());                                }                            }                            /*标题点击的地址*/                            if (tag.equals(XML_TAG_BIG_HEADONCLICK)) {                                if (msgValue != null) {                                    msgValue.setOnClick(pullParser.nextText().trim());                                }                            }                            /*大的图片展示地址*/                            if (tag.equals(XML_TAG_BIG_HEADIMG)) {                                if (msgValue != null) {                                    msgValue.setBigHeadimg(pullParser.nextText().trim());                                }                            }                            /**                             * LineItem参数的开始节点                             */                            if (tag.equals(XML_TAG_BIG_LINEITEM_BEGIN)) {                                lineItemValues = new LineItemValues();                            }                            /*LineItem的标题*/                            if (tag.equals(XML_TAG_BIG_LINEITEM_TITLE)) {                                lineItemValues.setItemTitle(pullParser.nextText().trim());                            }                            /*LineItem的图片地址*/                            if (tag.equals(XML_TAG_BIG_LINEITEM_IMGURL)) {                                lineItemValues.setItemImgurl(pullParser.nextText().trim());                            }                            /*LineItem的标题颜色*/                            if (tag.equals(XML_TAG_BIG_LINEITEM_TITLECOLOR)) {                                lineItemValues.setItemTitleColor(pullParser.nextText().trim());                            }                            /*LineItem的点击跳转地址*/                            if (tag.equals(XML_TAG_BIG_LINEITEM_ONCLICK)) {                                lineItemValues.setItemOnclick(pullParser.nextText().trim());                            }                        } catch (Exception e) {                            Log.e(MSG, "处理Message中的信息失败 失败原因:" + e.getMessage());                        }                    }                    @Override                    public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                        if (tag.equals(XML_TAG_BIG_LINEITEM_BEGIN)) {                            if (msgValue != null) {                                msgValue.setLineItemValues(lineItemValues);                                lineItemValues = null;                            }                        }                        /**                         * 消息框结束节点                         */                        if (tag.equals(XML_TAG_BIG_BEGIN)) {                            msgValues.add(msgValue);                        }                    }                    @Override                    public void onEndDocument() {                        Log.i(MSG, "消息框数据总和:" + msgValues.size());                        /*处理ListView的信息*/                        MessageAdapter messageAdapter = new MessageAdapter();                        listView.setAdapter(messageAdapter);                    }                });            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                return null;            }            @Override            public void onFaile(String data, int code) {            }        }, "");    }    @SuppressLint("NewApi")    class MessageAdapter extends BaseAdapter {        @Override        public int getCount() {            return msgValues.size();        }        @Override        public Object getItem(int position) {            return null;        }        @Override        public long getItemId(int position) {            return 0;        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            ValuePage valuePage;            if (convertView != null) {                convertView.getTag();            } else {                convertView = LayoutInflater.from(getContext()).inflate(R.layout                        .item_messageview, null);                valuePage = new ValuePage();                valuePage.BigHeadDate = convertView.findViewById(R.id.item_messageview_headDate);                valuePage.BigHeadimg = convertView.findViewById(R.id.item_messageview_HeadImg);                valuePage.BigHeadTitle = convertView.findViewById(R.id.item_messageview_HeadTitle);                valuePage.ItemImg_1 = convertView.findViewById(R.id.item_messageview_itemImg_1);                valuePage.ItemTitle_1 = convertView.findViewById(R.id.item_messageview_itemTitle_1);                valuePage.ItemImg_2 = convertView.findViewById(R.id.item_messageview_itemImg_2);                valuePage.ItemTitle_2 = convertView.findViewById(R.id.item_messageview_itemTitle_2);                valuePage.ItemImg_3 = convertView.findViewById(R.id.item_messageview_itemImg_3);                valuePage.ItemTitle_3 = convertView.findViewById(R.id.item_messageview_itemTitle_3);                valuePage.ItemImg_4 = convertView.findViewById(R.id.item_messageview_itemImg_4);                valuePage.ItemTitle_4 = convertView.findViewById(R.id.item_messageview_itemTitle_4);                valuePage.BigHeadTitle.setText(msgValues.get(position).getBigHeadTitle());                /*设置文字*/                valuePage.ItemTitle_1.setText(msgValues.get(position).getLineItemValues(0)                        .getItemTitle().trim());                /*设置点击的URL或者TAG*/                valuePage.ItemTitle_1.setTag(msgValues.get(position).getLineItemValues(0)                        .getItemOnclick());                /*设置点击的URL或者TAG*/                valuePage.ItemTitle_2.setTag(msgValues.get(position).getLineItemValues(1)                        .getItemOnclick());                /*设置点击的URL或者TAG*/                valuePage.ItemTitle_3.setTag(msgValues.get(position).getLineItemValues(2)                        .getItemOnclick());                /*设置点击的URL或者TAG*/                valuePage.ItemTitle_4.setTag(msgValues.get(position).getLineItemValues(3)                        .getItemOnclick());                valuePage.ItemTitle_1.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        String Tag = v.getTag().toString().trim();                        if (Tag.indexOf("TAG") != -1) {                            /*存在TAG 打开窗口*/                            LazyCatFragmentStartActivityWithBundler(ShowshopOffice.class, Config                                    .Windows.GET_WINDOW_VALUE_SHOP_MESSAGE, Tag.split("\\|")[1]                                    .trim(), Config.Windows.GET_WINDOW_VALUE_SHOP_ACTION,                                    LocalValues.VALUES_SEARCH.VALUES_TO_SEARCH_SHOPKEYWORD);                        } else {                            /*不存在Tag 打开URL*/                            WEB_VALUES_ACT web_values_act = new WEB_VALUES_ACT(Tag.split("\\|")                                    [1].trim());                            web_values_act.set_StaticColor("#ffffff");                            web_values_act.set_TitleBackColor("#ffffff");                            LazyCatFragmentStartWevact(web_values_act);                        }                    }                });                valuePage.ItemTitle_2.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        String Tag = v.getTag().toString().trim();                        if (Tag.indexOf("TAG") != -1) {                            /*存在TAG 打开窗口*/                            LazyCatFragmentStartActivityWithBundler(ShowshopOffice.class, Config                                    .Windows.GET_WINDOW_VALUE_SHOP_MESSAGE, Tag.split("\\|")[1]                                    .trim(), Config.Windows.GET_WINDOW_VALUE_SHOP_ACTION,                                    LocalValues.VALUES_SEARCH.VALUES_TO_SEARCH_SHOPKEYWORD);                        } else {                            /*不存在Tag 打开URL*/                            WEB_VALUES_ACT web_values_act = new WEB_VALUES_ACT(Tag.split("\\|")                                    [1].trim());                            web_values_act.set_StaticColor("#ffffff");                            web_values_act.set_TitleBackColor("#ffffff");                            LazyCatFragmentStartWevact(web_values_act);                        }                    }                });                valuePage.ItemTitle_3.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        String Tag = v.getTag().toString().trim();                        if (Tag.indexOf("TAG") != -1) {                            /*存在TAG 打开窗口*/                            LazyCatFragmentStartActivityWithBundler(ShowshopOffice.class, Config                                            .Windows.GET_WINDOW_VALUE_SHOP_MESSAGE, Tag.split("\\|")[1]                                            .trim(), Config.Windows.GET_WINDOW_VALUE_SHOP_ACTION,                                    LocalValues.VALUES_SEARCH.VALUES_TO_SEARCH_SHOPKEYWORD);                        } else {                            /*不存在Tag 打开URL*/                            WEB_VALUES_ACT web_values_act = new WEB_VALUES_ACT(Tag.split("\\|")                                    [1].trim());                            web_values_act.set_StaticColor("#ffffff");                            web_values_act.set_TitleBackColor("#ffffff");                            LazyCatFragmentStartWevact(web_values_act);                        }                    }                });                valuePage.ItemTitle_4.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        String Tag = v.getTag().toString().trim();                        if (Tag.indexOf("TAG") != -1) {                            /*存在TAG 打开窗口*/                            LazyCatFragmentStartActivityWithBundler(ShowshopOffice.class, Config                                            .Windows.GET_WINDOW_VALUE_SHOP_MESSAGE, Tag.split("\\|")[1]                                            .trim(), Config.Windows.GET_WINDOW_VALUE_SHOP_ACTION,                                    LocalValues.VALUES_SEARCH.VALUES_TO_SEARCH_SHOPKEYWORD);                        } else {                            /*不存在Tag 打开URL*/                            WEB_VALUES_ACT web_values_act = new WEB_VALUES_ACT(Tag.split("\\|")                                    [1].trim());                            web_values_act.set_StaticColor("#ffffff");                            web_values_act.set_TitleBackColor("#ffffff");                            LazyCatFragmentStartWevact(web_values_act);                        }                    }                });                valuePage.ItemTitle_2.setText(msgValues.get(position).getLineItemValues(1)                        .getItemTitle().trim());                valuePage.ItemTitle_3.setText(msgValues.get(position).getLineItemValues(2)                        .getItemTitle().trim());                valuePage.ItemTitle_4.setText(msgValues.get(position).getLineItemValues(3)                        .getItemTitle().trim());                valuePage.BigHeadDate.setText(msgValues.get(position).getBigMSGDate().trim());                convertView.setTag(valuePage);            }            return convertView;        }        class ValuePage {            /*标题*/ ImageView BigHeadimg;            /*标题的颜色*/ TextView BigHeadTitle;            /*标题的日期*/ TextView BigHeadDate;            /*Item的标题*/ TextView ItemTitle_1;            /*Item的图片*/ ImageView ItemImg_1;            /*Item的标题*/ TextView ItemTitle_2;            /*Item的图片*/ ImageView ItemImg_2;            /*Item的标题*/ TextView ItemTitle_3;            /*Item的图片*/ ImageView ItemImg_3;            /*Item的标题*/ TextView ItemTitle_4;            /*Item的图片*/ ImageView ItemImg_4;        }    }    /**     * 保存通知界面的信息     */    class MsgValue {        /*创建信息的时间*/ String BigMSGDate;        /*展示大的图片的地址*/ String BigHeadimg;        /*大的图片的标题颜色*/ String BigHeadTitlecolor;        /*大的图片的标题*/ String BigHeadTitle;        /*大的图片的点击地址*/ String onClick;        ArrayList<LineItemValues> lineItemValues = new ArrayList<LineItemValues>();        /**         * 创建好了就直接清空         */        public String getOnClick() {            return onClick;        }        public void setOnClick(String onClick) {            this.onClick = onClick;        }        public MsgValue() {            lineItemValues.clear();        }        public String getBigMSGDate() {            return BigMSGDate;        }        public void setBigMSGDate(String bigMSGDate) {            BigMSGDate = bigMSGDate;        }        public String getBigHeadimg() {            return BigHeadimg;        }        public void setBigHeadimg(String bigHeadimg) {            BigHeadimg = bigHeadimg;        }        public String getBigHeadTitlecolor() {            return BigHeadTitlecolor;        }        public void setBigHeadTitlecolor(String bigHeadTitlecolor) {            BigHeadTitlecolor = bigHeadTitlecolor;        }        public String getBigHeadTitle() {            return BigHeadTitle;        }        public void setBigHeadTitle(String bigHeadTitle) {            BigHeadTitle = bigHeadTitle;        }        public LineItemValues getLineItemValues(int position) {            return lineItemValues.get(position);        }        public void setLineItemValues(LineItemValues _itemValues) {            this.lineItemValues.add(_itemValues);        }    }    class LineItemValues {        /*标题*/ String ItemTitle;        /*标题的颜色*/ String ItemTitleColor;        /*点击的URL*/ String ItemOnclick;        /*载入的图片地址*/ String ItemImgurl;        public String getItemTitle() {            return ItemTitle;        }        public void setItemTitle(String itemTitle) {            ItemTitle = itemTitle;        }        public String getItemTitleColor() {            return ItemTitleColor;        }        public void setItemTitleColor(String itemTitleColor) {            ItemTitleColor = itemTitleColor;        }        public String getItemOnclick() {            return ItemOnclick;        }        public void setItemOnclick(String itemOnclick) {            ItemOnclick = itemOnclick;        }        public String getItemImgurl() {            return ItemImgurl;        }        public void setItemImgurl(String itemImgurl) {            ItemImgurl = itemImgurl;        }    }}