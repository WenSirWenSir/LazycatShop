package shlm.lmcs.com.lazycat.LazyShopAct.SystemAct;import android.annotation.SuppressLint;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.ArrayAdapter;import android.widget.ImageView;import android.widget.Spinner;import android.widget.Toast;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import org.xmlpull.v1.XmlPullParser;import java.util.ArrayList;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyAct.LazyCatAct;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.RelativeLayoutUnt;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.TextUnt;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Tools;import shlm.lmcs.com.lazycat.LazyShopPage.LocalOrderpage;import shlm.lmcs.com.lazycat.LazyShopTools.LocalProgramTools;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;/** * 拒绝某个商品  不签单支付金额 */public class SystemRefuseshop extends LazyCatAct {    private String orderNumber;    private LocalProgramTools.UserToolsInstance userToolsInstance;/*用户的工具类*/    private String MSG = "SystemRefuseshop";    private ArrayAdapter<String> spinnerAdapter;    private Spinner spinner;    private LocalOrderpage localOrderpage = new LocalOrderpage();    @SuppressLint("ResourceType")    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setTransparentBar();        setContentView(R.layout.activity_systemrefuseshop);        TextUnt.with(this, R.id.assembly_act_headTitle).setText("填写拒单原因");        orderNumber = getBundlerValue(LocalAction.WINDOWS_TO_WINDOWS.ACTION_ORDERNUMBER);        userToolsInstance = LocalProgramTools.getUserToolsInstance();/*获取工具类的实例对象*/        /*设置点击的样式*/        TextUnt.with(this, R.id.activity_systemrefuseshop_btnRefuse).setTextColor("#ffffff")                .setBackground(Tools.CreateDrawable(1, getResources().getString(R.color                        .ThemeColor), getResources().getString(R.color.ThemeColor), 5))                .setOnClick(new View.OnClickListener() {            @Override            public void onClick(View v) {            }        });        /*显示下拉选择框*/        ArrayList<String> spinnerList = new ArrayList<String>();        spinnerList.add("商品破损");        spinnerList.add("日期不符合");        spinnerList.add("重量不符合");        spinnerList.add("价格不符合");        spinnerAdapter = new ArrayAdapter<String>(this, R.layout                .support_simple_spinner_dropdown_item, spinnerList);        init();        listener();    }    private void listener() {        findViewById(R.id.assembly_act_headBackImg).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });    }    public void init() {        /*找到控件*/        spinner = findViewById(R.id.activity_systemrefuseshop_spinner);        /*设置下拉控件*/        spinner.setAdapter(spinnerAdapter);        /*判断是否登录*/        if (!userToolsInstance.isLogin()) {            Toast.makeText(getApplicationContext(), "您还没有登录过仓库网络哦", Toast.LENGTH_SHORT).show();            finish();        } else {            XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder();            xmlInstance.initDom();            xmlInstance.setXmlTree(LocalAction.ACTION_LOGIN.ACTION_PHONE, userToolsInstance                    .GetUserpageOnAction(LocalAction.ACTION_LOCALUSERPAGE                            .ACTION_LOCALUSERPAGE_ACCOUNT));            /*设置手机号*/            xmlInstance.setXmlTree(LocalAction.ACTION_LOGIN.ACTION_TOKEN, userToolsInstance                    .GetUserpageOnAction(LocalAction.ACTION_LOCALUSERPAGE                            .ACTION_LOCALUSERPAGE_TOKEN));            /*设置TOKEN*/            xmlInstance.setXmlTree(LocalAction.ACTION_SENDORDER_SYSTEM.ACTION_ORDERNUMBER,                    orderNumber);/*设置订单号*/            xmlInstance.overDom();            Net.doPostXml(getApplicationContext(), LocalValues.HTTP_ADDRS.HTTP_ADDR_TOREFUSESHOP,                    new ProgramInterface() {                @Override                public void onSucess(String data, int code, WaitDialog.RefreshDialog                        _refreshDialog) {                    Log.e(MSG, "提交数据返回:" + data.trim());                    if (data.equals(LocalValues.NET_ERROR)) {                        Toast.makeText(getApplicationContext(), "没有获取到订单数据,请联系管理人员", Toast                                .LENGTH_SHORT).show();                    } else {                        if (data.trim().equals(LocalValues.NET_ERROR)) {                            Toast.makeText(getApplicationContext(), "无法获取订单包数据信息,请检查", Toast                                    .LENGTH_SHORT).show();                        } else {                            Log.i(MSG, "获取的数据信息为:" + data.trim());                            XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data                                    .trim());                            xmlanalysisFactory.Startanalysis(new XmlanalysisFactory                                    .XmlanalysisInterface() {                                @Override                                public void onFaile() {                                }                                @Override                                public void onStartDocument(String tag) {                                }                                @Override                                public void onStartTag(String tag, XmlPullParser pullParser,                                                       Integer id) {                                    try {                                        /*下单时候的Vip的状态*/                                        if (tag.equals(LocalAction.ACTION_SENDORDER_SYSTEM                                                .ACTION_ORDER_INVIPSTATUS)) {                                            localOrderpage.setSt_inorderVipstatus(pullParser                                                    .nextText().trim());                                            Log.i(MSG, "1");                                        }                                        /*订单状态*/                                        if (tag.equals(LocalAction.ACTION_SENDORDER_SYSTEM                                                .ACTION_ORDER_STATUS)) {                                            localOrderpage.setSt_orderstatus(pullParser.nextText                                                    ().trim());                                            Log.i(MSG, "2");                                        }                                        /*设置商品价格对应的单位*/                                        if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                .ACTION_SHOPVALUES_COMPANY)) {                                            localOrderpage.setSt_company(pullParser.nextText()                                                    .trim());                                            Log.i(MSG, "3");                                        }                                        /*设置商品的虚线的价格*/                                        if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                .ACTION_SHOPVALUES_DLP)) {                                            localOrderpage.setSt_dlp(pullParser.nextText().trim());                                            Log.i(MSG, "4");                                        }                                        /*设置商品的下单时间*/                                        if (tag.equals(LocalAction.ACTION_SENDORDER_SYSTEM                                                .ACTION_SEND_TIME)) {                                            localOrderpage.setSt_ordertime(pullParser.nextText()                                                    .trim());                                            Log.i(MSG, "5");                                        }                                        /*设置商品的距离*/                                        if (tag.equals(LocalAction.ACTION_SENDORDER_SYSTEM                                                .ACTION_ORDER_DISTANCE)) {                                            localOrderpage.setSt_distance(pullParser.nextText()                                                    .trim());                                            Log.i(MSG, "6");                                        }                                        /*设置商品的图片*/                                        if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                .ACTION_SHOPVALUES_IMG)) {                                            localOrderpage.setSt_img(pullParser.nextText().trim());                                            Log.i(MSG, "7");                                        }                                        /*获取商品标题*/                                        if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                .ACTION_SHOPVALUES_TITLE)) {                                            localOrderpage.setSt_title(pullParser.nextText().trim                                                    ());                                            Log.i(MSG, "8");                                        }                                        /*获取商品的唯一ID*/                                        if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                .ACTION_SHOPVALUES_ONLYID)) {                                            localOrderpage.setSt_onlyId(pullParser.nextText()                                                    .trim());                                            Log.i(MSG, "9");                                        }                                        /*获取商品的订购数量*/                                        if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                .ACTION_SHOPVALUES_TOPAYHOW)) {                                            localOrderpage.setSt_payHow(pullParser.nextText()                                                    .trim());                                            Log.i(MSG, "10");                                        }                                        /*设置商品的批发价格*/                                        if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                .ACTION_SHOPVALUES_TP)) {                                            localOrderpage.setSt_tp(pullParser.nextText().trim());                                            Log.i(MSG, "11");                                        }                                        /*设置商品的规格*/                                        if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                .ACTION_SHOPVALUES_SPEC)) {                                            localOrderpage.setSt_spec(pullParser.nextText().trim());                                            Log.i(MSG, "12");                                        }                                        /*获取分割的最低单位*/                                        if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                .ACTION_SHOPVALUES_SPLITUNIT)) {                                            localOrderpage.setSt_splitunit(pullParser.nextText()                                                    .trim());                                            Log.i(MSG, "13");                                        }                                        /*设置保质期*/                                        if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                .ACTION_SHOPVALUES_PD)) {                                            localOrderpage.setSt_pd(pullParser.nextText().trim());                                            Log.i(MSG, "14");                                        }                                        /*设置生产日期*/                                        if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                .ACTION_SHOPVALUES_EXP)) {                                            localOrderpage.setSt_exp(pullParser.nextText().trim());                                            Log.i(MSG, "15");                                        }                                        /*设置订单号*/                                        if (tag.equals(LocalAction.ACTION_SENDORDER_SYSTEM                                                .ACTION_ORDERNUMBER)) {                                            localOrderpage.setSt_orderNumber(pullParser.nextText                                                    ().trim());                                            Log.i(MSG, "16");                                        }                                        /*设置到期时间戳*/                                        if (tag.equals(LocalAction.ACTION_SENDORDER_SYSTEM                                                .ACTION_ORDER_TIMESTAMP)) {                                            localOrderpage.setSt_arriveeventStamp(pullParser                                                    .nextText().trim());                                            Log.i(MSG, "17");                                        }                                        /*设置订单的状态*/                                        if (tag.equals(LocalAction.ACTION_SENDORDER_SYSTEM                                                .ACTION_ORDER_STATUS)) {                                            localOrderpage.setSt_orderstatus(pullParser.nextText                                                    ().trim());                                            Log.i(MSG, "18");                                        }                                        /*商品的条码*/                                        if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                .ACTION_SHOPVALUES_BARCODE)) {                                            localOrderpage.setSt_barcode(pullParser.nextText()                                                    .trim());                                            Log.i(MSG, "19");                                        }                                        /*设置商品状态*/                                        if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                .ACTION_SHOPVALUES_SAVESTATUS)) {                                            localOrderpage.setSt_shopstatus(pullParser.nextText()                                                    .trim());                                            Log.i(MSG, "20");                                        }                                    } catch (Exception e) {                                    }                                }                                @Override                                public void onEndTag(String tag, XmlPullParser pullParser,                                                     Integer id) {                                }                                @Override                                public void onEndDocument() {                                    initMainpage();                                }                            });                        }                    }                }                @Override                public WaitDialog.RefreshDialog onStartLoad() {                    return null;                }                @Override                public void onFaile(String data, int code) {                }            }, xmlInstance.getXmlTree());        }    }    @SuppressLint("ResourceType")    private void initMainpage() {        /*开始整理界面*/        /*设置标题*/        TextUnt.with(this, R.id.item_sendsystemorderact_list_shoptitle).setText(localOrderpage                .getSt_title());        /*设置标题*/        TextUnt.with(this, R.id.item_sendsystemorderact_list_shoptitle).setText(localOrderpage                .getSt_title());        /*设置规格*/        TextUnt.with(this, R.id.item_sendsystemorderact_list_spec).setText(localOrderpage                .getSt_company() + "装x" + localOrderpage.getSt_spec() + localOrderpage                .getSt_splitunit());        /*设置订单号*/        TextUnt.with(this, R.id.item_sendsystemorderact_list_orderNumber).setText(localOrderpage                .getSt_orderNumber());        /*设置订购数量*/        TextUnt.with(this, R.id.item_sendsystemorderact_list_sendTopay).setText("共计订购:" +                localOrderpage.getSt_payHow() + localOrderpage.getSt_company());        /*设置保质期和生产日期*/        TextUnt.with(this, R.id.item_sendsystemorderact_list_expandpd).setText("生产日期:" +                localOrderpage.getSt_exp() + "|保质期:" + localOrderpage.getSt_pd() + "天");        /*设置订单创建日期*/        TextUnt.with(this, R.id.item_sendsystemorderact_list_createTime).setText("订货单创建日期:" +                localOrderpage.getSt_ordertime());        /*计算需要支付的金额*/        TextUnt.with(this, R.id.item_sendsystemorderact_list_tp).setText(Tools.calcToRide                (localOrderpage.getSt_payHow(), localOrderpage.getSt_tp()));        /*设置是否显示*/        RelativeLayoutUnt.with(this, R.id.item_sendsystemorderact_list_userknowBody)                .setVisibility(false);        TextUnt.with(this, R.id.item_sendsystemorderact_list_status).setVisibility(false);        switch (localOrderpage.getSt_shopstatus()) {            case LocalValues.VALUES_SHOPPAGE.NORMAL:                break;            case LocalValues.VALUES_SHOPPAGE.PROMOTION:                TextUnt.with(this, R.id.item_sendsystemorderact_list_Shopstatus).setText                        (getResources().getString(R.string.payPromotion)).setTextColor("#ffffff")                        .setBackground(Tools.CreateDrawable(1, getResources().getString(R.color                                .colorPromotion), getResources().getString(R.color                                .colorPromotion), 5));                break;            case LocalValues.VALUES_SHOPPAGE.REDUCTION:                TextUnt.with(this, R.id.item_sendsystemorderact_list_Shopstatus).setText                        (getResources().getString(R.string.payReduction)).setBackground(Tools                        .CreateDrawable(1, getResources().getString(R.color.colorReduction),                                getResources().getString(R.color.colorReduction), 5))                        .setTextColor("#ffffff");                break;            case LocalValues.VALUES_SHOPPAGE.VOLUME:                TextUnt.with(this, R.id.item_sendsystemorderact_list_Shopstatus).setText                        (getResources().getString(R.string.payVolumn)).setBackground(Tools                        .CreateDrawable(1, getResources().getString(R.color.colorVolumn),                                getResources().getString(R.color.colorVolumn), 5)).setTextColor                        ("#ffffff");                break;            case LocalValues.VALUES_SHOPPAGE.ONLY_VIP:                TextUnt.with(this, R.id.item_sendsystemorderact_list_Shopstatus).setText                        (getResources().getString(R.string.payOnlyvip)).setBackground(Tools                        .CreateDrawable(1, getResources().getString(R.color.colorVip),                                getResources().getString(R.color.colorVip), 5)).setTextColor                        ("#ffffff");                break;            case LocalValues.VALUES_SHOPPAGE.ONLY_ONE:                TextUnt.with(this, R.id.item_sendsystemorderact_list_Shopstatus).setText                        (getResources().getString(R.string.payOnlyone)).setBackground(Tools                        .CreateDrawable(1, getResources().getString(R.color.colorPayonly),                                getResources().getString(R.color.colorPayonly), 5)).setTextColor                        ("#ffffff");                break;        }        /*加载图片*/        ImageView img = findViewById(R.id.item_sendsystemorderact_list_img);        Glide.with(getApplicationContext()).load(LocalValues.HTTP_ADDRS.HTTP_ADDR_IMG_URL +                localOrderpage.getSt_img()).diskCacheStrategy(DiskCacheStrategy.NONE)                .skipMemoryCache(false).into(img);    }}