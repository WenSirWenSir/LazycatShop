package shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools;import android.graphics.Color;import android.graphics.drawable.Drawable;import android.util.Log;import android.view.View;import android.view.animation.Animation;import org.hamcrest.core.StringEndsWith;import java.util.ArrayList;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Tools;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;/** * 动画工具 */public class handlerView {    public static View _view;    public static ArrayList<View> arViews = new ArrayList<View>();    private static String MSG = "handlerView.java[+]";    private static handlerView _handlerView = new handlerView();    public static Boolean TAG = null;/*判断是否要处理多个VIEW*/    /**     * 处理单一的VIEW     *     * @param view     * @return     */    public handlerView get(View view) {        this._view = view;        this.TAG = false;        return _handlerView;    }    /**     * 处理多个VIEW     *     * @return     */    public handlerView get(ArrayList<View> _arViews) {        /*清空*/        this.arViews.clear();        this.arViews = _arViews;        this.TAG = true;        return _handlerView;    }    /**     * 设置控件的背景     *     * @param _width      线条宽度     * @param _backLine   背景线条颜色     * @param _background 背景颜色     * @param _raiuds     圆角     * @return     */    public handlerView setBackground(int _width, String _backLine, String _background, int _raiuds) {        try {            if (this.TAG) {                if (this.arViews.size() >= 0) {                    /*处理多组View*/                    for (int i = 0; i < this.arViews.size(); i++) {                        this.arViews.get(i).setBackground(Tools.CreateDrawable(_width, _backLine, _background,                                _raiuds));                    }                } else {                }            } else {                if (this._view != null) {                    this._view.setBackground(Tools.CreateDrawable(_width, _backLine, _background, _raiuds));                } else {                    Log.i(MSG, "设置背景错误信息");                }            }        } catch (Exception e) {            Log.i(MSG, "处理基本View的错误信息:" + e.getMessage());        }        return this._handlerView;    }    /**     * 设置动画     *     * @param _setAnimation 哪一种动画     * @return     */    public handlerView setAnimation(String _setAnimation) {        Animation _animation = null;        switch (_setAnimation) {            case LocalValues.VALUES_VIEWS.SHAKE_ANIMATION_1:                /*晃动动画第一种*/                _animation = Tools.shakeanimation(6);                break;            case LocalValues.VALUES_VIEWS.SHAKE_ANIMATION_2:                /*晃动动画第二种*/                _animation = Tools.shakeanimation_2(6);                break;        }        try {            if (this.TAG) {                if (this.arViews.size() >= 0) {                    /*处理多组View*/                    for (int i = 0; i < this.arViews.size(); i++) {                        if (_animation != null) {                            this.arViews.get(i).setAnimation(_animation);                        } else {                            Log.i(MSG, "设置动画失败");                        }                    }                } else {                }            } else {                if (this._view != null) {                    this._view.setAnimation(_animation);                } else {                    Log.i(MSG, "设置背景错误信息");                }            }        } catch (Exception e) {            Log.i(MSG, "处理基本View的错误信息:" + e.getMessage());        }        return this._handlerView;    }    /**     * 设置监听事件 如果POSITION设置-1  则代表全部监听一致     * 不然就直接设置POSITION     *     * @param _position     * @param _onClick     * @return     */    public handlerView setOnclick(int _position, View.OnClickListener _onClick) {        if (TAG) {            if (_position == -1) {                /*处理多个*/                /*处理多组View*/                for (int i = 0; i < this.arViews.size(); i++) {                    this.arViews.get(i).setOnClickListener(_onClick);                }            } else {                /*指定一个*/                this.arViews.get(_position).setOnClickListener(_onClick);            }        } else {            this._view.setOnClickListener(_onClick);        }        return this._handlerView;    }    /**     * 设置背景的颜色     *     * @param _position     * @param _color     * @return     */    public handlerView setBackColor(int _position, String _color) {        try {            if (TAG) {                if (_position == -1) {                    /*指定一个*/                    this.arViews.get(_position).setBackgroundColor(Color.parseColor(_color));                } else {                    /*处理多个*/                    /*处理多组View*/                    for (int i = 0; i <= this.arViews.size(); i++) {                        this.arViews.get(i).setBackgroundColor(Color.parseColor(_color));                    }                }            } else {                if(this._view == null){                    Log.i(MSG,"设置背景颜色,View为空");                }                else{                    this._view.setBackgroundColor(Color.parseColor(_color));                }            }        }catch (Exception e){            Log.i(MSG, "处理基本View的错误信息:" + e.getMessage());        }        return _handlerView;    }}