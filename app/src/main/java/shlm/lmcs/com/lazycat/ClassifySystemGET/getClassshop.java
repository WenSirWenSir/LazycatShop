/* * 我会用双手书写我来到这个世界的意义 */package shlm.lmcs.com.lazycat.ClassifySystemGET;import android.content.Context;import android.text.TextUtils;import android.util.Log;import org.xmlpull.v1.XmlPullParser;import java.util.ArrayList;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyPage.WAIT_ITME_DIALOGPAGE;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;/** * 根据分类和节点来获取数据信息 */public class getClassshop {    private static String MSG = "getClassshop.java[+]";    private static String ACTION_CLASSIFYLABEL = "label";    private static String ACTION_CLASSIFYNODE = "node";    private static String ACTION_PAGES = "pages";/*标签开始*/    private static Boolean LOGIN_STATUS;    private static ArrayList<shopPages> arPages;/*page集合*/    private static shopPages _page;/*PAGE*/    /**     * 获取数据信息     */    public static void get(final Context _context, String _label,String _node, final onClassshop _OnClassshop) {        LocalValues.HTTP_ADDRS http_addrs = new LocalValues.HTTP_ADDRS(_context);        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(true);        xmlInstance.setXmlTree(ACTION_CLASSIFYLABEL, _label);        xmlInstance.setXmlTree(ACTION_CLASSIFYNODE, _node);        xmlInstance.overDom();        Net.doPostXml(http_addrs.HTTP_ADDR_CLASSIFY_SYSTEM_GET_GETCLASSSHOP, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                Log.i(MSG, "根据分类和节点获取信息返回数据信息:" + data.trim());                _refreshDialog.dismiss();                XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                    @Override                    public void onFaile() {                    }                    @Override                    public void onStartDocument(String tag) {                        arPages = new ArrayList<>();                        arPages.clear();                    }                    @Override                    public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                        try {                            if (tag.equals(ACTION_PAGES)) {                                _page = new shopPages();                            }                            /*登录状态*/                            if (tag.equals(LocalAction.ACTION_LOGIN.ACTION_XML_LOGINSTATUS)) {                                if (pullParser.nextText().trim().equals(LocalValues.VALUES_LOGIN.LOGIN_OK)) {                                    LOGIN_STATUS = true;                                } else {                                    LOGIN_STATUS = false;                                }                            }                            /*标题*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_TITLE)) {                                _page._title = pullParser.nextText().trim();                            }                            /*保质期*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_PD)) {                                _page._pd = pullParser.nextText().trim();                            }                            /*生产日期*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_EXP)) {                                _page._exp = pullParser.nextText().trim();                            }                            /*规格*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_SPEC)) {                                _page._spec = pullParser.nextText().trim();                            }                            /*价格*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_TP)) {                                _page._tp = pullParser.nextText().trim();                            }                            /*价格对应的单位*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_COMPANY)) {                                _page._tpUnit = pullParser.nextText().trim();                            }                            /*积分*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_INTEGRAL)) {                                _page._integral = pullParser.nextText().trim();                            }                            /*图片地址*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_IMG)) {                                _page._img = pullParser.nextText().trim();                            }                            /*库存*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_STOCKNUMBER)) {                                String _stock = pullParser.nextText().trim();                                if (TextUtils.isEmpty(_stock) || _stock.equals("0") || _stock.indexOf("-") != -1) {                                    _page._nostock = false;                                } else {                                    _page._nostock = true;                                }                            }                            /*封装单位*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_SPLITUNIT)) {                                _page._splitUnit = pullParser.nextText().trim();                            }                            /*唯一ID*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_ONLYID)) {                                _page._onlyId = pullParser.nextText().trim();                            }                        } catch (Exception e) {                            Log.e(MSG, "根据节点和标签获取信息失败:" + e.getMessage());                        }                    }                    @Override                    public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                        if (tag.equals(ACTION_PAGES)) {                            arPages.add(_page);                            _page = null;                        }                    }                    @Override                    public void onEndDocument() {                        _OnClassshop.onGet(LOGIN_STATUS, arPages);                    }                });            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                final WaitDialog.RefreshDialog refreshDialog = new WaitDialog.RefreshDialog(_context);                WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                wait_itme_dialogpage.setImg(R.id.item_wait_img);                wait_itme_dialogpage.setView(R.layout.item_wait);                wait_itme_dialogpage.setTitle(R.id.item_wait_title);                refreshDialog.Init(wait_itme_dialogpage);                refreshDialog.showRefreshDialog("请稍后...", false);                return refreshDialog;            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree().trim());    }    public interface onClassshop {        void onGet(Boolean _isLogin, ArrayList<shopPages> _pages);/*成功获取*/        void onError();    }    /**     * 商品的分类显示的表格     */    public static class shopPages {        public String _title;/*标题*/        public String _tp;/*价格*/        public String _exp;/*保质期*/        public String _pd;/*生产日期*/        public String _spec;/*规格*/        public String _tpUnit;/*价格对应的单位*/        public String _integral;/*积分*/        public String _img;/*图片地址*/        public Boolean _nostock;/*是否没有库存*/        public String _splitUnit;/*封装单位*/        public String _onlyId;/*唯一ID*/    }}