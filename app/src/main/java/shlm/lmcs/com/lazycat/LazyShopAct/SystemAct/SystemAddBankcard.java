package shlm.lmcs.com.lazycat.LazyShopAct.SystemAct;import android.annotation.SuppressLint;import android.graphics.Color;import android.graphics.Typeface;import android.os.Bundle;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.util.Log;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import org.xmlpull.v1.XmlPullParser;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyAct.LazyCatAct;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyPage.WAIT_ITME_DIALOGPAGE;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.TextUnt;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Tools;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;/** * 添加银行卡的窗口界面 */public class SystemAddBankcard extends LazyCatAct {    private EditText input_cardNumber;    private EditText input_saveTel;    private TextView TvcardNumber;    private TextView TvcardPeople;    private EditText input_cardPeople;    private Spinner S_bankname;    private String[] St_bankname = new String[]{"*****", "建设银行", "农业银行", "工商银行", "农村信用社", "中国银行", "民生银行", "交通银行",            "邮政银行", "招商银行"};    private String MSG = "SystemAddBankcard.java[+]";    private LocalValues.HTTP_ADDRS http_addrs;    /**     * 如果有数据保存的值     */    private String st_bankname;    private String st_bankcard;    private String st_bankpeople;    private String st_banktel;    @Override    protected void onCreate(Bundle savedInstanceState) {        setTransparentBar();        setContentView(R.layout.activity_addbandcard);        TextUnt.with(this, R.id.assembly_act_headTitle).setText("添加银行卡");        input_cardNumber = findViewById(R.id.activity_addbandcard_cardNumber);/*输入卡号的EditText*/        input_cardPeople = findViewById(R.id.activity_addbandcard_cardSavePeople);/*输入的银行卡所属*/        input_saveTel = findViewById(R.id.activity_addbandcard_cardSaveTel);/*输入预留的手机号码*/        TvcardNumber = findViewById(R.id.activity_addbandcard_number);/*显示银行卡号*/        TvcardPeople = findViewById(R.id.activity_addbandcard_cardPeople);/*显示姓名*/        S_bankname = findViewById(R.id.activity_addbandcard_bankName);/*显示银行*/        http_addrs = new LocalValues.HTTP_ADDRS(getApplicationContext());        /*设置导航为EFEFEFE*/        findViewById(R.id.assembly_act_headBody).setBackgroundColor(Color.parseColor("#ffffff"));        init();        listener();        super.onCreate(savedInstanceState);    }    /**     * 初始化     */    @SuppressLint("ResourceType")    private void init() {        /*设置卡片的边框*/        findViewById(R.id.activity_addbandcard_CardBody).setBackground(Tools.CreateDrawable(1,                getResources().getString(R.color.ThemeColor), getResources().getString(R.color.ThemeColor), 10));        /*判断用户是否已经有存在银行卡了*/        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(true);        xmlInstance.overDom();        Net.doPostXml(http_addrs.HTTP_ADDR_GETBANKS, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                _refreshDialog.dismiss();                Log.i(MSG, "获取银行卡的信息为:" + data.trim());                if (data.equals(LocalValues.NET_ERROR)) {                    /*没有绑定银行卡*/                    initNotcard();                } else {                    /*存在银行卡*/                    XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                    xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                        @Override                        public void onFaile() {                        }                        @Override                        public void onStartDocument(String tag) {                        }                        @Override                        public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                            try {                                /*所属银行*/                                if (tag.equals(LocalAction.ACTION_BANKS.BANK_NAME)) {                                    st_bankname = pullParser.nextText().trim();                                }                                /*用户名称*/                                if (tag.equals(LocalAction.ACTION_BANKS.BANK_PEOPLE)) {                                    st_bankpeople = pullParser.nextText().trim();                                }                                /*用户的电话*/                                if (tag.equals(LocalAction.ACTION_BANKS.BANK_TEL)) {                                    st_banktel = pullParser.nextText().trim();                                }                                /*用户的卡号*/                                if (tag.equals(LocalAction.ACTION_BANKS.BANK_CARD)) {                                    st_bankcard = pullParser.nextText().trim();                                }                            } catch (Exception e) {                            }                        }                        @Override                        public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                        }                        @Override                        public void onEndDocument() {                            initHaveCard();                        }                    });                }            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                /*初始化一个DIALOG*/                final WaitDialog.RefreshDialog refreshDialog = new WaitDialog.RefreshDialog(SystemAddBankcard.this);                WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                wait_itme_dialogpage.setImg(R.id.item_wait_img);                wait_itme_dialogpage.setView(R.layout.item_wait);                wait_itme_dialogpage.setCanClose(false);                wait_itme_dialogpage.setTitle(R.id.item_wait_title);                refreshDialog.Init(wait_itme_dialogpage);                refreshDialog.showRefreshDialog("加载中...", false);                return refreshDialog;            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree().trim());    }    /**     * 有银行卡的整理界面     */    private void initHaveCard() {        /*隐藏输入界面*/        findViewById(R.id.activity_addbandcard_inputBody).setVisibility(View.GONE);        TextUnt.with(this, R.id.activity_addbandcard_TextbankName).setText(st_bankname);/*设置银行卡归属*/        TextUnt.with(this, R.id.activity_addbandcard_number).setText(st_bankcard);/*设置卡号*/        TextUnt.with(this, R.id.activity_addbandcard_cardPeople).setText(st_bankpeople);        /*设置银行卡归属的人*/        /*隐藏提交按钮*/        findViewById(R.id.activity_systemaddtoVipBtn_to).setVisibility(View.GONE);    }    /**     * 没有银行卡的整理界面     */    private void initNotcard() {        /*显示输入界面*/        findViewById(R.id.activity_addbandcard_inputBody).setVisibility(View.VISIBLE);        /*增加银行*/        ArrayAdapter<String> aa_bankname = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item,                St_bankname);        aa_bankname.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);        S_bankname.setAdapter(aa_bankname);        /*设置字体*/        Typeface typeface = Typeface.createFromAsset(getApplicationContext().getAssets(), "font/price.ttf");        if (typeface != null) {            input_cardNumber.setTypeface(typeface);            /*设置银行预留手机号码的字体*/            TextUnt.with(this, R.id.activity_addbandcard_cardSaveTel).setFontFile(getApplicationContext(), "price");        } else {            Toast.makeText(getApplicationContext(), "为NULL", Toast.LENGTH_SHORT).show();        }    }    /**     * 监听事件     */    @SuppressLint("ResourceType")    private void listener() {        /**         * 退出监听事件         */        findViewById(R.id.assembly_act_headBackImg).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });        /**         * 监听事件  改变卡号码         */        input_cardNumber.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {                TvcardNumber.setText("");            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s)) {                    TvcardNumber.setText(s.toString());                } else {                    TvcardNumber.setText("****************");                }            }        });        /**         * 监听事件 改变卡姓名         */        input_cardPeople.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {                TvcardPeople.setText("");            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s)) {                    TvcardPeople.setText("持卡人:" + s.toString());                } else {                    TvcardPeople.setText("持卡人:***");                }            }        });        /*监听点击事件*/        /**         * 选择银行卡监听事件         */        S_bankname.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                TextUnt.with(SystemAddBankcard.this, R.id.activity_addbandcard_TextbankName).setText(St_bankname[position]);            }            @Override            public void onNothingSelected(AdapterView<?> parent) {            }        });        /**         * 请求绑定银行卡         */        TextUnt.with(this, R.id.activity_systemaddtoVipBtn_to).setOnClick(new View.OnClickListener() {            @Override            public void onClick(View v) {                /**                 * 判断是否填好所有的资料                 */                if (TextUnt.with(SystemAddBankcard.this, R.id.activity_addbandcard_TextbankName).getTexttoString().equals(St_bankname[0])) {                    Toast.makeText(getApplicationContext(), "银行名称不能为空！", Toast.LENGTH_SHORT).show();                } else if (input_cardNumber.getText().toString().equals("")) {                    Toast.makeText(getApplicationContext(), "银行卡号不能为空！", Toast.LENGTH_SHORT).show();                } else if (input_cardPeople.getText().toString().equals("")) {                    Toast.makeText(getApplicationContext(), "姓名不能为空！", Toast.LENGTH_SHORT).show();                } else if (input_saveTel.getText().toString().equals("")) {                    Toast.makeText(getApplicationContext(), "预留手机号码不能为空！", Toast.LENGTH_SHORT).show();                } else {                    XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(true);                    xmlInstance.setXmlTree(LocalAction.ACTION_BANKS.BANK_NAME,                            St_bankname[S_bankname.getSelectedItemPosition()]);/*设置银行名称*/                    xmlInstance.setXmlTree(LocalAction.ACTION_BANKS.BANK_CARD,                            input_cardNumber.getText().toString().trim());/*设置卡的号码*/                    xmlInstance.setXmlTree(LocalAction.ACTION_BANKS.BANK_TEL,                            input_saveTel.getText().toString().trim());/*设置银行手机号码*/                    xmlInstance.setXmlTree(LocalAction.ACTION_BANKS.BANK_PEOPLE,                            input_cardPeople.getText().toString().trim());/*设置姓名*/                    xmlInstance.overDom();                    Net.doPostXml(http_addrs.HTTP_ADDR_TOADDBANKS, new ProgramInterface() {                        @Override                        public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                            _refreshDialog.dismiss();                            Log.i(MSG, "增加用户的银行卡返回消息:" + data.trim());                            if (data.equals("1")) {                                Toast.makeText(getApplicationContext(), "银行卡添加失败!", Toast.LENGTH_SHORT).show();                            } else {                                Toast.makeText(getApplicationContext(), "银行卡添加成功!", Toast.LENGTH_SHORT).show();                                finish();/*直接结束程序*/                            }                        }                        @Override                        public WaitDialog.RefreshDialog onStartLoad() {                            /*初始化一个DIALOG*/                            final WaitDialog.RefreshDialog refreshDialog =                                    new WaitDialog.RefreshDialog(SystemAddBankcard.this);                            WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                            wait_itme_dialogpage.setImg(R.id.item_wait_img);                            wait_itme_dialogpage.setView(R.layout.item_wait);                            wait_itme_dialogpage.setCanClose(false);                            wait_itme_dialogpage.setTitle(R.id.item_wait_title);                            refreshDialog.Init(wait_itme_dialogpage);                            refreshDialog.showRefreshDialog("加载中...", false);                            return refreshDialog;                        }                        @Override                        public void onFaile(String data, int code) {                        }                    }, xmlInstance.getXmlTree().trim());                }            }        }).setBackground(Tools.CreateDrawable(1, getResources().getString(R.color.ThemeColor),                getResources().getString(R.color.ThemeColor), 5));    }}