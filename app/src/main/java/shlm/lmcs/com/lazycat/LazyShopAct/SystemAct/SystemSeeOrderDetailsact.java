package shlm.lmcs.com.lazycat.LazyShopAct.SystemAct;import android.annotation.SuppressLint;import android.graphics.Color;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.Toast;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import org.xmlpull.v1.XmlPullParser;import java.util.ArrayList;import java.util.Timer;import java.util.TimerTask;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyAct.LazyCatAct;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyPage.WAIT_ITME_DIALOGPAGE;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.TextUnt;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Config;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Tools;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Views.RefreshScrollView;import shlm.lmcs.com.lazycat.LazyShopAct.ShowshopOffice;import shlm.lmcs.com.lazycat.LazyShopTools.LocalProgramTools;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;import static shlm.lmcs.com.lazycat.LazyCatProgramUnt.Config.Windows.GET_WINDOW_VALUE_SHOP_ACTION;public class SystemSeeOrderDetailsact extends LazyCatAct {    private final int HANDLER_CALC_TIMER = 1;    private final int REFRESH_STOP_MESSAGELOAD = 2;    private String order_number;/*订单号码*/    private String MSG = "SystemSeeOrderDetailsact.java[+]";    private LocalProgramTools.UserToolsInstance userToolsInstance;    private RefreshScrollView _RefreshScrollView;    private Timer timer;    private Timer RefreshTimer;    private SeeOrderPage seeOrderPage;    private String action;    LocalValues.HTTP_ADDRS http_addrs;/*地址*/    private ShowshopList showshopList = null;    private ArrayList<ShowshopList> showShop_list = new ArrayList<ShowshopList>();    @SuppressLint("HandlerLeak")    private Handler handler = new Handler() {        @SuppressLint("ResourceType")        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case REFRESH_STOP_MESSAGELOAD:                    RefreshTimer.cancel();                    RefreshTimer = null;                    _RefreshScrollView.stopRefresh();                    break;            }            super.handleMessage(msg);        }    };    @SuppressLint({"ResourceType", "NewApi"})    @Override    protected void onCreate(Bundle savedInstanceState) {        setContentView(R.layout.activity_systemseeorder_details);        /*设置标题*/        TextUnt.with(this, R.id.assembly_act_headTitle).setText("订单详情");        findViewById(R.id.assembly_act_headBody).setBackgroundColor(Color.parseColor("#efefef"));        setTransparentBar();        /*获取地址工具*/        http_addrs = LocalValues.getHttpaddrs(getApplicationContext());        /*载入订单查询系统*/        action = getBundlerValue(LocalAction.ACTION);        /*设置载入的横向展示商品的控件 不显示距离*/        findViewById(R.id.item_searchshoplist_businessBody).setVisibility(View.GONE);        userToolsInstance = LocalProgramTools.getUserToolsInstance();        order_number = getBundlerValue(LocalAction.WINDOWS_TO_WINDOWS.ACTION_ORDERNUMBER);        /*下拉刷新*/        _RefreshScrollView = findViewById(R.id.activity_systemseeorder_details_ScrollView);        /*显示发货单的信息的窗口*/        LinearLayout SendOrdMsgbody = findViewById(R.id                .activity_systemseeorder_details_SendOrdmsgBody);        /*设置发货单的信息的边框*/        SendOrdMsgbody.setBackground(Tools.CreateDrawable(1, "#ffffff", "#ffffff", 20));        init();        listener();        super.onCreate(savedInstanceState);    }    /**     * 监听事件     */    private void listener() {        /*设置下拉刷新*/        LinearLayout item = findViewById(R.id.activity_systemseeorder_details_refreshHead);        _RefreshScrollView.SetHeadView("http://120.79.63.36/Photos/ConfigMain/" +                "shzService/MainPage/bigHeadMsg.png", "http://www.baidu.com", item, 100, R.id                .activity_systemseeorder_details_refreshHeadProgressbar, R.id                .activity_systemseeorder_details_refreshHeadImg);        /**         * 设置下拉的监听事件         */        _RefreshScrollView.SetLinstener(new RefreshScrollView.RefreshScrollViewListener() {            @Override            public void onRefresh() {            }            @Override            public void onRefreshDone() {            }            @Override            public void onStopRefresh() {            }            @Override            public void onState(int _static) {            }            @Override            public void onLoadMore() {            }            @Override            public void onLoadBottom() {            }            @Override            public void onScrollStop() {            }            @Override            public void onloadMessage() {                init();/*重新尝试加载*/                RefreshTimer = new Timer();                RefreshTimer.schedule(new TimerTask() {                    @Override                    public void run() {                        Message msg = new Message();                        msg.what = REFRESH_STOP_MESSAGELOAD;                        handler.sendMessage(msg);                    }                }, 3000);            }            @Override            public void onScrollDistance(int distance) {            }            @Override            public void onScrollToleft(int _moveCount) {            }            @Override            public void onScrollToRight(int _moveCount) {            }        });        /**         * 退出监听         */        findViewById(R.id.assembly_act_headBackImg).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });    }    /**     * 初始化     */    private void init() {        showShop_list.clear();        /*连接网络 ,获取数据信息*/        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(true);        xmlInstance.setXmlTree(LocalAction.ACTION_SHOP.ACTION_ORDER_NUMBER, order_number);        xmlInstance.setXmlTree(LocalAction.ACTION, action);        xmlInstance.overDom();        Net.doPostXml(getApplicationContext(), http_addrs.HTTP_ADDR_GETORDERPAGE, new                ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                Log.i(MSG, "返回的数据为:" + data.trim());                _refreshDialog.dismiss();                XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                    @Override                    public void onFaile() {                    }                    @Override                    public void onStartDocument(String tag) {                        seeOrderPage = new SeeOrderPage();                    }                    @Override                    public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                        try {                            /*设置剩余超时时间*/                            if (tag.equals(LocalAction.ACTION_SENDORDER_SYSTEM                                    .ACTION_ORDER_SURPLUS)) {                                Log.i(MSG, "1");                                seeOrderPage.setSurplusTime(pullParser.nextText().trim());                            }                            /*获取VIP状态*/                            if (tag.equals(LocalAction.ACTION_LOCALUSERPAGE                                    .ACTION_LOCALUSERPAGE_VIPSTATUS)) {                                Log.i(MSG, "2");                                seeOrderPage.setVipstatus(pullParser.nextText().trim());                            }                            /*获取商品的标题*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_TITLE)) {                                Log.i(MSG, "3");                                seeOrderPage.setTitle(pullParser.nextText().trim());                            }                            /*商品的状态*/                            if (tag.equals(LocalAction.ACTION_SENDORDER_SYSTEM                                    .ACTION_ORDER_STATUS)) {                                Log.i(MSG, "4");                                seeOrderPage.setOrderStatus(pullParser.nextText().trim());                            }                            /*价格对应的单位*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES                                    .ACTION_SHOPVALUES_COMPANY)) {                                Log.i(MSG, "5");                                seeOrderPage.setCompany(pullParser.nextText().trim());                            }                            /*设置商品的批发起订数量*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_SU)) {                                Log.i(MSG, "6");                                seeOrderPage.setSu(pullParser.nextText().trim());                            }                            /*设置商品的批发价格*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_TP)) {                                Log.i(MSG, "7");                                seeOrderPage.setTp(pullParser.nextText().trim());                            }                            /*设置横线的价格*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_DLP)) {                                Log.i(MSG, "8");                                seeOrderPage.setDottenPrice(pullParser.nextText().trim());                            }                            /*设置图片地址*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_IMG)) {                                Log.i(MSG, "9");                                seeOrderPage.setShopImg(pullParser.nextText().trim());                            }                            /*设置商户地址*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES                                    .ACTION_SHOPVALUES_BUSINSS)) {                                Log.i(MSG, "10");                                seeOrderPage.setBusinessName(pullParser.nextText().trim());                            }                            /*设置保质期*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_PD)) {                                Log.i(MSG, "11");                                seeOrderPage.setPd(pullParser.nextText().trim());                            }                            /*设置生产日期*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_EXP)) {                                Log.i(MSG, "12");                                seeOrderPage.setExp(pullParser.nextText().trim());                            }                            /*设置最低的箱装单位*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES                                    .ACTION_SHOPVALUES_SPLITUNIT)) {                                Log.i(MSG, "13");                                seeOrderPage.setSplitUnit(pullParser.nextText().trim());                            }                            /*设置规格*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_SPEC)) {                                Log.i(MSG, "14");                                seeOrderPage.setSpec(pullParser.nextText().trim());                            }                            /*设置时间戳*/                            if (tag.equals(LocalAction.ACTION_SENDORDER_SYSTEM                                    .ACTION_ORDER_TIMESTAMP)) {                                Log.i(MSG, "15");                                seeOrderPage.setTimeStamp(pullParser.nextText().trim());                            }                            /*设置下单时间*/                            if (tag.equals(LocalAction.ACTION_SENDORDER_SYSTEM.ACTION_SEND_TIME)) {                                seeOrderPage.setOrderTime(pullParser.nextText().trim());                            }                            /*设置订单号*/                            if (tag.equals(LocalAction.ACTION_SENDORDER_SYSTEM                                    .ACTION_ORDERNUMBER)) {                                seeOrderPage.setOrderNumber(pullParser.nextText().trim());                            }                            /*设置订购数量*/                            if (tag.equals(LocalAction.ACTION_SENDORDER_SYSTEM                                    .ACTION_ORDER_TOPAY_HOW)) {                                seeOrderPage.setToPayhow(pullParser.nextText().trim());                            }                            /*判断商品的状态*/                            if (tag.equals(LocalAction.ACTION_SENDORDER_SYSTEM                                    .ACTION_ORDER_SHOP_STATUS)) {                                seeOrderPage.setShopstatus(pullParser.nextText().trim());                            }                        } catch (Exception e) {                        }                    }                    @Override                    public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                    }                    @Override                    public void onEndDocument() {                        handlerShop();                        _RefreshScrollView.stopRefresh();                    }                });            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                /*初始化一个DIALOG*/                final WaitDialog.RefreshDialog refreshDialog = new WaitDialog.RefreshDialog                        (SystemSeeOrderDetailsact.this);                WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                wait_itme_dialogpage.setImg(R.id.item_wait_img);                wait_itme_dialogpage.setView(R.layout.item_wait);                wait_itme_dialogpage.setCanClose(false);                wait_itme_dialogpage.setTitle(R.id.item_wait_title);                refreshDialog.Init(wait_itme_dialogpage);                refreshDialog.showRefreshDialog("加载中...", false);                return refreshDialog;            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree().trim());    }    /**     * 整理订单界面     */    @SuppressLint("ResourceType")    private void handlerShop() {        /*设置标题*/        TextUnt.with(this, R.id.item_searchshoplist_title).setText(seeOrderPage.getTitle());        /*设置批发的价格*/        TextUnt.with(this, R.id.item_searchshoplist_price).setText(seeOrderPage.getTp());        /*设置价格对应的单位*/        TextUnt.with(this, R.id.item_searchshoplist_company).setText("/" + seeOrderPage                .getCompany());        /*判断订单状态*/        /*判断商品的状态 如果是拼团 和  预定 就不要开始计时 顺便弹窗告诉商户这个订单没有那么快出单*/        switch (seeOrderPage.getShopstatus()) {            case LocalValues.VALUES_SHOPPAGE.NORMAL:                /*正常*/                TextUnt.with(this, R.id.item_searchshoplist_price).setTextColor(getResources()                        .getString(R.color.colorPrice));                break;            case LocalValues.VALUES_SHOPPAGE.PROMOTION:                /*促销商品*/                TextUnt.with(this, R.id.item_searchshoplist_price).setTextColor(getResources()                        .getString(R.color.colorPromotion));                /*需要设置状态*/                TextUnt.with(this, R.id.item_searchshoplist_titleStatic).setTextColor("#ffffff")                        .setBackground(Tools.CreateDrawable(1, getResources().getString(R.color                                .colorPromotion), getResources().getString(R.color                                .colorPromotion), 5)).setText(getResources().getString(R.string                        .payPromotion));                /*需要设置画横线的价格*/                try {                    if (seeOrderPage.getDottenPrice() != null && !seeOrderPage.getDottenPrice()                            .equals("0")) {                        TextUnt.with(this, R.id.item_searchshoplist_dottedlinePrice).setText                                (getResources().getString(R.string.PriceSymbol) + seeOrderPage                                        .getDottenPrice()).setVisibility(true).setMidcourtLine();                    }                } catch (Exception e) {                    Log.e(MSG, "设置画横线的价格失败:" + e.getMessage());                }                break;            case LocalValues.VALUES_SHOPPAGE.REDUCTION:                /*满减*/                TextUnt.with(this, R.id.item_searchshoplist_price).setTextColor(getResources()                        .getString(R.color.colorReduction));                /*需要设置状态*/                TextUnt.with(this, R.id.item_searchshoplist_titleStatic).setTextColor("#ffffff")                        .setBackground(Tools.CreateDrawable(1, getResources().getString(R.color                                .colorReduction), getResources().getString(R.color                                .colorReduction), 5)).setText(getResources().getString(R.string                        .payReduction));                /*需要设置画横线的价格*/                try {                    if (seeOrderPage.getDottenPrice() != null && !seeOrderPage.getDottenPrice()                            .equals("0")) {                        TextUnt.with(this, R.id.item_searchshoplist_dottedlinePrice).setText                                (getResources().getString(R.string.PriceSymbol) + seeOrderPage                                        .getDottenPrice()).setVisibility(true).setMidcourtLine();                    }                } catch (Exception e) {                    Log.e(MSG, "设置画横线的价格失败:" + e.getMessage());                }                break;            case LocalValues.VALUES_SHOPPAGE.VOLUME:                /*领劵*/                TextUnt.with(this, R.id.item_searchshoplist_price).setTextColor(getResources()                        .getString(R.color.colorVolumn));                /*需要设置状态*/                TextUnt.with(this, R.id.item_searchshoplist_titleStatic).setTextColor("#ffffff")                        .setBackground(Tools.CreateDrawable(1, getResources().getString(R.color                                .colorVolumn), getResources().getString(R.color.colorVolumn), 5))                        .setText(getResources().getString(R.string.payVolumn));                /*需要设置画横线的价格*/                try {                    if (seeOrderPage.getDottenPrice() != null && !seeOrderPage.getDottenPrice()                            .equals("0")) {                        TextUnt.with(this, R.id.item_searchshoplist_dottedlinePrice).setText                                (getResources().getString(R.string.PriceSymbol) + seeOrderPage                                        .getDottenPrice()).setVisibility(true).setMidcourtLine();                    }                } catch (Exception e) {                    Log.e(MSG, "设置画横线的价格失败:" + e.getMessage());                }            case LocalValues.VALUES_SHOPPAGE.ONLY_VIP:                /*Vip专属*/                TextUnt.with(this, R.id.item_searchshoplist_price).setTextColor(getResources()                        .getString(R.color.colorVip));                /*需要设置状态*/                TextUnt.with(this, R.id.item_searchshoplist_titleStatic).setTextColor("#ffffff")                        .setBackground(Tools.CreateDrawable(1, getResources().getString(R.color                                .colorVip), getResources().getString(R.color.colorVip), 5))                        .setText(getResources().getString(R.string.payOnlyvip));                /*需要设置画横线的价格*/                try {                    if (seeOrderPage.getDottenPrice() != null && !seeOrderPage.getDottenPrice()                            .equals("0")) {                        TextUnt.with(this, R.id.item_searchshoplist_dottedlinePrice).setText                                (getResources().getString(R.string.PriceSymbol) + seeOrderPage                                        .getDottenPrice()).setVisibility(true).setMidcourtLine();                    }                } catch (Exception e) {                    Log.e(MSG, "设置画横线的价格失败:" + e.getMessage());                }                break;            case LocalValues.VALUES_SHOPPAGE.ONLY_ONE:                /*限定一件*/                TextUnt.with(this, R.id.item_searchshoplist_price).setTextColor(getResources()                        .getString(R.color.colorPayonly));                /*需要设置状态*/                TextUnt.with(this, R.id.item_searchshoplist_titleStatic).setTextColor("#ffffff")                        .setBackground(Tools.CreateDrawable(1, getResources().getString(R.color                                .colorPayonly), getResources().getString(R.color.colorPayonly),                                5)).setText(R.string.payOnlyone);                /*需要设置画横线的价格*/                try {                    if (seeOrderPage.getDottenPrice() != null && !seeOrderPage.getDottenPrice()                            .equals("0")) {                        TextUnt.with(this, R.id.item_searchshoplist_dottedlinePrice).setText                                (getResources().getString(R.string.PriceSymbol) + seeOrderPage                                        .getDottenPrice()).setVisibility(true).setMidcourtLine();                    }                } catch (Exception e) {                    Log.e(MSG, "设置画横线的价格失败:" + e.getMessage());                }                break;            case LocalValues.VALUES_SHOPPAGE.WHOLEASALE:                /*商品拼团*/                TextUnt.with(this, R.id.item_searchshoplist_price).setTextColor(getResources()                        .getString(R.color.colorWholeasale));                TextUnt.with(this, R.id.item_searchshoplist_titleStatic).setTextColor("#ffffff")                        .setBackground(Tools.CreateDrawable(1, getResources().getString(R.color                                .colorWholeasale), getResources().getString(R.color                                .colorWholeasale), 5)).setText(R.string.payWholeasale);                break;            case LocalValues.VALUES_SHOPPAGE.RESERVE:                TextUnt.with(this, R.id.item_searchshoplist_price).setTextColor(getResources()                        .getString(R.color.colorReserve));                TextUnt.with(this, R.id.item_searchshoplist_titleStatic).setTextColor("#ffffff")                        .setBackground(Tools.CreateDrawable(1, getResources().getString(R.color                                .colorReserve), getResources().getString(R.color.colorReserve),                                5)).setText(R.string.payReserve);                break;        }        /*设置不要显示商家距离*/        findViewById(R.id.item_searchshoplist_businessBody).setVisibility(View.GONE);        ImageView shopImg = findViewById(R.id.item_searchshoplist_img);/*图片控件*/        /*设置配送商家地址*/        TextUnt.with(this, R.id.item_searchshoplist_businessName).setText(R.string.deliverforck);        /*设置规格和规格X数量*/        TextUnt.with(this, R.id.activity_systemseeorder_details_toPayhow).setText(seeOrderPage                .getToPayhow() + seeOrderPage.getCompany() + ";" + seeOrderPage.getSpec() +                seeOrderPage.getSplitUnit() + "装");        /*生产和保质期*/        TextUnt.with(this, R.id.activity_systemseeorder_details_Expandpd).setText(seeOrderPage                .getExp() + "|保质期:" + seeOrderPage.getPd().trim() + "天");        /*设置订单提交日期*/        TextUnt.with(this, R.id.activity_systemseeorder_details_sendOrderTime).setText                (seeOrderPage.getOrderTime());        /*设置订单号*/        TextUnt.with(this, R.id.activity_systemseeorder_details_Ordernumbr).setText(seeOrderPage                .getOrderNumber().trim());        /*设置时间戳*/        Log.i(MSG, "时间戳:" + seeOrderPage.getTimeStamp());        TextUnt.with(this, R.id.activity_systemseeorder_details_timeStamp).setText(seeOrderPage                .getTimeStamp());        /*设置服务*/        if (seeOrderPage.getVipstatus().equals(LocalValues.VALUES_USERCENTER.IS_VIP)) {            /*下单时候是VIP 设置有Vip服务的信息*/            TextUnt.with(this, R.id.activity_systemseeorder_details_servicemsg).setText                    (getResources().getString(R.string.orderVipServiceMsg)).setBackground(Tools                    .CreateDrawable(getApplicationContext(), 1, R.color.colorVip, R.color                            .colorVip, 5)).setTextColor("#FFFFFF");            /*设置有服务状态*/            /*判断是否为是拼团和预定*/            if (seeOrderPage.getOrderStatus().equals(LocalValues.VALUES_SENDSYSTEM.IN_RESERVE) ||                    seeOrderPage.getOrderStatus().equals(LocalValues.VALUES_SENDSYSTEM                            .IN_WHOLEASALE)) {                /*如果是拼团和预定的状态 就显示倒计时 但是不进行倒计时作用*/                TextUnt.with(SystemSeeOrderDetailsact.this, R.id.item_searchshoplist_deliverVip)                        .setBackground(Tools.CreateDrawable(getApplicationContext(), 1, R.color                                .colorVip, R.color.colorVip, 5)).setText(R.string.deliverService)                        .setTextColor("#ffffff");            } else {                TextUnt.with(SystemSeeOrderDetailsact.this, R.id.item_searchshoplist_deliverVip)                        .setBackground(Tools.CreateDrawable(getApplicationContext(), 1, R.color                                .colorVip, R.color.colorVip, 5)).setText(R.string.deliverService)                        .setTextColor("#ffffff");            }        } else {            /*下单的时候不是VIP 设置无售后服务*/            TextUnt.with(this, R.id.activity_systemseeorder_details_servicemsg).setText                    (getResources().getString(R.string.ordernotVipServiceMsg)).setTextColor                    ("#020433").setBackground(Tools.CreateDrawable(getApplicationContext(), 1, R                    .color.colornoVip, R.color.colornoVip, 5));            /*如果是拼团和预定 就不要显示状态了*/            if (seeOrderPage.getOrderStatus().equals(LocalValues.VALUES_SENDSYSTEM.IN_RESERVE) ||                    seeOrderPage.getOrderStatus().equals(LocalValues.VALUES_SENDSYSTEM                            .IN_WHOLEASALE)) {                TextUnt.with(SystemSeeOrderDetailsact.this, R.id.item_searchshoplist_deliverVip)                        .setBackground(Tools.CreateDrawable(getApplicationContext(), 1, R.color                                .colornoVip, R.color.colornoVip, 5)).setText(R.string                        .deliverNoService).setTextColor("#ffffff");            } else {                /*设置Item的状态信息*/                TextUnt.with(SystemSeeOrderDetailsact.this, R.id.item_searchshoplist_deliverVip)                        .setBackground(Tools.CreateDrawable(getApplicationContext(), 1, R.color                                .colornoVip, R.color.colornoVip, 5)).setText(R.string                        .deliverNoService).setTextColor("#ffffff");            }        }        /*设置监听事件*/        findViewById(R.id.item_searchshoplist_body).setTag(seeOrderPage);        findViewById(R.id.item_searchshoplist_body).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                SeeOrderPage sop = (SeeOrderPage) v.getTag();                LazyCatStartActivityWithBundler(ShowshopOffice.class, false, Config.Windows                        .GET_WINDOW_VALUE_SHOP_MESSAGE, sop.getTitle().trim(),                        GET_WINDOW_VALUE_SHOP_ACTION, LocalValues.VALUES_SEARCH                                .VALUES_TO_SEARCH_SHOPKEYWORD);            }        });        /*设置加载图片*/        Glide.with(getApplicationContext()).load(http_addrs.HTTP_ADDR_IMG_URL + seeOrderPage                .getShopImg().trim()).into(shopImg);        /**         * 启动一个线程  用来处理推荐的商品的获取         */        getRecommendShop();    }    /**     * 获取推荐的商品的信息     */    private void getRecommendShop() {        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(false);        xmlInstance.initDom();        xmlInstance.setXmlTree(LocalAction.ACTION_GET_RECOMMENDSHOP.GET_NUMBER, "10");        xmlInstance.overDom();        Net.doPostXml(getApplicationContext(), http_addrs.HTTP_ADDR_GET_RECOMMEND_SHOP, new                ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                Log.i(MSG, "返回的数据为:" + data.trim());                _refreshDialog.dismiss();                XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                    @Override                    public void onFaile() {                    }                    @Override                    public void onStartDocument(String tag) {                        showShop_list.clear();                    }                    @Override                    public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                        try {                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_START)) {                                showshopList = new ShowshopList();                            }                            /*标题*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_TITLE)) {                                showshopList.set_title(pullParser.nextText().trim());                            }                            /*设置图片地址*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_IMG)) {                                showshopList.set_img(pullParser.nextText().trim());                            }                            /*商品的批发价格*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_TP)) {                                showshopList.set_tp(pullParser.nextText().trim());                            }                            /*商品唯一的ID*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES                                    .ACTION_SHOPVALUES_ONLYID)) {                                showshopList.set_onlyid(pullParser.nextText().trim());                            }                            /*商品批发价格对应的单位*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES                                    .ACTION_SHOPVALUES_COMPANY)) {                                showshopList.set_company(pullParser.nextText().trim());                            }                            /*商品的生产日期*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_PD)) {                                showshopList.set_pd(pullParser.nextText().trim());                            }                            /*商品的保质期*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_EXP)) {                                showshopList.set_exp(pullParser.nextText().trim());                            }                            /*商品的对接商家*/                            if (tag.equals(LocalAction.ACTION_SHOPVALUES                                    .ACTION_SHOPVALUES_BUSINSS)) {                                showshopList.set_business(pullParser.nextText().trim());                            }                        } catch (Exception e) {                        }                    }                    @Override                    public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                        if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_START)) {                            showShop_list.add(showshopList);                            showshopList = null;                        }                    }                    @Override                    public void onEndDocument() {                        handlerShowshop();                    }                });            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                /*初始化一个DIALOG*/                final WaitDialog.RefreshDialog refreshDialog = new WaitDialog.RefreshDialog                        (SystemSeeOrderDetailsact.this);                WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                wait_itme_dialogpage.setImg(R.id.item_wait_img);                wait_itme_dialogpage.setView(R.layout.item_wait);                wait_itme_dialogpage.setCanClose(false);                wait_itme_dialogpage.setTitle(R.id.item_wait_title);                refreshDialog.Init(wait_itme_dialogpage);                refreshDialog.showRefreshDialog("加载中...", false);                return refreshDialog;            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree());    }    /**     * 整理推荐商品的界面     */    @SuppressLint("ResourceType")    private void handlerShowshop() {        if (showShop_list.size() >= 10) {            LinearLayout showBody = findViewById(R.id.activity_systemseeorder_details_ShowShopbody);            for (int i = 0; i < 2; i += 2) {                View item = LayoutInflater.from(getApplicationContext()).inflate(R.layout                        .item_verticalshowshop, null);                /*设置左边的商品的标题*/                TextUnt.with(item, R.id.item_verticalshowShop_lefttitle).setText(showShop_list                        .get(i).get_title());                /*设置左边的商品的价格*/                TextUnt.with(item, R.id.item_verticalshowShop_lefttp).setText(showShop_list.get                        (i).get_tp()).setTextColor(getResources().getString(R.color.colorPrice));                /*设置左边的商品的单位*/                TextUnt.with(item, R.id.item_verticalshowShop_leftcompany).setText("/" +                        showShop_list.get(i).get_company());                /*设置左边的商品的图片*/                ImageView left_img = item.findViewById(R.id.item_verticalshowShop_leftimg);                /**                 * 左边的点击事件                 */                item.findViewById(R.id.item_verticalshowshop_leftShopbody).setTag(showShop_list                        .get(i).get_title());                item.findViewById(R.id.item_verticalshowshop_leftShopbody).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        String title = (String) v.getTag();                        LazyCatStartActivityWithBundler(ShowshopOffice.class, false,Config.Windows                                .GET_WINDOW_VALUE_SHOP_MESSAGE, title,                                GET_WINDOW_VALUE_SHOP_ACTION, LocalValues.VALUES_SEARCH                                        .VALUES_TO_SEARCH_SHOPKEYWORD);                    }                });                /**                 * 启动线程加载图片                 */                Glide.with(getApplicationContext()).load(http_addrs.HTTP_ADDR_IMG_URL +                        showShop_list.get(i).get_img().trim()).diskCacheStrategy                        (DiskCacheStrategy.NONE).skipMemoryCache(false).into(left_img);                /*设置右边的商品的标题*/                TextUnt.with(item, R.id.item_verticalshowShop_righttitle).setText(showShop_list                        .get(i + 1).get_title());                /*设置右边的商品的价格*/                TextUnt.with(item, R.id.item_verticalshowShop_righttp).setText(showShop_list.get                        (i + 1).get_tp()).setTextColor(getResources().getString(R.color                        .colorPrice));                /*设置右边的商品的单位*/                TextUnt.with(item, R.id.item_verticalshowShop_rightcompany).setText("/" +                        showShop_list.get(i + 1).get_company());                /*设置左边的商品的图片*/                ImageView right_img = item.findViewById(R.id.item_verticalshowShop_rightimg);                /**                 * 启动线程加载图片                 */                Glide.with(getApplicationContext()).load(http_addrs.HTTP_ADDR_IMG_URL +                        showShop_list.get(i + 1).get_img().trim()).diskCacheStrategy                        (DiskCacheStrategy.NONE).skipMemoryCache(false).into(right_img);                /**                 * 右边的点击事件                 */                item.findViewById(R.id.item_verticalshowshop_rightShopbody).setTag(showShop_list                        .get(i + 1).get_title());                item.findViewById(R.id.item_verticalshowshop_rightShopbody).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        String title = (String) v.getTag();                        LazyCatStartActivityWithBundler(ShowshopOffice.class, false,Config.Windows                                        .GET_WINDOW_VALUE_SHOP_MESSAGE, title,                                GET_WINDOW_VALUE_SHOP_ACTION, LocalValues.VALUES_SEARCH                                        .VALUES_TO_SEARCH_SHOPKEYWORD);                    }                });                showBody.addView(item);            }            for (int i = 2; i < 4; i += 2) {                View item = LayoutInflater.from(getApplicationContext()).inflate(R.layout                        .item_verticalshowshop, null);                /*设置左边的商品的标题*/                TextUnt.with(item, R.id.item_verticalshowShop_lefttitle).setText(showShop_list                        .get(i).get_title());                /*设置左边的商品的价格*/                TextUnt.with(item, R.id.item_verticalshowShop_lefttp).setText(showShop_list.get                        (i).get_tp()).setTextColor(getResources().getString(R.color.colorPrice));                /*设置左边的商品的单位*/                TextUnt.with(item, R.id.item_verticalshowShop_leftcompany).setText("/" +                        showShop_list.get(i).get_company());                /*设置左边的商品的图片*/                ImageView left_img = item.findViewById(R.id.item_verticalshowShop_leftimg);                /**                 * 左边的点击事件                 */                item.findViewById(R.id.item_verticalshowshop_leftShopbody).setTag(showShop_list                        .get(i).get_title());                item.findViewById(R.id.item_verticalshowshop_leftShopbody).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        String title = (String) v.getTag();                        LazyCatStartActivityWithBundler(ShowshopOffice.class, false,Config.Windows                                        .GET_WINDOW_VALUE_SHOP_MESSAGE, title,                                GET_WINDOW_VALUE_SHOP_ACTION, LocalValues.VALUES_SEARCH                                        .VALUES_TO_SEARCH_SHOPKEYWORD);                    }                });                /**                 * 启动线程加载图片                 */                Glide.with(getApplicationContext()).load(http_addrs.HTTP_ADDR_IMG_URL +                        showShop_list.get(i).get_img().trim()).diskCacheStrategy                        (DiskCacheStrategy.NONE).skipMemoryCache(false).into(left_img);                /*设置右边的商品的标题*/                TextUnt.with(item, R.id.item_verticalshowShop_righttitle).setText(showShop_list                        .get(i + 1).get_title());                /*设置右边的商品的价格*/                TextUnt.with(item, R.id.item_verticalshowShop_righttp).setText(showShop_list.get                        (i + 1).get_tp()).setTextColor(getResources().getString(R.color                        .colorPrice));                /*设置右边的商品的单位*/                TextUnt.with(item, R.id.item_verticalshowShop_rightcompany).setText("/" +                        showShop_list.get(i + 1).get_company());                /*设置左边的商品的图片*/                ImageView right_img = item.findViewById(R.id.item_verticalshowShop_rightimg);                /**                 * 启动线程加载图片                 */                Glide.with(getApplicationContext()).load(http_addrs.HTTP_ADDR_IMG_URL +                        showShop_list.get(i + 1).get_img().trim()).diskCacheStrategy                        (DiskCacheStrategy.NONE).skipMemoryCache(false).into(right_img);                /**                 * 右边的点击事件                 */                item.findViewById(R.id.item_verticalshowshop_rightShopbody).setTag(showShop_list                        .get(i + 1).get_title());                item.findViewById(R.id.item_verticalshowshop_rightShopbody).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        String title = (String) v.getTag();                        LazyCatStartActivityWithBundler(ShowshopOffice.class, false,Config.Windows                                        .GET_WINDOW_VALUE_SHOP_MESSAGE, title,                                GET_WINDOW_VALUE_SHOP_ACTION, LocalValues.VALUES_SEARCH                                        .VALUES_TO_SEARCH_SHOPKEYWORD);                    }                });                showBody.addView(item);            }            for (int i = 4; i < 6; i += 2) {                View item = LayoutInflater.from(getApplicationContext()).inflate(R.layout                        .item_verticalshowshop, null);                /*设置左边的商品的标题*/                TextUnt.with(item, R.id.item_verticalshowShop_lefttitle).setText(showShop_list                        .get(i).get_title());                /*设置左边的商品的价格*/                TextUnt.with(item, R.id.item_verticalshowShop_lefttp).setText(showShop_list.get                        (i).get_tp()).setTextColor(getResources().getString(R.color.colorPrice));                /*设置左边的商品的单位*/                TextUnt.with(item, R.id.item_verticalshowShop_leftcompany).setText("/" +                        showShop_list.get(i).get_company());                /*设置左边的商品的图片*/                ImageView left_img = item.findViewById(R.id.item_verticalshowShop_leftimg);                /**                 * 左边的点击事件                 */                item.findViewById(R.id.item_verticalshowshop_leftShopbody).setTag(showShop_list                        .get(i).get_title());                item.findViewById(R.id.item_verticalshowshop_leftShopbody).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        String title = (String) v.getTag();                        LazyCatStartActivityWithBundler(ShowshopOffice.class, false,Config.Windows                                        .GET_WINDOW_VALUE_SHOP_MESSAGE, title,                                GET_WINDOW_VALUE_SHOP_ACTION, LocalValues.VALUES_SEARCH                                        .VALUES_TO_SEARCH_SHOPKEYWORD);                    }                });                /**                 * 启动线程加载图片                 */                Glide.with(getApplicationContext()).load(http_addrs.HTTP_ADDR_IMG_URL +                        showShop_list.get(i).get_img().trim()).diskCacheStrategy                        (DiskCacheStrategy.NONE).skipMemoryCache(false).into(left_img);                /*设置右边的商品的标题*/                TextUnt.with(item, R.id.item_verticalshowShop_righttitle).setText(showShop_list                        .get(i + 1).get_title());                /*设置右边的商品的价格*/                TextUnt.with(item, R.id.item_verticalshowShop_righttp).setText(showShop_list.get                        (i + 1).get_tp()).setTextColor(getResources().getString(R.color                        .colorPrice));                /*设置右边的商品的单位*/                TextUnt.with(item, R.id.item_verticalshowShop_rightcompany).setText("/" +                        showShop_list.get(i + 1).get_company());                /*设置左边的商品的图片*/                ImageView right_img = item.findViewById(R.id.item_verticalshowShop_rightimg);                /**                 * 启动线程加载图片                 */                Glide.with(getApplicationContext()).load(http_addrs.HTTP_ADDR_IMG_URL +                        showShop_list.get(i + 1).get_img().trim()).diskCacheStrategy                        (DiskCacheStrategy.NONE).skipMemoryCache(false).into(right_img);                /**                 * 右边的点击事件                 */                item.findViewById(R.id.item_verticalshowshop_rightShopbody).setTag(showShop_list                        .get(i + 1).get_title());                item.findViewById(R.id.item_verticalshowshop_rightShopbody).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        String title = (String) v.getTag();                        LazyCatStartActivityWithBundler(ShowshopOffice.class, false,Config.Windows                                        .GET_WINDOW_VALUE_SHOP_MESSAGE, title,                                GET_WINDOW_VALUE_SHOP_ACTION, LocalValues.VALUES_SEARCH                                        .VALUES_TO_SEARCH_SHOPKEYWORD);                    }                });                showBody.addView(item);            }            for (int i = 6; i < 8; i += 2) {                View item = LayoutInflater.from(getApplicationContext()).inflate(R.layout                        .item_verticalshowshop, null);                /*设置左边的商品的标题*/                TextUnt.with(item, R.id.item_verticalshowShop_lefttitle).setText(showShop_list                        .get(i).get_title());                /*设置左边的商品的价格*/                TextUnt.with(item, R.id.item_verticalshowShop_lefttp).setText(showShop_list.get                        (i).get_tp()).setTextColor(getResources().getString(R.color.colorPrice));                /*设置左边的商品的单位*/                TextUnt.with(item, R.id.item_verticalshowShop_leftcompany).setText("/" +                        showShop_list.get(i).get_company());                /*设置左边的商品的图片*/                ImageView left_img = item.findViewById(R.id.item_verticalshowShop_leftimg);                /**                 * 左边的点击事件                 */                item.findViewById(R.id.item_verticalshowshop_leftShopbody).setTag(showShop_list                        .get(i).get_title());                item.findViewById(R.id.item_verticalshowshop_leftShopbody).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        String title = (String) v.getTag();                        LazyCatStartActivityWithBundler(ShowshopOffice.class, false,Config.Windows                                        .GET_WINDOW_VALUE_SHOP_MESSAGE, title,                                GET_WINDOW_VALUE_SHOP_ACTION, LocalValues.VALUES_SEARCH                                        .VALUES_TO_SEARCH_SHOPKEYWORD);                    }                });                /**                 * 启动线程加载图片                 */                Glide.with(getApplicationContext()).load(http_addrs.HTTP_ADDR_IMG_URL +                        showShop_list.get(i).get_img().trim()).diskCacheStrategy                        (DiskCacheStrategy.NONE).skipMemoryCache(false).into(left_img);                /*设置右边的商品的标题*/                TextUnt.with(item, R.id.item_verticalshowShop_righttitle).setText(showShop_list                        .get(i + 1).get_title());                /*设置右边的商品的价格*/                TextUnt.with(item, R.id.item_verticalshowShop_righttp).setText(showShop_list.get                        (i + 1).get_tp()).setTextColor(getResources().getString(R.color                        .colorPrice));                /*设置右边的商品的单位*/                TextUnt.with(item, R.id.item_verticalshowShop_rightcompany).setText("/" +                        showShop_list.get(i + 1).get_company());                /*设置左边的商品的图片*/                ImageView right_img = item.findViewById(R.id.item_verticalshowShop_rightimg);                /**                 * 启动线程加载图片                 */                Glide.with(getApplicationContext()).load(http_addrs.HTTP_ADDR_IMG_URL +                        showShop_list.get(i + 1).get_img().trim()).diskCacheStrategy                        (DiskCacheStrategy.NONE).skipMemoryCache(false).into(right_img);                /**                 * 右边的点击事件                 */                item.findViewById(R.id.item_verticalshowshop_rightShopbody).setTag(showShop_list                        .get(i + 1).get_title());                item.findViewById(R.id.item_verticalshowshop_rightShopbody).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        String title = (String) v.getTag();                        LazyCatStartActivityWithBundler(ShowshopOffice.class, false,Config.Windows                                        .GET_WINDOW_VALUE_SHOP_MESSAGE, title,                                GET_WINDOW_VALUE_SHOP_ACTION, LocalValues.VALUES_SEARCH                                        .VALUES_TO_SEARCH_SHOPKEYWORD);                    }                });                showBody.addView(item);            }            for (int i = 8; i < 10; i += 2) {                View item = LayoutInflater.from(getApplicationContext()).inflate(R.layout                        .item_verticalshowshop, null);                /*设置左边的商品的标题*/                TextUnt.with(item, R.id.item_verticalshowShop_lefttitle).setText(showShop_list                        .get(i).get_title());                /*设置左边的商品的价格*/                TextUnt.with(item, R.id.item_verticalshowShop_lefttp).setText(showShop_list.get                        (i).get_tp()).setTextColor(getResources().getString(R.color.colorPrice));                /*设置左边的商品的单位*/                TextUnt.with(item, R.id.item_verticalshowShop_leftcompany).setText("/" +                        showShop_list.get(i).get_company());                /*设置左边的商品的图片*/                ImageView left_img = item.findViewById(R.id.item_verticalshowShop_leftimg);                /**                 * 左边的点击事件                 */                item.findViewById(R.id.item_verticalshowshop_leftShopbody).setTag(showShop_list                        .get(i).get_title());                item.findViewById(R.id.item_verticalshowshop_leftShopbody).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        String title = (String) v.getTag();                        LazyCatStartActivityWithBundler(ShowshopOffice.class, false,Config.Windows                                        .GET_WINDOW_VALUE_SHOP_MESSAGE, title,                                GET_WINDOW_VALUE_SHOP_ACTION, LocalValues.VALUES_SEARCH                                        .VALUES_TO_SEARCH_SHOPKEYWORD);                    }                });                /**                 * 启动线程加载图片                 */                Glide.with(getApplicationContext()).load(http_addrs.HTTP_ADDR_IMG_URL +                        showShop_list.get(i).get_img().trim()).diskCacheStrategy                        (DiskCacheStrategy.NONE).skipMemoryCache(false).into(left_img);                /*设置右边的商品的标题*/                TextUnt.with(item, R.id.item_verticalshowShop_righttitle).setText(showShop_list                        .get(i + 1).get_title());                /*设置右边的商品的价格*/                TextUnt.with(item, R.id.item_verticalshowShop_righttp).setText(showShop_list.get                        (i + 1).get_tp()).setTextColor(getResources().getString(R.color                        .colorPrice));                /*设置右边的商品的单位*/                TextUnt.with(item, R.id.item_verticalshowShop_rightcompany).setText("/" +                        showShop_list.get(i + 1).get_company());                /*设置左边的商品的图片*/                ImageView right_img = item.findViewById(R.id.item_verticalshowShop_rightimg);                /**                 * 启动线程加载图片                 */                Glide.with(getApplicationContext()).load(http_addrs.HTTP_ADDR_IMG_URL +                        showShop_list.get(i + 1).get_img().trim()).diskCacheStrategy                        (DiskCacheStrategy.NONE).skipMemoryCache(false).into(right_img);                /**                 * 右边的点击事件                 */                item.findViewById(R.id.item_verticalshowshop_rightShopbody).setTag(showShop_list                        .get(i + 1).get_title());                item.findViewById(R.id.item_verticalshowshop_rightShopbody).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        String title = (String) v.getTag();                        LazyCatStartActivityWithBundler(ShowshopOffice.class, false,Config.Windows                                        .GET_WINDOW_VALUE_SHOP_MESSAGE, title,                                GET_WINDOW_VALUE_SHOP_ACTION, LocalValues.VALUES_SEARCH                                        .VALUES_TO_SEARCH_SHOPKEYWORD);                    }                });                showBody.addView(item);            }        } else {            Toast.makeText(getApplicationContext(), "商品数据不符合!", Toast.LENGTH_SHORT).show();        }    }    class SeeOrderPage {        private String title;/*商品的标题*/        private String toPayhow;/*商品的订购数量*/        private String dottenPrice;/*虚线价格*/        private String businessName;/*对接商家*/        private String orderNumber;/*设置下单号*/        private String shopstatus;/*商品的状态*/        private String shopImg;/*商品的图片地址*/        private String surplusTime;/*剩余时间*/        private String su;/*批发起送*/        private String tp;/*起送价格*/        private String company;/*价格对应的单位*/        private String splitUnit;/*箱装最低的单位*/        private String exp;/*生产日期*/        private String pd;/*保质期*/        private String orderTime;/*下单日期*/        private String orderStatus;/*单号的状态*/        private String spec;/*箱规数量*/        private String distance;/*距离*/        private String vipstatus;/*下单的时候的VIP状态*/        private String timeStamp;/*商品的时间戳*/        public String getOrderStatus() {            return orderStatus;        }        public void setOrderStatus(String orderStatus) {            this.orderStatus = orderStatus;        }        public String getToPayhow() {            return toPayhow;        }        public void setToPayhow(String toPayhow) {            this.toPayhow = toPayhow;        }        public String getOrderNumber() {            return orderNumber;        }        public void setOrderNumber(String orderNumber) {            this.orderNumber = orderNumber;        }        public String getVipstatus() {            return vipstatus;        }        public void setVipstatus(String vipstatus) {            this.vipstatus = vipstatus;        }        public String getTimeStamp() {            return timeStamp;        }        public void setTimeStamp(String timeStamp) {            this.timeStamp = timeStamp;        }        public String getSplitUnit() {            return splitUnit;        }        public void setSplitUnit(String splitUnit) {            this.splitUnit = splitUnit;        }        public String getExp() {            return exp;        }        public void setExp(String exp) {            this.exp = exp;        }        public String getPd() {            return pd;        }        public void setPd(String pd) {            this.pd = pd;        }        public String getOrderTime() {            return orderTime;        }        public void setOrderTime(String orderTime) {            this.orderTime = orderTime;        }        public String getSpec() {            return spec;        }        public void setSpec(String spec) {            this.spec = spec;        }        public String getDistance() {            return distance;        }        public void setDistance(String distance) {            this.distance = distance;        }        public String getShopImg() {            return shopImg;        }        public void setShopImg(String shopImg) {            this.shopImg = shopImg;        }        public String getSu() {            return su;        }        public void setSu(String su) {            this.su = su;        }        public String getTp() {            return tp;        }        public void setTp(String tp) {            this.tp = tp;        }        public String getCompany() {            return company;        }        public void setCompany(String company) {            this.company = company;        }        public String getTitle() {            return title;        }        public void setTitle(String title) {            this.title = title;        }        public String getDottenPrice() {            return dottenPrice;        }        public void setDottenPrice(String dottenPrice) {            this.dottenPrice = dottenPrice;        }        public String getBusinessName() {            return businessName;        }        public void setBusinessName(String businessName) {            this.businessName = businessName;        }        public String getShopstatus() {            return shopstatus;        }        public void setShopstatus(String shopstatus) {            this.shopstatus = shopstatus;        }        public String getSurplusTime() {            return surplusTime;        }        public void setSurplusTime(String surplusTime) {            this.surplusTime = surplusTime;        }    }    /**     * 显示商品的参数集合     */    class ShowshopList {        String _title;/*标题*/        String _tp;/*批发价格*/        String _company;/*配送单位*/        String _exp;/*保质期*/        String _pd;/*生产日期*/        String _business;/*对接商家*/        String _businessimg;/*对接商家的图片地址*/        String _img;/*商品的图片地址*/        String _onlyid;/*商品的唯一ID*/        String _like;/*判断用户是否喜欢*/        public String get_like() {            return _like;        }        public void set_like(String _like) {            this._like = _like;        }        public String get_onlyid() {            return _onlyid;        }        public void set_onlyid(String _onlyid) {            this._onlyid = _onlyid;        }        public String get_img() {            return _img;        }        public void set_img(String _img) {            this._img = _img;        }        public String get_title() {            return _title;        }        public void set_title(String _title) {            this._title = _title;        }        public String get_tp() {            return _tp;        }        public void set_tp(String _su) {            this._tp = _su;        }        public String get_company() {            return _company;        }        public void set_company(String _company) {            this._company = _company;        }        public String get_exp() {            return _exp;        }        public void set_exp(String _exp) {            this._exp = _exp;        }        public String get_pd() {            return _pd;        }        public void set_pd(String _pd) {            this._pd = _pd;        }        public String get_business() {            return _business;        }        public void set_business(String _business) {            this._business = _business;        }        public String get_businessimg() {            return _businessimg;        }        public void set_businessimg(String _businessimg) {            this._businessimg = _businessimg;        }    }}