package shlm.lmcs.com.lazycat.LazyShopAct.SystemAct;import android.graphics.Color;import android.os.Bundle;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.BaseAdapter;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import org.xmlpull.v1.XmlPullParser;import java.util.ArrayList;import java.util.List;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyAct.LazyCatAct;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyPage.WAIT_ITME_DIALOGPAGE;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.TextUnt;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.ViewSet;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;/** * 帮助中心 */public class SystemHelpus extends LazyCatAct {    private ListView lv_body;    private HelpUsmsgadapter helpUsmsgadapter;/*展示信息适配器*/    private String MSG = "SystemHelpus.java[+]";    private LocalValues.HTTP_ADDRS http_addrs;    private Msgbody msgbody = null;    private List<Msgbody> _bodylist = null;    @Override    protected void onCreate(Bundle savedInstanceState) {        setStatusBar("#efefef");        setContentView(R.layout.activity_systemhelpus);        lv_body = findViewById(R.id.activity_systemhelpusListView);        http_addrs = new LocalValues.HTTP_ADDRS(getApplicationContext());        /*设置到导航颜色*/        ViewSet.with(SystemHelpus.this, R.id.assembly_act_headBody).setBackColor(-1, "#efefef");        setBackListener(R.id.assembly_act_headBackImg);        init();        super.onCreate(savedInstanceState);    }    /**     * 初始化界面信息     */    private void init() {        /**         * 连接服务器获取数据信息         */        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(false);        xmlInstance.initDom();        xmlInstance.overDom();        Net.doPostXml(http_addrs.HTTP_ADDR_GET_SYSTEMHELPMSG, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                _refreshDialog.dismiss();                Log.e(MSG, "获取帮助信息回传信息:" + data.trim());                XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                    @Override                    public void onFaile() {                    }                    @Override                    public void onStartDocument(String tag) {                        /*判断是否为空 如果不为空就去清空数组的对象*/                        if (_bodylist == null) {                            _bodylist = new ArrayList<>();                        } else {                            _bodylist.clear();                        }                    }                    @Override                    public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                        try {                            if (tag.equals(LocalAction.ACTION_SYSTEMHELP.ACTION_START)) {                                /*开始的节点 就把原始的类给置空*/                                msgbody = null;                                msgbody = new Msgbody();                            }                            /*检测是否是问题*/                            if (tag.equals(LocalAction.ACTION_SYSTEMHELP.ACTION_MSG)) {                                msgbody.set_msg(pullParser.nextText().trim());                            }                            /*检测是否为解释的内容*/                            if (tag.equals(LocalAction.ACTION_SYSTEMHELP.ACTION_CONTEXT)) {                                msgbody.set_context(pullParser.nextText().trim());                            }                        } catch (Exception e) {                            Log.e(MSG, "错误的XML信息:" + e.getMessage());                        }                    }                    @Override                    public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                        if (tag.equals(LocalAction.ACTION_SYSTEMHELP.ACTION_START)) {                            _bodylist.add(msgbody);                            msgbody = null;                        }                    }                    @Override                    public void onEndDocument() {                        helpUsmsgadapter = new HelpUsmsgadapter();                        lv_body.setAdapter(helpUsmsgadapter);                        listener();                    }                });            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                final WaitDialog.RefreshDialog refreshDialog = new WaitDialog.RefreshDialog(SystemHelpus.this);                WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                wait_itme_dialogpage.setImg(R.id.item_wait_img);                wait_itme_dialogpage.setView(R.layout.item_wait);                wait_itme_dialogpage.setTitle(R.id.item_wait_title);                refreshDialog.Init(wait_itme_dialogpage);                refreshDialog.showRefreshDialog("请稍后...", false);                return refreshDialog;            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree());        /*设置导航的标题*/        TextUnt.with(this, R.id.assembly_act_headTitle).setText("帮助中心");        /*创建适配器*/    }    /**     * 处理帮助信息的界面的信息列表的适配器     */    class HelpUsmsgadapter extends BaseAdapter {        @Override        public int getCount() {            return _bodylist.size();        }        @Override        public Object getItem(int position) {            return position;        }        @Override        public long getItemId(int position) {            return position;        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            ValuesId valuesId;            if (convertView != null) {                valuesId = (ValuesId) convertView.getTag();            } else {                valuesId = new ValuesId();                convertView = LayoutInflater.from(getApplicationContext()).inflate(R.layout.item_showhelpusmsg, null,                        false);                valuesId._number = convertView.findViewById(R.id.item_showhelpusmsgNumber);/*数字序号*/                valuesId._msg = convertView.findViewById(R.id.item_showhelpusmsgMsg);/*提问的信息*/                convertView.setTag(valuesId);            }            /*设置问题*/            TextUnt.with(valuesId._msg).setText(_bodylist.get(position).get_msg());            /*设置序号*/            TextUnt.with(valuesId._number).setText(position++ + ".");/*小心POSITION++*/            return convertView;        }    }    class ValuesId {        TextView _number;        TextView _msg;    }    class Msgbody {        String _msg;/*标题*/        String _context;/*解释的内容¬*/        public String get_msg() {            return _msg;        }        public void set_msg(String _msg) {            this._msg = _msg;        }        public String get_context() {            return _context;        }        public void set_context(String _context) {            this._context = _context;        }    }    /**     * 系统的监听事件     */    private void listener() {        /**         * listView的控件点击的事件         */        lv_body.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                ValuesId valuesId = (ValuesId) view.getTag();                Toast.makeText(getApplicationContext(), "点击的问题:" + valuesId._msg.getText().toString(),                        Toast.LENGTH_SHORT).show();            }        });    }}