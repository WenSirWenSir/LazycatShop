package shlm.lmcs.com.lazycat.ClassifySystemGET;import android.content.Context;import android.util.Log;import org.xmlpull.v1.XmlPullParser;import java.util.ArrayList;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyPage.WAIT_ITME_DIALOGPAGE;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;/** * 整理分类 */public class arrange {    private static String MSG = "arrange.java[+]";    /**     * 参数信息     */    private static String ACTION_TITLE = "_title";    /**     * 开始获取分类数据表格     *     * @param _context 上下文     */    public static void _start(final Context _context, final onGet _onGet) {        LocalValues.HTTP_ADDRS http_addrs = new LocalValues.HTTP_ADDRS(_context);        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(true);        xmlInstance.overDom();        Net.doPostXml(http_addrs.HTTP_ADDR_CLASSIFY_SYSTEM_GET, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                _refreshDialog.dismiss();                Log.i(MSG, "获取分类数据表格返回:" + data.trim());                final ArrayList<Pages> _pages = new ArrayList<Pages>();                /*开始解析数据信息*/                XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                    @Override                    public void onFaile() {                    }                    @Override                    public void onStartDocument(String tag) {                        _pages.clear();                    }                    @Override                    public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                        try {                            if (tag.equals(ACTION_TITLE)) {                                Pages _page = new Pages();                                _page._title = pullParser.nextText().trim();                                _pages.add(_page);                            }                        } catch (Exception e) {                            Log.i(MSG, "获取分类数据出错:" + e.getMessage());                        }                    }                    @Override                    public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                    }                    @Override                    public void onEndDocument() {                        _onGet._onOk(true,_pages);                    }                });            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                final WaitDialog.RefreshDialog refreshDialog = new WaitDialog.RefreshDialog                        (_context);                WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                wait_itme_dialogpage.setImg(R.id.item_wait_img);                wait_itme_dialogpage.setView(R.layout.item_wait);                wait_itme_dialogpage.setTitle(R.id.item_wait_title);                refreshDialog.Init(wait_itme_dialogpage);                refreshDialog.showRefreshDialog("请稍后...", false);                return refreshDialog;            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree().trim());    }    public static class Pages {        public String _title;    }    public interface onGet {        void _onOk(Boolean isLogin, ArrayList<Pages> _pages);/*获取数据成功s*/        void _onError();/*获取数据失败*/    }}