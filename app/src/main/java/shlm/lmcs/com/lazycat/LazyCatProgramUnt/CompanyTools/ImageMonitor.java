package shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools;import android.annotation.SuppressLint;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.util.Log;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyPage.LOAD_IMAGEPAGE;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Config;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Tools;/** * 图片管理者 管理图片的下载   图片的保存 图片的其他功能 * <p> * 图片交还给调用者 不能在这个类里进行缓存 */public class ImageMonitor {    private Context _Context;//上下文管理    public ImageMonitor(Context context) {        this._Context = context;    }    /**     * 获取一张图片     *     * @param load_imagepage    构造图片参数类     * @param _ProgramInterface 接口类信息     */    @SuppressLint("StaticFieldLeak")    public void toGetBitmap(final LOAD_IMAGEPAGE load_imagepage, final ProgramInterface            .ImageMonitoron _ProgramInterface) {        load_imagepage.getSaveName();        String dirPath = load_imagepage.getDefaultFile() + "/LocalPhotos/";        if (!new File(dirPath).exists()) {            /*文件夹不存在 创建文件夹*/            new File(dirPath).mkdir();        }        File file = new File(load_imagepage.getDefaultFile() + "/LocalPhotos/", load_imagepage                .getSaveName());        if (file.exists()) {            /*本地存在文件记录*/            Log.i(Config.DEBUG, "ImageMonitor.java[+]本地存在数据,从本地获取的数据信息");            try {                FileInputStream fis = new FileInputStream(file);                _ProgramInterface.onSucess(BitmapFactory.decodeStream(fis), load_imagepage);            } catch (FileNotFoundException e) {                e.printStackTrace();            }        } else {            //开启线程 读取图片            Net.doGetimg(load_imagepage, new ProgramInterface.doGetImg() {                @Override                public void onSucess(Bitmap bitmap) {                    if (bitmap != null) {                        _ProgramInterface.onSucess(bitmap, load_imagepage);                    } else {                        _ProgramInterface.onFaile("ImageMonitor.java[+]Bitmap返回的数据为空");                    }                }                @Override                public void onFain() {                }            });        }    }    /**     * 保存图片到手机上     *     * @param load_imagepage     */    public static void saveLocalBitmap(LOAD_IMAGEPAGE load_imagepage, Bitmap bitmap) {        String dirPath = load_imagepage.getDefaultFile() + "/LocalPhotos/";        if (!new File(dirPath).exists()) {            new File(dirPath).mkdir();/*如果没有缓存就创建缓存目录*/        }        /*判断文件是否存在*/        String filePath = load_imagepage.getDefaultFile() + "/LocalPhotos/" + load_imagepage                .getSaveName();        if (!new File(filePath).exists()) {            /*文件不存在*/            FileOutputStream fos = null;            try {                InputStream is = null;                if (load_imagepage.getSaveName().indexOf("png") != -1) {                    /*保存为PNG的格式*/                    is = Tools.bitmaptoInputStream(bitmap, Bitmap.CompressFormat.PNG);                } else {                    /*保存为JPG的格式*/                    is = Tools.bitmaptoInputStream(bitmap, Bitmap.CompressFormat.JPEG);                }                /*输入输出流不为空*/                if (is != null) {                    fos = new FileOutputStream(new File(filePath));                    byte[] buffer = new byte[1024];                    int len = 0;                    while ((len = is.read(buffer)) != -1) {                        fos.write(buffer, 0, len);                    }                    is.close();                    fos.close();                } else {                    Log.e(Config.DEBUG, "ImageMonitor.java[+]输入输出流为空");                }            } catch (FileNotFoundException e) {                Log.e(Config.DEBUG, "ImageMonitor.java[+]错误信息" + e.getMessage());                e.printStackTrace();            } catch (IOException e) {                e.printStackTrace();            }        }    }}