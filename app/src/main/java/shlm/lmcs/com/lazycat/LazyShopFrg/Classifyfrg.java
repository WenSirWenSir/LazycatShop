package shlm.lmcs.com.lazycat.LazyShopFrg;import android.annotation.SuppressLint;import android.os.Bundle;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import org.xmlpull.v1.XmlPullParser;import java.util.ArrayList;import java.util.List;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyClass.LazyCatFragment;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyPage.WAIT_ITME_DIALOGPAGE;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.RelativeLayoutUnt;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.TextUnt;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Config;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Tools;import shlm.lmcs.com.lazycat.LazyShopAct.ScanQRCodeAct;import shlm.lmcs.com.lazycat.LazyShopAct.SearchAct;import shlm.lmcs.com.lazycat.LazyShopAct.ShowshopOffice;import shlm.lmcs.com.lazycat.LazyShopTools.LocalProgramTools;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.LazyShopView.SystemTextView;import shlm.lmcs.com.lazycat.LazyShopVip.SystemVip;import shlm.lmcs.com.lazycat.R;public class Classifyfrg extends LazyCatFragment {    private String MSG = "Classifyfrg.java[+]";    private ListView classifyfrg_title, classifyfrg_body;    private ArrayList<String> second_title = new ArrayList<String>();    private LinearLayout list_bodysecondlevel_title;/*二级的标题*/    private ArrayList<SearchPage> shop_list = new ArrayList<SearchPage>();    private SearchPage shopvalues = null;    private View item;    private LocalProgramTools.UserToolsInstance userToolsInstance;    private LocalValues.HTTP_ADDRS http_addrs;    /**     * 分类左侧的标题的控件集合     */    private List<View> ar_titlelist = new ArrayList<>();    /*用户是否登录*/    private Boolean is_login;    @SuppressLint({"NewApi", "ResourceType"})    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle            savedInstanceState) {        /*获取地址工具类*/        http_addrs = LocalValues.getHttpaddrs(getContext());        item = inflater.inflate(R.layout.fragment_classify, null);        /*设置标题仓库网络*/        TextUnt.with(item, R.id.fragment_classifyTitle).setText("仓库网络").setFontFile(getContext(),                "canLogo").setTextColor(getResources().getString(R.color.ThemeColor));        /*二级标题*/        list_bodysecondlevel_title = item.findViewById(R.id                .fragmen_classify_listview_body_secondlevelTitle);        /*获取用户类*/        userToolsInstance = LocalProgramTools.getUserToolsInstance();        /*获取分类的标题*/        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(false);        xmlInstance.initDom();        xmlInstance.setXmlTree(LocalAction.ACTION, "0");        xmlInstance.overDom();        Net.doPostXml( http_addrs.HTTP_ADDR_GETCLASSIFY, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                Log.i(MSG, "分类的数据:" + data.trim());                _refreshDialog.dismiss();                if (data.trim().equals(LocalValues.NET_ERROR)) {                } else {                    XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                    xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                        @Override                        public void onFaile() {                        }                        @Override                        public void onStartDocument(String tag) {                            ar_titlelist.clear();                        }                        @Override                        public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                            try {                                if (tag.equals(LocalAction.CLASSIFY_ACTION.ACTION_INTO)) {                                    View item = LayoutInflater.from(getContext()).inflate(R                                            .layout.item_classifyname, null);                                    TextUnt.with(item, R.id.item_classifynameTitle).setText                                            (pullParser.nextText().trim());                                    ar_titlelist.add(item);                                }                            } catch (Exception e) {                                Log.e(MSG, "解析标题的XML错误:" + e.getMessage());                            }                        }                        @Override                        public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                        }                        @Override                        public void onEndDocument() {                            initMainpage();                        }                    });                }            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                WaitDialog.RefreshDialog refreshDialog = new WaitDialog.RefreshDialog(getActivity                        ());                WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                wait_itme_dialogpage.setImg(R.id.item_wait_img);                wait_itme_dialogpage.setView(R.layout.item_wait);                wait_itme_dialogpage.setTitle(R.id.item_wait_title);                refreshDialog.Init(wait_itme_dialogpage);                refreshDialog.showRefreshDialog("加载中...", false);                wait_itme_dialogpage.setCanClose(false);                return refreshDialog;            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree());        /*统一设置监听事件*/        listener(item);        return item;    }    /**     * 监听事件     */    private void listener(View _item) {        /**         * 启动二维码扫描         */        _item.findViewById(R.id.fragment_main_btnScan).                setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        //加载扫一扫                        LazyCatFragmetStartAct(ScanQRCodeAct.class);                    }                });        /**         * 搜索界面         */        _item.findViewById(R.id.fragment_main_btnSearchIco).setOnClickListener(new View                .OnClickListener() {            @Override            public void onClick(View v) {                LazyCatFragmetStartAct(SearchAct.class);            }        });    }    /**     * 整理界面     */    @SuppressLint("ResourceType")    private void initMainpage() {        /**         * 设置左边的分类的标题         */        classifyfrg_title = item.findViewById(R.id.fragmen_classify_listview_title);/*显示分类标题的*/        final titleAdapter _titlTitleAdapter = new titleAdapter();        /**         * 设置获取第一个的分类的标题的数据         */        toGetSecondTitle(TextUnt.with(ar_titlelist.get(0), R.id.item_classifynameTitle)                .getTexttoString());        TextUnt.with(ar_titlelist.get(0), R.id.item_classifynameTitle).setTextColor(getResources                ().getString(R.color.ThemeColor));        /**         * 分类的标题的控件的点击事件         */        classifyfrg_title.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @SuppressLint({"NewApi", "ResourceType"})            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                for (int i = 0; i < ar_titlelist.size(); i++) {                    TextUnt.with(ar_titlelist.get(i), R.id.item_classifynameTitle).setTextColor                            (getResources().getString(R.color.colorText));                }                /**                 * 设置点击的字体的颜色                 */                TextUnt.with(ar_titlelist.get(position), R.id.item_classifynameTitle)                        .setTextColor(getResources().getString(R.color.ThemeColor));                /**                 * 去获取二级的标题                 */                toGetSecondTitle(TextUnt.with(ar_titlelist.get(position), R.id                        .item_classifynameTitle).getTexttoString());            }        });        classifyfrg_title.setAdapter(_titlTitleAdapter);        classifyfrg_body = item.findViewById(R.id.fragmen_classify_listview_body);/*显示内容*/    }    private void handlerXml(String _xml) {        XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(_xml);        xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {            @Override            public void onFaile() {            }            @Override            public void onStartDocument(String tag) {                second_title.clear();/*先清空以前的数据*/            }            @Override            public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                try {                    if (tag.equals(LocalAction.CLASSIFY_ACTION.ACTION_CLASSIFY_VALUES)) {                        second_title.add(pullParser.nextText().trim());                    }                } catch (Exception e) {                    Log.e(MSG, "解析XML错误+" + e.getMessage());                }            }            @Override            public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {            }            @Override            public void onEndDocument() {                /*已经解析完成*/                /*清空Layout的所有的Item*/                Log.i(MSG, "解析完成" + second_title.size());                list_bodysecondlevel_title.removeAllViews();                for (int i = 0; i < second_title.size(); i++) {                    SystemTextView title = new SystemTextView(list_bodysecondlevel_title                            .getContext());                    ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(ViewGroup                            .LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);                    title.setLayoutParams(params);                    title.setPadding(13, 23, 13, 23);                    title.setGravity(Gravity.CENTER);                    title.setText(second_title.get(i));                    title.setTextSize(12);                    if (i == 0) {                        TextUnt.with(title).setTextColor("#08c299");                    } else {                        TextUnt.with(title).setTextColor("#020433");                    }                    title.setOnClickListener(new View.OnClickListener() {                        @SuppressLint("NewApi")                        @Override                        public void onClick(View v) {                            for (int i = 0; i < list_bodysecondlevel_title.getChildCount(); i++) {                                TextView tv = (TextView) list_bodysecondlevel_title.getChildAt(i);                                TextUnt.with(tv).setTextColor("#020433");                            }                            TextView tv = (TextView) v;                            TextUnt.with(tv).setTextColor("#08c299");                            toGetvalues(tv.getText().toString().trim());                        }                    });                    list_bodysecondlevel_title.addView(title);                }                /*初始化第一个Value的商品*/                toGetvalues(second_title.get(0));            }        });    }    /**     * 获取参数对应的商品列表     */    @SuppressLint("NewApi")    private void toGetvalues(String _values) {        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(true);        xmlInstance.setXmlTree(LocalAction.ACTION, LocalValues.VALUES_CLASSIFY.VALUES_GETSHOPS);        xmlInstance.setXmlTree(LocalAction.CLASSIFY_ACTION.ACTION_CLASSIFY_VALUES, _values);        xmlInstance.overDom();        Net.doPostXml( http_addrs.HTTP_ADDR_GETCLASSIFY, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                Log.i(MSG, "获取分类下的参数的值:" + data.trim());                _refreshDialog.dismiss();                if (data.equals(LocalValues.NET_ERROR)) {                    //没有数据信息                    RelativeLayoutUnt.with(item, R.id.fragment_classify_nodataBody).setVisibility                            (true);                    classifyfrg_body.setVisibility(View.GONE);                } else {                    //解析数据                    XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                    xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                        @Override                        public void onFaile() {                        }                        @Override                        public void onStartDocument(String tag) {                            shop_list.clear();                            shopvalues = null;                        }                        @Override                        public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                            try {                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_START)) {                                    /*解析到一个开始的头部*/                                    shopvalues = new SearchPage();                                }                                /*标题*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_TITLE)) {                                    shopvalues.set_title(pullParser.nextText().trim());                                }                                /*箱规*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_SPEC)) {                                    shopvalues.set_spec(pullParser.nextText().trim());                                }                                /*价格对应的单位*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_COMPANY)) {                                    shopvalues.set_company(pullParser.nextText().trim());                                }                                /*商品的拆分单位*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_SPLITUNIT)) {                                    shopvalues.set_splitunit(pullParser.nextText().trim());                                }                                /*商品的生产日期*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_EXP)) {                                    shopvalues.set_exp(pullParser.nextText().trim());                                }                                /*商品的批发价格*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_TP)) {                                    shopvalues.set_tp(pullParser.nextText().trim());                                }                                /*商品的零售价格*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_RETAIL)) {                                    shopvalues.set_retail(pullParser.nextText().trim());                                }                                /*商品的加盟价格*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_VIP_TP)) {                                    shopvalues.set_viptp(pullParser.nextText().trim());                                }                                /*商品的虚线价格*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_DLP)) {                                    shopvalues.set_dottenlineprice(pullParser.nextText().trim());                                }                                /*商品的图片地址*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_IMG)) {                                    shopvalues.set_img(pullParser.nextText().trim());                                }                                /*商品的唯一地址*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_ONLYID)) {                                    shopvalues.set_onlyid(pullParser.nextText().trim());                                }                                /*设置商品的库存*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_STOCKNUMBER)) {                                    shopvalues.set_stocknumber(pullParser.nextText().trim());                                }                            } catch (Exception e) {                            }                        }                        @Override                        public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_START)) {                                shop_list.add(shopvalues);                                shopvalues = null;                            }                        }                        @Override                        public void onEndDocument() {                            Log.i(MSG, "数组整理完毕,一共" + shop_list.size());                            if (shop_list.size() <= 0) {                                //没有数据信息                                RelativeLayoutUnt.with(item, R.id.fragment_classify_nodataBody)                                        .setVisibility(true);                                classifyfrg_body.setVisibility(View.GONE);                            } else {                                initValues();                            }                        }                    });                }            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                WaitDialog.RefreshDialog refreshDialog = new WaitDialog.RefreshDialog(getActivity                        ());                WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                wait_itme_dialogpage.setImg(R.id.item_wait_img);                wait_itme_dialogpage.setView(R.layout.item_wait);                wait_itme_dialogpage.setTitle(R.id.item_wait_title);                refreshDialog.Init(wait_itme_dialogpage);                refreshDialog.showRefreshDialog("加载中...", false);                wait_itme_dialogpage.setCanClose(false);                return refreshDialog;            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree().trim());    }    /**     * 整理参数值     */    private void initValues() {        RelativeLayoutUnt.with(item, R.id.fragment_classify_nodataBody).setVisibility(false);        classifyfrg_body.setVisibility(View.VISIBLE);        valuesAdapter valuesAdapter = new valuesAdapter();        ListView valuesList = item.findViewById(R.id.fragmen_classify_listview_body);        valuesList.setAdapter(valuesAdapter);        /*顺便设置监听事件*/        valuesList.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @SuppressLint("NewApi")            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                if (shop_list != null) {                    /*判断库存*/                    if (shop_list.get(position).get_stocknumber().equals("") || shop_list.get                            (position).get_stocknumber().equals("0")) {                        Toast.makeText(getContext(), "商品无货源,无法下单哦!", Toast.LENGTH_SHORT).show();                    } else {                        LazyCatFragmentStartActivityWithBundler(ShowshopOffice.class, Config                                .Windows.GET_WINDOW_VALUE_SHOP_MESSAGE, shop_list.get(position)                                .get_title().trim(), Config.Windows.GET_WINDOW_VALUE_SHOP_ACTION,                                LocalValues.VALUES_SEARCH.VALUES_TO_SEARCH_SHOPKEYWORD);                    }                }            }        });    }    @SuppressLint("NewApi")    class titleAdapter extends BaseAdapter {        @Override        public int getCount() {            return ar_titlelist.size();        }        @Override        public Object getItem(int position) {            return null;        }        @Override        public long getItemId(int position) {            return 0;        }        @SuppressLint("WrongConstant")        @Override        public View getView(int position, View convertView, ViewGroup parent) {            /**             * =======================             * 设置数据信息             */            return ar_titlelist.get(position);        }    }    /**     * 获取二级标题     */    @SuppressLint("NewApi")    public void toGetSecondTitle(String _classname) {        Log.i(MSG, "toGetSecondTitle启动");        /**         * 每次启动该项目 先检查用户是否登录         */        SystemVip systemVip = new SystemVip(getContext());        systemVip.Start(new SystemVip.OnVipcheck() {            @Override            public void onCheckdone(int _vip) {                if (_vip == SystemVip.USER_NO_LOGIN) {                    is_login = false;                } else {                    is_login = true;                }            }        });        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(false);        xmlInstance.initDom();        xmlInstance.setXmlTree(LocalAction.ACTION, LocalValues.VALUES_CLASSIFY.VALUES_GETVALUES);        xmlInstance.setXmlTree(LocalAction.CLASSIFY_ACTION.ACTION_CLASSIFY_NAME, _classname);        xmlInstance.overDom();        Net.doPostXml( http_addrs.HTTP_ADDR_GETCLASSIFY, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                Log.i(MSG, "分类下的参数为:" + data.trim());                if (data.trim().equals(LocalValues.NET_ERROR)) {                } else {                    handlerXml(data.trim());                    _refreshDialog.dismiss();                }            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                WaitDialog.RefreshDialog refreshDialog = new WaitDialog.RefreshDialog(getActivity                        ());                WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                wait_itme_dialogpage.setImg(R.id.item_wait_img);                wait_itme_dialogpage.setView(R.layout.item_wait);                wait_itme_dialogpage.setTitle(R.id.item_wait_title);                refreshDialog.Init(wait_itme_dialogpage);                refreshDialog.showRefreshDialog("加载中...", false);                wait_itme_dialogpage.setCanClose(false);                return refreshDialog;            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree().trim());    }    /**     * 展示商品的adapter     */    class valuesAdapter extends BaseAdapter {        @Override        public int getCount() {            return shop_list.size();        }        @Override        public Object getItem(int position) {            return position;        }        @Override        public long getItemId(int position) {            return position;        }        @SuppressLint({"NewApi", "ResourceType"})        @Override        public View getView(int position, View convertView, ViewGroup parent) {            final valuesId valuesId;            if (convertView != null) {                valuesId = (valuesAdapter.valuesId) convertView.getTag();            } else {                convertView = LayoutInflater.from(getContext()).inflate(R.layout                        .item_classifyshoplist, null);                valuesId = new valuesId();                valuesId._Body = convertView.findViewById(R.id.item_classifyshoplistBody);                valuesId._title = convertView.findViewById(R.id.item_classifyshoplistTitle);                valuesId._tp = convertView.findViewById(R.id.item_classifyshoplistTp);                valuesId._exp = convertView.findViewById(R.id.item_classifyshoplistExp);                valuesId._spec = convertView.findViewById(R.id.item_classifyshoplistSpec);                valuesId._tpUnit = convertView.findViewById(R.id.item_classifyshoplisttpUnit);                valuesId._integral = convertView.findViewById(R.id.item_classifyshoplistIntegral);                valuesId._img = convertView.findViewById(R.id.item_classifyshoplistImg);                valuesId._nostock = convertView.findViewById(R.id.item_classifyshoplistNostock);                /**                 *===========                 * 设置边框样式                 */                valuesId._Body.setBackground(Tools.CreateDrawable(1, "#ffffff", "#ffffff", 10));                convertView.setTag(valuesId);                valuesId._integral.setBackground(Tools.CreateDrawable(1, getResources().getString                        (R.color.colorVip), getResources().getString(R.color.colorVip), 10));            }            /**             *===================             *  整理数据             */            /*判断是否登录*/            if (is_login) {                /*登录了 设置价格为显示*/                TextUnt.with(valuesId._tp).setText(shop_list.get(position).get_tp());                TextUnt.with(valuesId._tpUnit).setText(shop_list.get(position).get_company());                if (shop_list.get(position).get_viptp().equals("") || shop_list.get(position)                        .get_viptp().equals("0")) {                    /*没有设置加盟价格*/                    valuesId._integral.setText("该商品无积分");                } else {                    Float integral = (Float.parseFloat(shop_list.get(position).get_tp()) * 10 -                            Float.parseFloat(shop_list.get(position).get_viptp()) * 10);                    TextUnt.with(valuesId._integral).setText("积分:" + String.valueOf(integral));                }            } else {                /*没有登录 设置价格为不显示*/                TextUnt.with(valuesId._tp).setText("*.**");                TextUnt.with(valuesId._tpUnit).setText(shop_list.get(position).get_company());            }            /**             * 整理无关登录数据             */            /*标题*/            TextUnt.with(valuesId._title).setText(shop_list.get(position).get_title());            /*箱规*/            TextUnt.with(valuesId._spec).setText("箱规:" + shop_list.get(position).get_spec() +                    shop_list.get(position).get_splitunit());            /*设置日期*/            TextUnt.with(valuesId._exp).setText("生产日期:" + shop_list.get(position).get_exp());            /*判断是否存在货源*/            if (shop_list.get(position).get_stocknumber().equals("") || shop_list.get(position)                    .get_stocknumber().equals("0")) {                valuesId._nostock.setVisibility(View.VISIBLE);            } else {                valuesId._nostock.setVisibility(View.GONE);            }            /*加载图片*/            Glide.with(getContext()).load(http_addrs.HTTP_ADDR_IMG_URL + shop_list.get(position)                    .get_img()).diskCacheStrategy(DiskCacheStrategy.SOURCE).skipMemoryCache                    (false).into(valuesId._img);            return convertView;        }        class valuesId {            /*控件样式*/            /**             *             */            LinearLayout _Body;            /*标题*/ TextView _title;            TextView _tp;/*价格*/            TextView _exp;/*生产日期*/            TextView _tpUnit;/*价格的单位*/            TextView _spec;/*箱规*/            TextView _integral;/*积分*/            /**             * 图片             */            ImageView _img;/*图片*/            ImageView _nostock;/*没有库存的图片*/        }    }    class SearchPage {        String _title;/*标题*/        String _spec;/*箱规*/        String _company;/*价格对应的单位*/        String _splitunit;/*拆分单位*/        String _exp;/*生产日期*/        String _tp;/*批发价格*/        String _viptp;/*VIP的加盟价格*/        String _dottenlineprice;/*虚线的价格*/        String _img;/*图片的地址*/        String _onlyid;/*商品的唯一ID*/        String _stocknumber;/*商品的库存*/        String _retail;/*零售建议价格*/        public String get_title() {            return _title;        }        public void set_title(String _title) {            this._title = _title;        }        public String get_spec() {            return _spec;        }        public void set_spec(String _spec) {            this._spec = _spec;        }        public String get_company() {            return _company;        }        public void set_company(String _company) {            this._company = _company;        }        public String get_splitunit() {            return _splitunit;        }        public void set_splitunit(String _splitunit) {            this._splitunit = _splitunit;        }        public String get_exp() {            return _exp;        }        public void set_exp(String _exp) {            this._exp = _exp;        }        public String get_tp() {            return _tp;        }        public void set_tp(String _tp) {            this._tp = _tp;        }        public String get_viptp() {            return _viptp;        }        public void set_viptp(String _viptp) {            this._viptp = _viptp;        }        public String get_dottenlineprice() {            return _dottenlineprice;        }        public void set_dottenlineprice(String _dottenlineprice) {            this._dottenlineprice = _dottenlineprice;        }        public String get_img() {            return _img;        }        public void set_img(String _img) {            this._img = _img;        }        public String get_onlyid() {            return _onlyid;        }        public void set_onlyid(String _onlyid) {            this._onlyid = _onlyid;        }        public String get_stocknumber() {            return _stocknumber;        }        public void set_stocknumber(String _stocknumber) {            this._stocknumber = _stocknumber;        }        public String get_retail() {            return _retail;        }        public void set_retail(String _retail) {            this._retail = _retail;        }    }    /**     * 导航的标题     */    class ClassifyName {        TextView _title;    }}