package shlm.lmcs.com.lazycat.LazyShopFrg;import android.annotation.SuppressLint;import android.graphics.Color;import android.os.Bundle;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.BaseAdapter;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import org.xmlpull.v1.XmlPullParser;import java.util.ArrayList;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyClass.LazyCatFragment;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyPage.WAIT_ITME_DIALOGPAGE;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.TextUnt;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyShopPage.LocalShoppage;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;public class Classifyfrg extends LazyCatFragment {    private String MSG = "Classifyfrg.java[+]";    private ListView classifyfrg_title, classifyfrg_body;    private ArrayList<String> ar_titlelist = new ArrayList<String>();    private TextView classify_title;    private ArrayList<String> second_title = new ArrayList<String>();    private LinearLayout list_bodysecondlevel_title;/*二级的标题*/    private ArrayList<LocalShoppage> shop_list = new ArrayList<LocalShoppage>();    private LocalShoppage shopvalues = null;    private View item;    @SuppressLint("NewApi")    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle            savedInstanceState) {        item = inflater.inflate(R.layout.fragment_classify, null);        /*显示的类型的标题*/        classify_title = item.findViewById(R.id.fragmen_classify_title);        /*二级标题*/        list_bodysecondlevel_title = item.findViewById(R.id                .fragmen_classify_listview_body_secondlevelTitle);        /*获取分类的标题*/        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder();        xmlInstance.initDom();        xmlInstance.setXmlTree(LocalAction.ACTION, "0");        xmlInstance.overDom();        Net.doPostXml(getContext(), LocalValues.HTTP_ADDRS.HTTP_ADDR_GETCLASSIFY, new                ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                Log.i(MSG, "分类的数据:" + data.trim());                _refreshDialog.dismiss();                if (data.trim().equals(LocalValues.NET_ERROR)) {                } else {                    XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                    xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                        @Override                        public void onFaile() {                        }                        @Override                        public void onStartDocument(String tag) {                            ar_titlelist.clear();                        }                        @Override                        public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                            try {                                if (tag.equals(LocalAction.CLASSIFY_ACTION.ACTION_INTO)) {                                    ar_titlelist.add(pullParser.nextText().trim());                                }                            } catch (Exception e) {                                Log.e(MSG, "解析标题的XML错误:" + e.getMessage());                            }                        }                        @Override                        public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                        }                        @Override                        public void onEndDocument() {                            initMainpage();                        }                    });                }            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                WaitDialog.RefreshDialog refreshDialog = new WaitDialog.RefreshDialog(getActivity                        ());                WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                wait_itme_dialogpage.setImg(R.id.item_wait_img);                wait_itme_dialogpage.setView(R.layout.item_wait);                wait_itme_dialogpage.setTitle(R.id.item_wait_title);                refreshDialog.Init(wait_itme_dialogpage);                refreshDialog.showRefreshDialog("加载中...", false);                wait_itme_dialogpage.setCanClose(false);                return refreshDialog;            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree());        /*设置第一个标题的窗口的标题*/        return item;    }    /**     * 整理界面     */    private void initMainpage() {        TextUnt.with(classify_title).setText(ar_titlelist.get(0).trim());        toGetSecondTitle(ar_titlelist.get(0).trim());        /*找到控件*/        classifyfrg_title = item.findViewById(R.id.fragmen_classify_listview_title);/*显示分类标题的*/        final titleAdapter _titlTitleAdapter = new titleAdapter(ar_titlelist);        classifyfrg_title.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @SuppressLint("NewApi")            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                TitleView_adapter titleView_adapter = (TitleView_adapter) view.getTag();                _titlTitleAdapter.onClickItem(position);                if (titleView_adapter != null) {                    /*数据不为空 就去更新标题*/                    TextUnt.with(classify_title).setText(titleView_adapter.title);                    /*去访问互联网 获取数据*/                    toGetSecondTitle(titleView_adapter.title);                } else {                    Toast.makeText(getContext(), "titleView_adapter为空", Toast.LENGTH_SHORT).show();                }            }        });        classifyfrg_title.setAdapter(_titlTitleAdapter);        classifyfrg_body = item.findViewById(R.id.fragmen_classify_listview_body);/*显示内容*/    }    private void handlerXml(String _xml) {        XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(_xml);        xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {            @Override            public void onFaile() {            }            @Override            public void onStartDocument(String tag) {                second_title.clear();/*先清空以前的数据*/            }            @Override            public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                try {                    if (tag.equals(LocalAction.CLASSIFY_ACTION.ACTION_CLASSIFY_VALUES)) {                        second_title.add(pullParser.nextText().trim());                    }                } catch (Exception e) {                    Log.e(MSG, "解析XML错误+" + e.getMessage());                }            }            @Override            public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {            }            @Override            public void onEndDocument() {                /*已经解析完成*/                /*清空Layout的所有的Item*/                Log.i(MSG, "解析完成" + second_title.size());                list_bodysecondlevel_title.removeAllViews();                for (int i = 0; i < second_title.size(); i++) {                    TextView title = new TextView(list_bodysecondlevel_title.getContext());                    ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(ViewGroup                            .LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);                    title.setLayoutParams(params);                    title.setPadding(13, 23, 13, 23);                    title.setGravity(Gravity.CENTER);                    title.setText(second_title.get(i));                    title.setTextSize(15);                    if (i == 0) {                        TextUnt.with(title).setTextColor("#08c299");                    } else {                        TextUnt.with(title).setTextColor("#020433");                    }                    title.setOnClickListener(new View.OnClickListener() {                        @SuppressLint("NewApi")                        @Override                        public void onClick(View v) {                            for (int i = 0; i < list_bodysecondlevel_title.getChildCount(); i++) {                                TextView tv = (TextView) list_bodysecondlevel_title.getChildAt(i);                                TextUnt.with(tv).setTextColor("#020433");                            }                            TextView tv = (TextView) v;                            Toast.makeText(getContext(), tv.getText().toString().trim(), Toast                                    .LENGTH_LONG).show();                            TextUnt.with(tv).setTextColor("#08c299");                            XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder();                            xmlInstance.initDom();                            xmlInstance.setXmlTree(LocalAction.ACTION, LocalValues                                    .VALUES_CLASSIFY.VALUES_GETSHOPS);                            xmlInstance.setXmlTree(LocalAction.CLASSIFY_ACTION                                    .ACTION_CLASSIFY_VALUES, tv.getText().toString().trim());                            xmlInstance.overDom();                            Net.doPostXml(getContext(), LocalValues.HTTP_ADDRS                                    .HTTP_ADDR_GETCLASSIFY, new ProgramInterface() {                                @Override                                public void onSucess(String data, int code, WaitDialog                                        .RefreshDialog _refreshDialog) {                                    if (data.equals(LocalValues.NET_ERROR)) {                                        Toast.makeText(getContext(), "该分类下没有商品数据", Toast                                                .LENGTH_SHORT).show();                                    } else {                                        //解析数据                                        XmlanalysisFactory xmlanalysisFactory = new                                                XmlanalysisFactory(data.trim());                                        xmlanalysisFactory.Startanalysis(new XmlanalysisFactory                                                .XmlanalysisInterface() {                                            @Override                                            public void onFaile() {                                            }                                            @Override                                            public void onStartDocument(String tag) {                                                shop_list.clear();                                                shopvalues = null;                                            }                                            @Override                                            public void onStartTag(String tag, XmlPullParser                                                    pullParser, Integer id) {                                                try {                                                    /*商品标题*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_TITLE)) {                                                        shopvalues.setTitle(pullParser.nextText()                                                                .trim());                                                    }                                                    /*商品条码*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_BARCODE)) {                                                        shopvalues.setBarcode(pullParser.nextText                                                                ().trim());                                                    }                                                    /*商品归属*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_ASCRIPTION)) {                                                        shopvalues.setAscription(pullParser                                                                .nextText().trim());                                                    }                                                    /*商品的品牌*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_BRAND)) {                                                        shopvalues.setBrand(pullParser.nextText()                                                                .trim());                                                    }                                                    /*商品的零售价格*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_RETAIL)) {                                                        shopvalues.setRetail(pullParser.nextText                                                                ().trim());                                                    }                                                    /*商品单位*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_COMPANY)) {                                                        shopvalues.setCompany(pullParser.nextText                                                                ().trim());                                                    }                                                    /*商品生产日期*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_EXP)) {                                                        shopvalues.setExp(pullParser.nextText()                                                                .trim());                                                    }                                                    /*商品的归属*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_GRADE)) {                                                        shopvalues.setGrade(pullParser.nextText()                                                                .trim());                                                    }                                                    /*商品的产地*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_INFROM)) {                                                        shopvalues.setInfrom(pullParser.nextText                                                                ().trim());                                                    }                                                    /*商品唯一标识 */                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_ONLYID)) {                                                        shopvalues.setOnlyid(pullParser.nextText                                                                ().trim());                                                    }                                                    /*商品的保质期*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_PD)) {                                                        shopvalues.setPd(pullParser.nextText()                                                                .trim());                                                    }                                                    /*商品的终端建议售价*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_PRICE)) {                                                        shopvalues.setPrice(pullParser.nextText()                                                                .trim());                                                    }                                                    /*商品的规格*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_SPEC)) {                                                        shopvalues.setSpec(pullParser.nextText()                                                                .trim());                                                    }                                                    /*商品的状态*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_STATIC)) {                                                        shopvalues.set_static(pullParser.nextText                                                                ().trim());                                                    }                                                    /*商品的起订数量*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_SU)) {                                                        shopvalues.setSu(pullParser.nextText()                                                                .trim());                                                    }                                                    /*商品的批发价格*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_TP)) {                                                        shopvalues.setTp(pullParser.nextText()                                                                .trim());                                                    }                                                    /*商品的净重*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_WEIGHT)) {                                                        shopvalues.setWeight(pullParser.nextText                                                                ().trim());                                                    }                                                    /*商品的虚线的价格*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_DLP)) {                                                        shopvalues.setDlp(pullParser.nextText()                                                                .trim());                                                    }                                                    /*商品的图片地址*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_IMG)) {                                                        shopvalues.setImg(pullParser.nextText()                                                                .trim());                                                    }                                                    /*商品的最低的组合单位*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_SPLITUNIT)) {                                                        shopvalues.setSplitUnit(pullParser                                                                .nextText().trim());                                                    }                                                    /*商品的对接商家*/                                                    if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                            .ACTION_SHOPVALUES_BUSINSS)) {                                                        shopvalues.setBusiness(pullParser                                                                .nextText().trim());                                                    }                                                } catch (Exception e) {                                                }                                            }                                            @Override                                            public void onEndTag(String tag, XmlPullParser                                                    pullParser, Integer id) {                                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                                        .ACTION_SHOPVALUES_START)) {                                                    shop_list.add(shopvalues);                                                    shopvalues = null;                                                }                                            }                                            @Override                                            public void onEndDocument() {                                                Log.i(MSG, "数组整理完毕,一共" + shop_list.size());                                            }                                        });                                    }                                }                                @Override                                public WaitDialog.RefreshDialog onStartLoad() {                                    WaitDialog.RefreshDialog refreshDialog = new WaitDialog                                            .RefreshDialog(getActivity());                                    WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new                                            WAIT_ITME_DIALOGPAGE();                                    wait_itme_dialogpage.setImg(R.id.item_wait_img);                                    wait_itme_dialogpage.setView(R.layout.item_wait);                                    wait_itme_dialogpage.setTitle(R.id.item_wait_title);                                    refreshDialog.Init(wait_itme_dialogpage);                                    refreshDialog.showRefreshDialog("加载中...", false);                                    wait_itme_dialogpage.setCanClose(false);                                    return refreshDialog;                                }                                @Override                                public void onFaile(String data, int code) {                                }                            }, xmlInstance.getXmlTree().trim());                        }                    });                    list_bodysecondlevel_title.addView(title);                }            }        });    }    @SuppressLint("NewApi")    class titleAdapter extends BaseAdapter {        private ArrayList<String> title_list = new ArrayList<String>();        private int _position;        public void onClickItem(int position) {            this._position = position;            notifyDataSetChanged();        }        public titleAdapter(ArrayList<String> _title_list) {            this.title_list.clear();            this.title_list = _title_list;        }        @Override        public int getCount() {            return this.title_list.size();        }        @Override        public Object getItem(int position) {            return null;        }        @Override        public long getItemId(int position) {            return 0;        }        @SuppressLint("WrongConstant")        @Override        public View getView(int position, View convertView, ViewGroup parent) {            /**             * 使用自定义的Item来支撑布局             */            LinearLayout body = new LinearLayout(getContext());            ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(ViewGroup.LayoutParams                    .MATCH_PARENT, 120);            body.setGravity(Gravity.CENTER);            body.setLayoutParams(params);            body.setOrientation(0);//*设置横向布局*//*            TextView title = new TextView(getContext());            title.setPadding(13, 23, 13, 23);            TitleView_adapter titleView_adapter = new TitleView_adapter();            titleView_adapter.title = this.title_list.get(position).trim();            if (_position == position) {                TextUnt.with(title).setTextColor("#08c299").setTextSize(15).setBackColor                        ("#fefefe").setBoldText(true);                View line = new View(getContext());                LinearLayout.LayoutParams line_params = new LinearLayout.LayoutParams(8, 40);                line_params.setMargins(10, 20, 10, 20);                line.setLayoutParams(line_params);                line.setBackgroundColor(Color.parseColor("#08c299"));                body.addView(line);                /*要添加一个线条*/            } else {                TextUnt.with(title).setTextColor("#020433").setTextSize(15).setBackColor                        ("#ffffff").setBoldText(true);            }            ViewGroup.LayoutParams title_params = new ViewGroup.LayoutParams(ViewGroup                    .LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);            title.setLayoutParams(title_params);            title.setGravity(Gravity.CENTER);            title.setText(this.title_list.get(position));            body.addView(title);            body.setTag(titleView_adapter);            return body;        }        class Viewpage {            View lines;/*线条*/            TextView title;/*标题*/        }    }    /**     * 获取二级标题     */    @SuppressLint("NewApi")    public void toGetSecondTitle(String _classname) {        Log.i(MSG, "toGetSecondTitle启动");        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder();        xmlInstance.initDom();        xmlInstance.setXmlTree(LocalAction.ACTION, LocalValues.VALUES_CLASSIFY.VALUES_GETVALUES);        xmlInstance.setXmlTree(LocalAction.CLASSIFY_ACTION.ACTION_CLASSIFY_NAME, _classname);        xmlInstance.overDom();        Net.doPostXml(getContext(), LocalValues.HTTP_ADDRS.HTTP_ADDR_GETCLASSIFY, new                ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                Log.i(MSG, "分类下的参数为:" + data.trim());                if (data.trim().equals(LocalValues.NET_ERROR)) {                    Toast.makeText(getContext(), "没有获取到分类信息", Toast.LENGTH_SHORT).show();                } else {                    handlerXml(data.trim());                    _refreshDialog.dismiss();                }            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                WaitDialog.RefreshDialog refreshDialog = new WaitDialog.RefreshDialog(getActivity                        ());                WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                wait_itme_dialogpage.setImg(R.id.item_wait_img);                wait_itme_dialogpage.setView(R.layout.item_wait);                wait_itme_dialogpage.setTitle(R.id.item_wait_title);                refreshDialog.Init(wait_itme_dialogpage);                refreshDialog.showRefreshDialog("加载中...", false);                wait_itme_dialogpage.setCanClose(false);                return refreshDialog;            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree().trim());    }    class TitleView_adapter {        String title;    }}