package shlm.lmcs.com.lazycat.SuperSystemOS.PullAdapter;import android.content.Context;import android.util.Log;import org.jetbrains.annotations.NotNull;import org.xmlpull.v1.XmlPullParser;import java.util.ArrayList;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Config;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Tools;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;/** * 拉取打印订单的适配器 */public class PullPrintorders {    private static PrintOrders printOrders;    private static ArrayList<PrintOrders> ar_list = new ArrayList<PrintOrders>();    private static String MSG = "PullPrintorders.java[+]";    private static String _RETURNCODE;    /**     * 开始拉取所有的打印订单     *     * @param _context     * @param pullPrintordersListener     */    public static void _pull(final Context _context, @NotNull final PullPrintordersListener pullPrintordersListener) {        LocalValues.HTTP_ADDRS http_addrs = new LocalValues.HTTP_ADDRS(_context);        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getJavaXmlinstanceBuilder(true);        xmlInstance.overJavaDom();        Net.doPostXml(http_addrs.HTTP_ADDR_SUPER_PULLPRINTORDERS, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                _refreshDialog.dismiss();                Log.i(MSG, "拉取所有的打印订单的信息为:" + data.trim());                if ("".equals(_refreshDialog)) {                    pullPrintordersListener._onError();                } else {                    XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data);                    xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                        @Override                        public void onFaile() {                        }                        @Override                        public void onStartDocument(String tag) {                            ar_list.clear();                        }                        @Override                        public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                            try {                                /*获取访问状态*/                                if (tag.equals(LocalAction.ACTION_RETURNCODE)) {                                    _RETURNCODE = pullParser.nextText();                                }                                /*开始节点*/                                if (tag.equals(LocalAction.ACTION_PRINTORDERS._XMLBEGIN)) {                                    printOrders = new PrintOrders();                                }                                /*地址*/                                if (tag.equals(LocalAction.ACTION_SUPERBUSINESS._BUSINESSADDR)) {                                    printOrders._addr = pullParser.nextText();                                }                                /*商品名称*/                                if (tag.equals(LocalAction.ACTION_SUPERBUSINESS._BUSINESSNAME)) {                                    printOrders._name = pullParser.nextText();                                }                                /*商品的电话*/                                if (tag.equals(LocalAction.ACTION_SUPERBUSINESS._BUSINESSTEL)) {                                    printOrders._tel = pullParser.nextText();                                }                                /*商品的所属人*/                                if (tag.equals(LocalAction.ACTION_SUPERBUSINESS._BUSINESSPEOPLE)) {                                    printOrders._people = pullParser.nextText().trim();                                }                            } catch (Exception e) {                                e.printStackTrace();                            }                        }                        @Override                        public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                            if (tag.equals(LocalAction.ACTION_PRINTORDERS._XMLBEGIN)) {                                ar_list.add(printOrders);                                printOrders = null;                            }                        }                        @Override                        public void onEndDocument() {                            if (ar_list.size() == 0) {                                pullPrintordersListener._onError();                            } else {                                pullPrintordersListener._onPull("0", ar_list);                            }                        }                    });                }            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                return Tools.getShowwait(_context);            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree());    }    /**     * 监听回调     */    public interface PullPrintordersListener {        void _onPull(String _returnCode, ArrayList<PrintOrders> _list);        void _onError();    }    /**     * 打印订单表格     */    public static class PrintOrders {        public String _name;/*店铺名称*/        public String _tel;/*店铺电话*/        public String _addr;/*地址*/        public String _people;/*所属人*/    }}