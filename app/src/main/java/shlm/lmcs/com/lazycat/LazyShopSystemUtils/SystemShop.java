package shlm.lmcs.com.lazycat.LazyShopSystemUtils;import android.content.Context;import android.util.Log;import org.xmlpull.v1.XmlPullParser;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyPage.WAIT_ITME_DIALOGPAGE;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;/** * 提交商品的处理类 * <p> * <p> * <p> * 在使用这个类的时候 必须先构造_Savepage里面的所有参数在调用_Savepage保存订单信息! * 处理商品数据回调 */public class SystemShop {	private static String MSG = "SystemShop.java[+]";	private static _Savepage savepage = new _Savepage();			/**	 * 获取结构表	 */	public static _Savepage getSavepageInstance() {		return savepage;	}		/**	 * 保存订单数据	 */	public static void SaveOrder(final Context _context, _Savepage _savepage,                                 final _SaveInterface saveInterface) {		LocalValues.HTTP_ADDRS http_addrs = new LocalValues.HTTP_ADDRS(_context);		/*保存数据  要给出用户的账户和TOKEN*/		XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(true);		xmlInstance.setXmlTree(LocalAction.ACTION_SAVEORDER._ONLYID, _savepage._onlyid);		xmlInstance.setXmlTree(LocalAction.ACTION_SAVEORDER._PAYHOW, _savepage._payhow);		xmlInstance.overDom();		Log.i(MSG, http_addrs.HTTP_ADDR_TOSAVEORDER);		Log.i(MSG, "请求提交的XML数据信息为:" + xmlInstance.getXmlTree());		Net.doPostXml(http_addrs.HTTP_ADDR_TOSAVEORDER, new ProgramInterface() {			@Override			public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {				_refreshDialog.dismiss();				Log.i(MSG, "请求存储用户的发货单数据返回:" + data.trim());				saveInterface._saveOk();				XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());				xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {					@Override					public void onFaile() {										}										@Override					public void onStartDocument(String tag) {										}										@Override					public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {						try {							/*判断登录的状态*/							if (tag.equals(LocalAction.ACTION_LOGIN.ACTION_XML_LOGINSTATUS)) {								if (pullParser.nextText().trim().equals(LocalValues.VALUES_LOGIN.LOGIN_ERROR)) {									saveInterface._saveNotLogin();																	}															}													} catch (Exception e) {							Log.e(MSG, "");						}					}										@Override					public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {										}										@Override					public void onEndDocument() {										}				});			}						@Override			public WaitDialog.RefreshDialog onStartLoad() {				/*初始化一个DIALOG*/				final WaitDialog.RefreshDialog refreshDialog =                        new WaitDialog.RefreshDialog(_context);				WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();				wait_itme_dialogpage.setImg(R.id.item_wait_img);				wait_itme_dialogpage.setView(R.layout.item_wait);				wait_itme_dialogpage.setCanClose(false);				wait_itme_dialogpage.setTitle(R.id.item_wait_title);				refreshDialog.Init(wait_itme_dialogpage);				refreshDialog.showRefreshDialog("加载中...", false);				return refreshDialog;			}						@Override			public void onFaile(String data, int code) {						}		}, xmlInstance.getXmlTree().trim());	}			/**	 * 保存订单的数据结构	 */	public static class _Savepage {		public String _onlyid;/*对应的唯一ID*/		public String _payhow;/*客户端会改变的数据  购买数量*/	}			/**	 * 保存发货单数据处理信息之后的接口	 */			public interface _SaveInterface {		void _saveOk();/*保存成功*/				void _saveError();/*保存失败*/				void _saveNotLogin();/*没有登录*/	}}