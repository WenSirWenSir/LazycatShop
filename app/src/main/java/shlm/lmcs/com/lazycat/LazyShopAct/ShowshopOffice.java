package shlm.lmcs.com.lazycat.LazyShopAct;import android.animation.ValueAnimator;import android.annotation.SuppressLint;import android.app.AlertDialog;import android.app.Dialog;import android.graphics.Color;import android.os.Bundle;import android.util.DisplayMetrics;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import com.lid.lib.LabelTextView;import cn.pedant.SweetAlert.SweetAlertDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyAct.LazyCatAct;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.TextUnt;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Config;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlTagValuesFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Tools;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Views.ScrollViewBiggerPhoto;import shlm.lmcs.com.lazycat.LazyShopPage.LocalShoppage;import shlm.lmcs.com.lazycat.LazyShopSystemMonitor.SystemMonitor;import shlm.lmcs.com.lazycat.LazyShopTools.LocalProgramTools;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.LazyShopView.SystemTextView;import shlm.lmcs.com.lazycat.LazyShopVip.SystemVip;import shlm.lmcs.com.lazycat.R;import shlm.lmcs.com.lazycat.TerminalSystemMO.Record.Useroperaction.Shop.See;import shlm.lmcs.com.lazycat.TerminalSystemOS.OS;import shlm.lmcs.com.lazycat.TerminalSystemOS.PagegetShopvalues;import shlm.lmcs.com.lazycat.TerminalSystemOS.PagesHandlerShopvalues;@SuppressLint({"ResourceType", "NewApi", "HandlerLeak"})public class ShowshopOffice extends LazyCatAct {    private String MSG = "ShowshopOffice.java[+]";    private Boolean isShowCart = false;/*记录是否把cart展开*/    /**     * 记录商品回传的信息     */    private String shopData;    /**     * 账户和密码     */    private String St_phone;/*账户和密码*/    private String St_token;/*token*/    private String St_payhow;/*如果为0  就是没有订购 如果订购了  就显示订单数*/    private ScrollViewBiggerPhoto scrollViewBiggerPhoto;    private ImageView photo;    private TextView btn_select_del;    private TextView btn_select_add;    private LinearLayout body_addordel;    private TextView SHOP_TITLE;    private TextView SHOP_DLP;/*商品的虚线价格*/    private TextView SHOP_PD;/*商品的保质期*/    private TextView SHOP_EXP;/*商品的生产日期*/    private TextView SHOP_SPEC;/*商品的品牌*/    private TextView SHOP_GRADE;/*商品的等级*/    private TextView SHOP_WEIGHT;/*商品的条码*/    private TextView SHOP_RETAIL;/*商品的零售价格*/    private TextView SHOP_SHOWBRAND;/*商品显示的品牌*/    private LocalProgramTools.UserToolsInstance userToolsInstance;/*用户工具类*/    private AlertDialog gradeAlertDialog;/*等级的Alert*/    private XmlTagValuesFactory.Giftshopvalues giftshopvalues = null;/*赠品信息*/    private ImageView countDownadavert;    private ImageView btnGradeAsk;/*问号按钮*/    private ImageView imgBarcode;/*图片的条码*/    private LinearLayout select_numberBody;    private LinearLayout valuesBody;/*商品参数的Body*/    private TextView btnAccount;    private TextView select_number;    private TextView SHOP_TP;/*显示批发的价格*/    private LinearLayout hideShopBody;    private Float Total;/*计算总和*/    private int window_height;/*屏幕的高度*/    private LinearLayout otherMessage;/*显示其他一些的基础的信息的body*/    private final static int MSG_CLEAR_COUNT_DOWN_ADAVERT = 1;    private DisplayMetrics metrics;    private SystemVip systemVip;    private String onlyId;/*获取传入的唯一ID*/    /**     * 商品的表格     */    private PagesHandlerShopvalues.ShopPages _shoppages;    /*地址工具类*/    private LocalValues.HTTP_ADDRS http_addrs;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_showshopoffice);        setTransparentBar();        userToolsInstance = LocalProgramTools.getUserToolsInstance();        /*获取地址工具类*/        http_addrs = LocalValues.getHttpaddrs(getApplicationContext());        otherMessage = findViewById(R.id.activity_showshopoffice_otherMessagebody);        /*其他一些基本信息的BODY*/        /*滑动增大图片控件*/        scrollViewBiggerPhoto = findViewById(R.id.activity_showshopoffice_scrollview);        /*增加或者减少按钮布局*/        body_addordel = findViewById(R.id.activity_showshopoffice_SeletNumberBody);        /*显示商品图片*/        photo = findViewById(R.id.activity_showshopoffice_photo);        /*显示商品的批发价格*/        SHOP_TP = findViewById(R.id.activity_showshopoffice_tp);        /*商品的保质期*/        SHOP_PD = findViewById(R.id.activity_showshopoffice_pd);        /*商品的保质期*/        SHOP_EXP = findViewById(R.id.activity_showshopoffice_exp);        /*商品的箱规*/        SHOP_SPEC = findViewById(R.id.activity_showshopoffice_spec);        /*商品的等级*/        SHOP_GRADE = findViewById(R.id.activity_showshopoffice_grade);        /*商品的条码*/        SHOP_WEIGHT = findViewById(R.id.activity_showshopoffice_weight);        /*商品的零售价格*/        SHOP_RETAIL = findViewById(R.id.activity_showshopoffice_retail);        /*显示虚线的价格*/        SHOP_DLP = findViewById(R.id.activity_showshopoffice_dlp);        /*商品的标题*/        SHOP_TITLE = findViewById(R.id.activity_showshopoffice_shoptitle);        /*显示商品的品牌*/        SHOP_SHOWBRAND = findViewById(R.id.activity_showshopoffice_showbrand);        /*倒计时的广告*/        countDownadavert = findViewById(R.id.activity_showshopoffice_countDownadavert);        /*选择数量*/        select_numberBody = findViewById(R.id.activity_showshopoffice_SeletNumberBody);        /*选择数量减少*/        btn_select_del = findViewById(R.id.activity_showshopoffice_SeletNumberBtndel);        /*选择数量增加*/        btn_select_add = findViewById(R.id.activity_showshopoffice_SeletNumberBtnadd);        /*获取选择数量*/        select_number = findViewById(R.id.activity_showshopoffice_SeletNumber);        /*订购按钮*/        btnAccount = findViewById(R.id.activity_showshopoffice_btnAccount);        /*遮物布局*/        hideShopBody = findViewById(R.id.activity_showshopoffice_hideShopBody);        /*购物车图标按钮*/        /*显示商品的参数的Body*/        valuesBody = findViewById(R.id.activity_showshopoffice_valuesBody);        /*显示问号按钮*/        btnGradeAsk = findViewById(R.id.activity_showshopoffice_btnGradeAsk);        /*图片的条码*/        imgBarcode = findViewById(R.id.activity_showshopoffice_imgBarcode);        /*获取界面传值*/        onlyId = getBundlerValue(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_ONLYID);/*商品id*/        systemVip = new SystemVip(ShowshopOffice.this);/*初始化工具*/        /*count down advert*/        init();        listener();    }    /**     * 初始化     */    private void init() {        /**         * 最重要的一步  首先获取到服务器的信息  进行数据的整理和初始化         */        /*处理完毕了*/        PagegetShopvalues._with(ShowshopOffice.this, LocalValues.VALUES_GETSHOPPAGE.TAG_TOSHOP_ONLYID, onlyId)._start(new PagesHandlerShopvalues.onGet() {            @Override            public void _onGet(PagesHandlerShopvalues.ShopPages _Shopage) {                _shoppages = _Shopage;                Log.i(MSG, "积分为:" + _shoppages.integral);                initMainpage();            }            @Override            public void _onError() {                Tools.showError(ShowshopOffice.this, "错误信息", getResources().getString(R.string.SystemError0005));            }            @Override            public void _onNologin() {            }            @Override            public void _onThiserror(String _msg) {                Tools.showError(ShowshopOffice.this, "错误信息", "客户端发生致命错误");            }            @Override            public void _onNoshop() {                Tools.showConfirm(ShowshopOffice.this, "提示", getResources().getString(R.string.SystemnoGetshop),                        new SweetAlertDialog.OnSweetClickListener() {                    @Override                    public void onClick(SweetAlertDialog sweetAlertDialog) {                        finish();                    }                });            }        });    }    private void listener() {        /**         * 退出的监听事件         */        findViewById(R.id.activity_showshopoffice_btnBack).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });        /**         * 询问等级的按钮问号         */        btnGradeAsk.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {            }        });        /**         * 请求仓库网络发货         */        btnAccount.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (_shoppages._static.equals(LocalValues.VALUES_SHOPPAGE.ONLY_VIP)) {                    /**                     * 不是VIP  就告诉用户不能订购商品                     */                    systemVip.Start(new SystemVip.OnVipcheck() {                        @Override                        public void onIsvip() {                            AlertOrderPage();                        }                        @Override                        public void onIsnovip() {                            Tools.showError(ShowshopOffice.this, "购买限制", "您不是加盟商,无法购买");                        }                        @Override                        public void onIsnologin() {                            Tools.showError(ShowshopOffice.this, "错误信息", "您没有登录系统");                            SystemMonitor.SaveTag(ShowshopOffice.this, SystemMonitor.TAG_LOG, MSG, "用户没有登录," +                                    "点击了发送订货单");                        }                        @Override                        public void onIslogin() {                        }                    });                } else {                    /*不是限制购买商品 就直接进入*/                    systemVip.Start(new SystemVip.OnVipcheck() {                        @Override                        public void onIsvip() {                        }                        @Override                        public void onIsnovip() {                        }                        @Override                        public void onIsnologin() {                            Tools.showError(ShowshopOffice.this, "错误信息", "您没有登录系统");                            SystemMonitor.SaveTag(ShowshopOffice.this, SystemMonitor.TAG_LOG, MSG, "用户没有登录," +                                    "点击了发送订货单");                        }                        @Override                        public void onIslogin() {                            AlertOrderPage();                        }                    });                }            }        });    }    /**     * 展示用户的订单确认界面     */    private void AlertOrderPage() {        /**         * 展示给用户重新确认的订单         */        final AlertDialog.Builder builder = new AlertDialog.Builder(ShowshopOffice                .this);        final View confirmdeliverItem =                LayoutInflater.from(ShowshopOffice.this).inflate(R.layout.assembly_confirmdeliver, null);        builder.setView(confirmdeliverItem);        /*设置标题*/        TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliverShopname).setText(_shoppages.title);        /*设置图片*/        ImageView deliverShopimg = confirmdeliverItem.findViewById(R.id.assembly_confirmdeliverShopimg);        /*设置标题的黄色的图片*/        final LabelTextView labelTextView = confirmdeliverItem.findViewById(R.id.assembly_confirmdeliverLabel);        /*设置图片*/        Glide.with(getApplicationContext()).load(http_addrs.HTTP_ADDR_PROGRAM_IMGSERVICE + _shoppages.img).into(deliverShopimg);        /*设置数量*/        TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliverShopNumber).setText("订购数量:" + select_number.getText().toString() + _shoppages.company);        /*设置箱规*/        TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliverShopSpec).setText("规格:" + _shoppages.company +                "装X" + _shoppages.spec + _shoppages.splitUnit);        /*设置保质期和生产日期*/        TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliverShopPd_Exp).setText("生产日期:" + _shoppages.pd +                "·保质期:" + _shoppages.exp + "天");        /*设置价格*/        TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliverShopTp).setText("商品单价:" + _shoppages.tp + "/" + _shoppages.company);        /*设置用户的店铺的名称*/        TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliverUsername).setText(userToolsInstance.GetUserpageOnAction(LocalAction.ACTION_LOCALUSERPAGE.ACTION_LOCALUSERPAGE_SHOPNAME));        /*设置用户的手机*/        TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliver_Shoptel).setText(userToolsInstance.GetUserpageOnAction(LocalAction.ACTION_LOCALUSERPAGE.ACTION_LOCALUSERPAGE_SHOPTEL));        /*设置用户的地址*/        TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliver_Shopaddr).setText(userToolsInstance.GetUserpageOnAction(LocalAction.ACTION_LOCALUSERPAGE.ACTION_LOCALUSERPAGE_SHOPADDR));        /*设置用户的店铺负责人*/        TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliver_shopusePeople).setText(userToolsInstance.GetUserpageOnAction(LocalAction.ACTION_LOCALUSERPAGE.ACTION_LOCALUSERPAGE_SHOPUSEPEOPLE));        /*设置支付价格的总和*/        TextUnt.with(confirmdeliverItem, R.id.assembly_confirmedliverTotal).setText(Tools.calcToRide(select_number.getText().toString().trim(), _shoppages.tp)).setTextColor(getResources().getString(R.color.ThemeColor));        /**         * 判断用户是否为VIP         */        /*商品的VIP图标*/        final ImageView deliverShopequity = confirmdeliverItem.findViewById(R.id.assembly_confirmdeliverShopEquity);        systemVip.Start(new SystemVip.OnVipcheck() {            @Override            public void onIsvip() {                /*VIP提供的服务*/                TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliverShopVipMsg).setBackground(Tools.CreateDrawable(1, getResources().getString(R.color.colorVip), getResources().getString(R.color.colorVip), 5)).setTextColor("#ffffff").setText(getResources().getString(R.string.isVipmsg)).setVisibility(true);                /*设置价格的符号的颜色*/                TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliver_TotalSymbol).setTextColor(getResources().getString(R.color.colorVip));                /*设置统计总额的颜色*/                TextUnt.with(confirmdeliverItem, R.id.assembly_confirmedliverTotal).setTextColor(getResources().getString(R.color.colorVip));                /*设置Vip图标显示*/                deliverShopequity.setVisibility(View.VISIBLE);                /*设置VIP图片的颜色*/                deliverShopequity.setImageDrawable(Tools.setSvgColor(getApplicationContext(), R.drawable.ico_equity,                        getResources().getString(R.color.colorVip)));                /*设置名字旁边的图标*/                TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliverIcoVip).setBackground(Tools.CreateDrawable(1, getResources().getString(R.color.colorVip), getResources().getString(R.color.colorVip), 5)).setTextColor("#ffffff").setText("Vip");                /**                 * 设置VIP专属的点击确定的按钮                 */                TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliver_BtnSendorder).setBackground(Tools.CreateDrawable(1, getResources().getString(R.color.colorVip), getResources().getString(R.color.colorVip), 5)).setTextColor("#000000").setText("确定订单");                /*设置Label的背景颜色*/                labelTextView.setLabelBackgroundColor(Color.parseColor(getResources().getString(R.color.colorVip)));            }            @Override            public void onIsnovip() {                /*不是Vip*/                TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliverShopVipMsg).setBackground(Tools.CreateDrawable(1, getResources().getString(R.color.colornoVip), getResources().getString(R.color.colornoVip), 5)).setTextColor("#ffffff").setVisibility(false);                /*设置价格的符号的颜色*/                TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliver_TotalSymbol).setTextColor(getResources().getString(R.color.ThemeColor));                /*设置统计总额的颜色*/                TextUnt.with(confirmdeliverItem, R.id.assembly_confirmedliverTotal).setTextColor(getResources().getString(R.color.ThemeColor));                /*设置Vip图标不显示*/                deliverShopequity.setVisibility(View.GONE);                /*设置名字旁边的图标*/                TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliverIcoVip).setBackground(Tools.CreateDrawable(1, getResources().getString(R.color.colornoVip), getResources().getString(R.color.colornoVip), 5)).setTextColor("#ffffff").setText("Vip");                /*设置Label的背景颜色*/                labelTextView.setLabelBackgroundColor(Color.parseColor(getResources().getString(R.color.ThemeColor)));                /**                 * 设置VIP专属的点击确定的按钮                 */                TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliver_BtnSendorder).setBackground(Tools.CreateDrawable(1, getResources().getString(R.color.ThemeColor), getResources().getString(R.color.ThemeColor), 5)).setTextColor("#ffffff").setText("确定订单");            }            @Override            public void onIsnologin() {                Tools.showError(ShowshopOffice.this, "错误提示", "您没有登录系统");            }            @Override            public void onIslogin() {            }        });        /*确定通知仓库发货的按钮*/        Dialog dialog = builder.show();        Window window = dialog.getWindow();        window.setWindowAnimations(R.style.DialogStyle);        TextUnt.with(confirmdeliverItem, R.id.assembly_confirmdeliver_BtnSendorder).setOnClick(new View.OnClickListener() {            @Override            public void onClick(View v) {                AlertDialog ab = (AlertDialog) v.getTag();                ab.dismiss();/*销毁用户确定的订单*/                OS.OS_PAGES os_pages = OS.getOs_page();                os_pages._onlyId = _shoppages.onlyid;                os_pages._payHow = select_number.getText().toString().trim();                OS._saveOrder(ShowshopOffice.this, new OS.onSaveorder() {                    @Override                    public void onSaveOk() {                        Tools.showSuccess(ShowshopOffice.this, "完成", "您的订单已经提交成功");                    }                    @Override                    public void onSaveError() {                    }                    @Override                    public void onSaveNologin() {                    }                });            }        }).setTag(dialog);        builder.setCancelable(false);    }    @SuppressLint("ClickableViewAccessibility")    private void initMainpage() {        /*开始记录用户的点击商品信息*/        See._saveSee(ShowshopOffice.this, _shoppages.onlyid);        /**         * 判断是否登录账户         */        systemVip.Start(new SystemVip.OnVipcheck() {            @Override            public void onIsvip() {                setSplitAndIntegral(true);            }            @Override            public void onIsnovip() {                setSplitAndIntegral(false);            }            @Override            public void onIsnologin() {                //没有登录 顺便要删除本地存储的文件                userToolsInstance.ClearLocalCach();/*清空本地数据文件*/                /*没有登录的情况下 不能设置不能发送订货单*/                TextUnt.with(SHOP_TP).setText("*.*");                /*设置批发价格*/                SHOP_DLP.setVisibility(View.GONE);                TextUnt.with(SHOP_DLP).setVisibility(false);                /*设置零售价*/                TextUnt.with(SHOP_RETAIL).setText("终端建议售价:*.*元/" + _shoppages.splitUnit);            }            @Override            public void onIslogin() {                /*设置批发价格*/                Log.i(MSG, "登录处理");                TextUnt.with(SHOP_TP).setText(_shoppages.tp);                /*获取零售价*/                try {                    if (_shoppages.spec.equals("1")) {                        /*为一个价格就不要填了*/                        TextUnt.with(SHOP_RETAIL).setText("终端建议售价:" + _shoppages.retail + "元/" + _shoppages.splitUnit);                    } else {                        String retail = Tools.deciMal(Integer.valueOf(_shoppages.retail),                                Integer.valueOf(_shoppages.spec));                        TextUnt.with(SHOP_RETAIL).setText("终端建议售价:" + String.valueOf(retail) + "元/" + _shoppages.splitUnit);                    }                } catch (Exception e) {                    TextUnt.with(SHOP_RETAIL).setText("终端建议售价:" + _shoppages.retail + "元/" + _shoppages.spec + _shoppages.splitUnit);                }            }        });        /*设置请求发货的按钮的样式*/        TextUnt.with(btnAccount).setBackground(Tools.CreateDrawable(1, getResources().getString(R.color.ThemeColor),                getResources().getString(R.color.ThemeColor), 10)).setText("通知发货").setTextColor("#ffffff");        /*设置收藏 要判断商品是否被用户收藏*/        if (_shoppages.shoplike) {            findViewById(R.id.activity_showshopoffice_btnCollection).setBackground(Tools.CreateDrawable(1,                    getResources().getString(R.color.ThemeColor), getResources().getString(R.color.ThemeColor), 10));        } else {            findViewById(R.id.activity_showshopoffice_btnCollection).setBackground(Tools.CreateDrawable(1, "#afafaf",                    "#afafaf", 10));        }        /*设置条码图片*/        if (_shoppages.barcode.equals("") || _shoppages.barcode.equals("0") || _shoppages.barcode.equals("暂无")) {            imgBarcode.setVisibility(View.GONE);        } else {            Glide.with(ShowshopOffice.this).load("http://api.k780.com/?app=barcode.get&bc_text=" + _shoppages.barcode + "&appkey=" + getResources().getString(R.string.nowApiKey) + "&sign=" + getResources().getString(R.string.nowApiMd5)).diskCacheStrategy(DiskCacheStrategy.NONE).skipMemoryCache(false).into(imgBarcode);        }        /*设置商品参数的Body的边框*/        valuesBody.setBackground(Tools.CreateDrawable(1, "#efefef", "#efefef", 10));        //添加起订        SystemTextView tp = new SystemTextView(otherMessage.getContext());        tp.setPadding(10, 7, 10, 7);        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,                ViewGroup.LayoutParams.WRAP_CONTENT);        params.setMargins(15, 0, 0, 0);        tp.setLayoutParams(params);        otherMessage.addView(tp);        TextUnt.with(tp).setText(_shoppages.su + _shoppages.company + "起订").setTextColor("#ffffff").setTextSize(8).setBackground(Tools.CreateDrawable(1, getResources().getString(R.color.ThemeColor), getResources().getString(R.color.ThemeColor), 5));        TextUnt.with(SHOP_TITLE).setText(_shoppages.title);        /**         * 初始化布局         */        /*设置保质日期*/        TextUnt.with(SHOP_PD).setText("保质期:" + _shoppages.exp);        /*设置生产期*/        TextUnt.with(SHOP_EXP).setText("生产日期:" + _shoppages.pd);        /*设置品牌*/        TextUnt.with(SHOP_SPEC).setText("箱规:" + _shoppages.spec + _shoppages.splitUnit);        /*设置等级*/        TextUnt.with(SHOP_GRADE).setText("等级:" + _shoppages.grade);        /*设置商品重量*/        TextUnt.with(SHOP_WEIGHT).setText("重量:" + _shoppages.weight + _shoppages.weightSymbol + "/" + _shoppages.splitUnit);        /*设置要显示的品牌*/        TextUnt.with(SHOP_SHOWBRAND).setText(_shoppages.brand);        OpeningAnimation();        /**         *  开始访问网络图片         */        photo.setImageDrawable(null);        /*设置PHOTO的宽度和高度*/        Log.i(MSG, "显示商品详情图片地址:" + http_addrs.HTTP_ADDR_PROGRAM_IMGSERVICE + _shoppages.img);        Glide.with(getApplicationContext()).load(http_addrs.HTTP_ADDR_PROGRAM_IMGSERVICE + _shoppages.img).into(photo);        /*数量减少*/        btn_select_del.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (v.getTag() != null) {                    if ((Boolean) v.getTag()) {                        /*可以被点击*/                        int i = Integer.parseInt(select_number.getText().toString());                        i -= 1;                        if (i <= 0) {                            Toast.makeText(getApplicationContext(), "配送的数量不能小于0哦", Toast.LENGTH_SHORT).show();                        } else {                            try {                                int su = Integer.parseInt(_shoppages.su);                                float tp = Float.parseFloat(_shoppages.tp);                                Total -= su * tp;                                float total = su * tp;                            } catch (Exception e) {                                Log.e(MSG, "计算总和错误:" + e.getMessage());                            }                            select_number.setText(String.valueOf(i));                        }                    } else {                        /*不能被点击*/                        Toast.makeText(getApplicationContext(), "限定的商品不能减少", Toast.LENGTH_SHORT).show();                    }                } else {                    /*可以被点击*/                    int i = Integer.parseInt(select_number.getText().toString());                    i -= 1;                    if (i <= 0) {                        Toast.makeText(getApplicationContext(), "配送的数量不能小于0哦", Toast.LENGTH_SHORT).show();                    } else {                        try {                            int su = Integer.parseInt(_shoppages.su);                            float tp = Float.parseFloat(_shoppages.tp);                            Total -= su * tp;                            float total = su * tp;                        } catch (Exception e) {                            Log.e(MSG, "计算总和错误:" + e.getMessage());                        }                        select_number.setText(String.valueOf(i));                    }                }            }        });        /*数量增加*/        btn_select_add.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (v.getTag() != null) {                    if ((Boolean) v.getTag()) {                        int i = Integer.parseInt(select_number.getText().toString());                        i += 1;                        select_number.setText(String.valueOf(i));                        try {                            int su = Integer.parseInt(_shoppages.su);                            float tp = Float.parseFloat(_shoppages.tp);                            Total += su * tp;                        } catch (Exception e) {                            Log.e(MSG, "计算总和错误:" + e.getMessage());                        }                        int total = i * (Integer.valueOf(_shoppages.su));                    } else {                        Toast.makeText(getApplicationContext(), "限定的商品不能增加", Toast.LENGTH_SHORT).show();                    }                } else {                    int i = Integer.parseInt(select_number.getText().toString());                    i += 1;                    select_number.setText(String.valueOf(i));                    try {                        int su = Integer.parseInt(_shoppages.su);                        float tp = Float.parseFloat(_shoppages.tp);                        Total += su * tp;                    } catch (Exception e) {                        Log.e(MSG, "计算总和错误:" + e.getMessage());                    }                    int total = i * (Integer.valueOf(_shoppages.su));                }            }        });    }    /**     * 设置加盟积分和拆分价格     */    private void setSplitAndIntegral(Boolean _isVip) {        /**         * 如果是VIP  要设置加盟之后的的拆分单价         */        if (_shoppages.integral.equals("") || _shoppages.integral.equals("0")) {        } else {            /*初始化一个显示积分的控件*/            SystemTextView integral = new SystemTextView(otherMessage.getContext());            integral.setPadding(10, 7, 10, 7);            LinearLayout.LayoutParams integralParams =                    new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,                            ViewGroup.LayoutParams.WRAP_CONTENT);            integralParams.setMargins(15, 0, 0, 0);            integral.setLayoutParams(integralParams);            otherMessage.addView(integral);            /*计算积分*/            TextUnt.with(integral).setText("积分:" + _shoppages.integral).setTextColor("#000000").setTextSize(8).setBackground(Tools.CreateDrawable(1, getResources().getString(R.color.colorVip), getResources().getString(R.color.colorVip), 5));        }        /**         * 计算加盟后的单价         */        if (_shoppages.spec.equals("") || _shoppages.spec.equals("1") || _shoppages.integral.equals("") || _shoppages.integral.equals("0")) {            //表示这个起订就是一瓶  就不要显示拆封的价格了            try {                SystemTextView splitTv = new SystemTextView(otherMessage.getContext());                splitTv.setPadding(10, 7, 10, 7);                LinearLayout.LayoutParams splitParams =                        new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,                                ViewGroup.LayoutParams.WRAP_CONTENT);                splitParams.setMargins(15, 0, 0, 0);                splitTv.setLayoutParams(splitParams);                Log.i(MSG, "积分为:" + _shoppages.integral);                if (_shoppages.integral.equals("") || _shoppages.integral.equals("0")) {                    Float splitTp = Float.parseFloat(_shoppages.tp) / Float.parseFloat(_shoppages.spec);                    /*没有积分*/                    TextUnt.with(splitTv).setText("每" + _shoppages.splitUnit + "约" + String.format("%.2f", splitTp)).setTextSize(8).setBackground(Tools.CreateDrawable(1, getResources().getString(R.color.colorVip), getResources().getString(R.color.colorVip), 5)).setTextColor("#000000");                } else {                    /*如果有积分 那么加盟商的价格就是直接减去该积分 判断是否为加盟商*/                    Float splitTp = Float.parseFloat(_shoppages.tp) - Float.parseFloat(_shoppages.integral);                    if (_isVip) {                        TextUnt.with(splitTv).setText("每" + _shoppages.splitUnit + "约" + String.format("%.2f",                                splitTp)).setTextSize(8).setBackground(Tools.CreateDrawable(1,                                getResources().getString(R.color.colorVip),                                getResources().getString(R.color.colorVip), 5)).setTextColor("#000000");                    } else {                        TextUnt.with(splitTv).setText("加盟商每" + _shoppages.splitUnit + "约" + String.format("%.2f",                                splitTp)).setTextSize(8).setBackground(Tools.CreateDrawable(1,                                getResources().getString(R.color.colorVip),                                getResources().getString(R.color.colorVip), 5)).setTextColor("#000000");                    }                }                otherMessage.addView(splitTv);            } catch (Exception e) {                Log.i(MSG, "错误信息:" + e.getMessage());            }        } else {            try {                Float splitTp =                        (Float.parseFloat(_shoppages.tp) - (Float.parseFloat(_shoppages.integral) / 10)) / Float.parseFloat(_shoppages.spec);                Log.i(MSG, "设置的拆分价格:" + splitTp);                SystemTextView splitTv = new SystemTextView(otherMessage.getContext());                splitTv.setPadding(10, 7, 10, 7);                LinearLayout.LayoutParams splitParams =                        new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,                                ViewGroup.LayoutParams.WRAP_CONTENT);                splitParams.setMargins(15, 0, 0, 0);                splitTv.setLayoutParams(splitParams);                if (_isVip) {                    TextUnt.with(splitTv).setText("每" + _shoppages.splitUnit + "约" + String.format("%.2f", splitTp)).setTextSize(8).setBackground(Tools.CreateDrawable(1, getResources().getString(R.color.colorVip), getResources().getString(R.color.colorVip), 5)).setTextColor("#000000");                } else {                    TextUnt.with(splitTv).setText("加盟商每" + _shoppages.splitUnit + "约" + String.format("%.2f",                            splitTp)).setTextSize(8).setBackground(Tools.CreateDrawable(1,                            getResources().getString(R.color.colorVip), getResources().getString(R.color.colorVip),                            5)).setTextColor("#000000");                }                otherMessage.addView(splitTv);            } catch (Exception e) {                Log.i(MSG, "错误信息:" + e.getMessage());            }        }    }    /**     * 计算开场动画     */    private void OpeningAnimation() {        metrics = new DisplayMetrics();/*获取屏幕矩阵*/        getWindowManager().getDefaultDisplay().getMetrics(metrics);        /*重新计算图片的高度实现开场动画*/        final ViewGroup.LayoutParams photoParams = photo.getLayoutParams();        window_height = metrics.heightPixels;        photoParams.height = metrics.heightPixels;        photoParams.width = metrics.widthPixels;        photo.setLayoutParams(photoParams);        /*图片边框动画*/        ValueAnimator anim = ValueAnimator.ofInt(metrics.heightPixels, metrics.widthPixels);        anim.setDuration(1000);        anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {            @Override            public void onAnimationUpdate(ValueAnimator animation) {                ViewGroup.LayoutParams params = photo.getLayoutParams();                params.height = (int) animation.getAnimatedValue();                photo.setLayoutParams(params);            }        });        anim.start();        /*重新计算高度和宽度*/        ViewGroup.LayoutParams Bodyparams = countDownadavert.getLayoutParams();        Bodyparams.width = metrics.widthPixels;        Bodyparams.height = Tools.getCount_downAdvert(metrics);        countDownadavert.setLayoutParams(Bodyparams);        countDownadavert.setVisibility(View.GONE);        scrollViewBiggerPhoto.setImageHead(photo, metrics);    }    @Override    public void onBackPressed() {        if (isShowCart) {        } else {            super.onBackPressed();        }    }    @Override    protected void onDestroy() {        giftshopvalues = null;        System.gc();        super.onDestroy();    }}