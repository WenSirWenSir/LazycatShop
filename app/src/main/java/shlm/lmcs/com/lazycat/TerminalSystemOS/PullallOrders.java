package shlm.lmcs.com.lazycat.TerminalSystemOS;import android.content.Context;import android.util.Log;import org.xmlpull.v1.XmlPullParser;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Tools;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;/** * 拉取用户的所有订单信息(包括无货 包括送货完毕的全部商品) */public class PullallOrders {    private static String MSG = "PullallOrders.java[+]";    private static String _RETURNCODE = "";    /**     * 加载信息  按需加载每次只加载15个数据信息 设置start     *     * @param _context  上下文     * @param _position 要分割的POSITION     * @param _limit    要获取的数据     * @param _Onpull   监听回调     */    public static void _pull(final Context _context, String _position, String _limit, final Onpull _Onpull) {        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(true);        xmlInstance.overDom();        LocalValues.HTTP_ADDRS http_addrs = new LocalValues.HTTP_ADDRS(_context);        Net.doPostXml(http_addrs.HTTP_ADDR_SUPER_PULLALL_ORDERS, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                Log.i(MSG, "获取全部的订单数据:" + data.trim());                _refreshDialog.dismiss();                XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                    @Override                    public void onFaile() {                    }                    @Override                    public void onStartDocument(String tag) {                    }                    @Override                    public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                        try {                            if (tag.equals(LocalAction.ACTION_RETURNCODE)) {                                _RETURNCODE = pullParser.nextText().trim();                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                    @Override                    public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                    }                    @Override                    public void onEndDocument() {                        if (_RETURNCODE.equals(LocalValues.NET_OK)) {                            _Onpull._onPull();//拉取数据成功                        } else {                            _Onpull._onError();//拉取数据失败                        }                    }                });            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                return Tools.getShowwait(_context);            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree().trim());    }    public interface Onpull {        void _onPull();/*获取成功*/        void _onError();/*服务器失败*/        void _onNologin();/*没有登录*/    }}