package shlm.lmcs.com.lazycat.LazyShopAct;import android.os.Bundle;import android.text.TextUtils;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import com.bumptech.glide.Glide;import org.xmlpull.v1.XmlPullParser;import java.util.ArrayList;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyAct.LazyCatAct;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyPage.WAIT_ITME_DIALOGPAGE;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.TextUnt;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Config;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Tools;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Views.OnLoadmoreListView;import shlm.lmcs.com.lazycat.LazyPage.LocalPage;import shlm.lmcs.com.lazycat.LazyShopTools.LocalProgramTools;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;import static shlm.lmcs.com.lazycat.LazyCatProgramUnt.Config.Windows.GET_WINDOW_VALUE_SHOP_ACTION;public class SearchShoplist extends LazyCatAct implements OnLoadmoreListView._onScrollListener {    private OnLoadmoreListView onLoadmoreListView;    private final String MSG = "SearchShoplist.java[+]";    private String search_key;    private LocalPage.LocalShopPage searchShoplist = null;/*商品的实例*/    private ImageView headBack_img;/*退出的图标*/    private TextView headTitle;/*标题*/    private ArrayList<LocalPage.LocalShopPage> Shop_arrays = new ArrayList<LocalPage            .LocalShopPage>();/*所有的商品的实例集合*/    private LocalProgramTools.UserToolsInstance userToolsInstance;    private LocalPage localPage = new LocalPage();    private Boolean isLogin;/*判断是否登录*/    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setStatusBar("#f30d88");        setContentView(R.layout.activity_searchshoplist);        /*设置状态栏的颜色*/        setTransparentBar();        setStatusBar("#f30d88");        /**         * 找寻控件         */        search_key = getBundlerValue(LocalAction.WINDOWS_TO_WINDOWS.ACTION_SEARCH_KEY);        Log.i(MSG, "传送过来的Search_key为:" + search_key);        /*自定义的ListView*/        onLoadmoreListView = findViewById(R.id.activity_searchshoplist_showlistview);        setStatusBar("#ffffff");        /*引入的标题*/        RelativeLayout head_layout = findViewById(R.id.activity_searchShoplistHead);        /*退出的图标*/        headBack_img = head_layout.findViewById(R.id.assembly_act_headBackImg);        /*头部的标题*/        headTitle = head_layout.findViewById(R.id.assembly_act_headTitle);        TextUnt.with(headTitle).setText("搜索结果");        init();    }    public void init() {        /*判断本地是否登录了账户*/        userToolsInstance = LocalProgramTools.getUserToolsInstance();        userToolsInstance.StartPullerUserpageXml(new LocalProgramTools.UserToolsInstance                .SetReadUserpageListener() {            @Override            public void onRead(String tag, String values) {                if (tag.equals(LocalAction.ACTION_LOCALUSERPAGE.ACTION_LOCALUSERPAGE_ACCOUNT)) {                    if (!TextUtils.isEmpty(values)) {                        isLogin = true;                    } else {                        isLogin = false;                    }                } else {                    isLogin = false;                }            }            @Override            public void onError() {                Log.e(MSG, "检查登录状态失败");                isLogin = false;            }        });        if (search_key.equals("")) {            //为空            finish();        } else {            XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder();            xmlInstance.initDom();            xmlInstance.setXmlTree(LocalAction.ACTION_SEARCHKEY.ACTION_KEYWORD, "海天");            xmlInstance.setXmlTree(LocalAction.ACTION, LocalValues.VALUES_SEARCH                    .VALUES_TO_SEARCH_SHOPKEYWORD);            xmlInstance.overDom();            Net.doPostXml(getApplicationContext(), LocalValues.HTTP_ADDRS.HTTP_ADDR_SEARCH_KEY,                    new ProgramInterface() {                @Override                public void onSucess(String data, int code, WaitDialog.RefreshDialog                        _refreshDialog) {                    Log.i(MSG, "搜索产品返回数据信息:" + data.trim());                    /*成功返回数据信息之后  把Dialog销毁掉*/                    _refreshDialog.dismiss();                    XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                    xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                        @Override                        public void onFaile() {                        }                        @Override                        public void onStartDocument(String tag) {                            /*开始解析*/                            Shop_arrays.clear();/*清空*/                        }                        @Override                        public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                            try {                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_START)) {                                    /*解析到一个开始的头部*/                                    if (searchShoplist == null) {                                        searchShoplist = localPage.getLocalShopPageInstance();                                    } else {                                        Log.i(MSG, "searchShoplist不为空");                                    }                                }                                /*标题*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_TITLE)) {                                    if (searchShoplist != null) {                                        searchShoplist.setTitle(pullParser.nextText().trim());                                    } else {                                        Log.e(MSG, "searchShoplist为NULL");                                    }                                }                                /*价格*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_PRICE)) {                                    if (searchShoplist != null) {                                        searchShoplist.setPrice(pullParser.nextText().trim());                                    } else {                                        Log.e(MSG, "searchShoplist为NULL");                                    }                                }                                /*图片地址*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_IMG)) {                                    if (searchShoplist != null) {                                        searchShoplist.setImgUrl(pullParser.nextText().trim());                                    } else {                                        Log.e(MSG, "searchShoplist为NULL");                                    }                                }                                /*商品的状态*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES                                        .ACTION_SHOPVALUES_STATIC)) {                                    if (searchShoplist != null) {                                        searchShoplist.setStatus(pullParser.nextText().trim());                                    } else {                                        Log.e(MSG, "searchShoplist为NULL");                                    }                                }                            } catch (Exception e) {                                Log.e(MSG, "xml解析错误信息:" + e.getMessage());                            }                        }                        @Override                        public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                            if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_START)) {                                /*解析到尾部了*/                                Shop_arrays.add(searchShoplist);                                searchShoplist = null;                            }                        }                        @Override                        public void onEndDocument() {                            for (int i = 0; i < Shop_arrays.size(); i++) {                                Log.i(MSG, "调试输出第" + i + "个参数信息:" + Shop_arrays.get(i).getTitle()                                        .trim());                            }                            SearchlistAdapter searchlistAdapter = new SearchlistAdapter                                    (Shop_arrays);                            onLoadmoreListView.setAdapter(searchlistAdapter);                        }                    });                }                @Override                public WaitDialog.RefreshDialog onStartLoad() {                    /*初始化一个DIALOG*/                    final WaitDialog.RefreshDialog refreshDialog = new WaitDialog.RefreshDialog                            (SearchShoplist.this);                    WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                    wait_itme_dialogpage.setImg(R.id.item_wait_img);                    wait_itme_dialogpage.setView(R.layout.item_wait);                    wait_itme_dialogpage.setCanClose(false);                    wait_itme_dialogpage.setTitle(R.id.item_wait_title);                    refreshDialog.Init(wait_itme_dialogpage);                    refreshDialog.showRefreshDialog("加载中...", false);                    return refreshDialog;                }                @Override                public void onFaile(String data, int code) {                }            }, xmlInstance.getXmlTree().trim());        }        /*listView设置监听*/        onLoadmoreListView.setonScrollListener(this);        listener();    }    /*处理控件的监听事件*/    private void listener() {        headBack_img.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                SearchShoplist.this.finish();            }        });        onLoadmoreListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                ValueId valueId = (ValueId) view.getTag();                LazyCatStartActivityWithBundler(ShowshopOffice.class, false, Config.Windows                        .GET_WINDOW_VALUE_SHOP_MESSAGE, valueId.title.getText().toString().trim()                        , GET_WINDOW_VALUE_SHOP_ACTION, LocalValues.VALUES_SEARCH                                .VALUES_TO_SEARCH_SHOPKEYWORD);            }        });    }    class SearchlistAdapter extends BaseAdapter {        ArrayList<LocalPage.LocalShopPage> arrayList = new ArrayList<LocalPage.LocalShopPage>();        /*所有的商品的实例集合*/        public SearchlistAdapter(ArrayList<LocalPage.LocalShopPage> list) {            this.arrayList.addAll(list);        }        @Override        public int getCount() {            return this.arrayList.size();        }        @Override        public Object getItem(int position) {            return null;        }        @Override        public long getItemId(int position) {            return position;        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            ValueId valueId;            if (convertView != null) {                valueId = (ValueId) convertView.getTag();            } else {                convertView = LayoutInflater.from(getApplicationContext()).inflate(R.layout                        .item_searchshoplist, null);                valueId = new ValueId();                valueId.title = convertView.findViewById(R.id.item_searchshoplist_title);/*标题的控件ID*/                /*标题旁的状态*/                valueId.titleStatic = convertView.findViewById(R.id                        .item_searchshoplist_titleStatic);                /*商品的价格*/                valueId.price = convertView.findViewById(R.id.item_searchshoplist_price);                valueId.img = convertView.findViewById(R.id.item_searchshoplist_img);                convertView.setTag(valueId);            }            /**             * 判断商品的状态             */            switch (this.arrayList.get(position).getStatus()) {                case LocalValues.VALUES_SHOPPAGE.NORMAL:                    /*商品正常*/                    valueId.titleStatic.setVisibility(View.GONE);                    break;                case LocalValues.VALUES_SHOPPAGE.PROMOTION:                    /*商品促销*/                    TextUnt.with(valueId.titleStatic).setBackground(Tools.CreateDrawable(1,                            "#f30d88", "#f30d88", 2)).setTextColor("#ffffff").setTextSize(6)                            .setText("促销");                    break;                case LocalValues.VALUES_SHOPPAGE.REDUCTION:                    /*满减*/                    TextUnt.with(valueId.titleStatic).setBackground(Tools.CreateDrawable(1,                            "#f30d88", "#f30d88", 2)).setTextColor("#ffffff").setTextSize(6)                            .setText("满减");                    break;                case LocalValues.VALUES_SHOPPAGE.VOLUME:                    /*用卷*/                    TextUnt.with(valueId.titleStatic).setBackground(Tools.CreateDrawable(1,                            "#f30d88", "#f30d88", 2)).setTextColor("#ffffff").setTextSize(6)                            .setText("用卷");                    break;                default:                    TextUnt.with(valueId.titleStatic).setBackground(Tools.CreateDrawable(1,                            "#f30d88", "#f30d88", 2)).setTextColor("#ffffff").setTextSize(6)                            .setText("仓库专送");                    break;            }            TextUnt.with(valueId.title).setText(this.arrayList.get(position).getTitle().trim());            if(!isLogin){                TextUnt.with(valueId.price).setText(this.arrayList.get(position).getPrice().trim());            }            else{                TextUnt.with(valueId.price).setText("*.*");            }            Glide.with(SearchShoplist.this).load("http://f.freep.cn/583105/SHOP_DATABASE/" + this                    .arrayList.get(position).getImgUrl()).into(valueId.img);            return convertView;        }    }    /**     * 尝试加载更多     */    @Override    public void onLoadmore() {    }    /**     * 加载中之后的滑动X和Y轴的坐标和计算的总和     *     * @param x     * @param y     * @param total     */    @Override    public void onScroll(int x, int y, int total) {    }    class ValueId {        TextView titleStatic;//标题那边的显示        TextView title;/*标题*/        TextView price;/*价格*/        ImageView img;/*图片控件*/    }}