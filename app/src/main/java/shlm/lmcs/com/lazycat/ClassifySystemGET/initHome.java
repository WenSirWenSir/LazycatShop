/* * 我会用双手书写我来到这个世界的意义 * 最近梦见你了,你还是和从前一样,笑着走过来。你问我在愣着干嘛,而我却像是知道在梦中一般的对你说,我最后悔的事情就是当初失去你。然而你听了却什么都没说,笑着跑开了。梦醒, * 还是无法释然。我想我是真的很爱很爱你,我想和你续写一段电视剧中会出现的10年相遇,男生依然喜欢那个女生。他等了十年,最后终于等到了她。可是,对不起。我怕我等不到了,吴启鑫爱吴仁珍。 * 没人会再知道了 * * 当时的她是最好的她 后来的我是最好的我.可是最好的我们之间,隔了一整个青春。 */package shlm.lmcs.com.lazycat.ClassifySystemGET;import android.annotation.SuppressLint;import android.content.Context;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import org.xmlpull.v1.XmlPullParser;import java.util.ArrayList;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyPage.WAIT_ITME_DIALOGPAGE;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.TextUnt;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Tools;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;/** * 展示中心主页类 * <p> * 要返回一个适配器 用来给主界面来展示 */public class initHome {    private static String MSG = "initHome.java[+]";    private static String ACTION_ITEM = "item";/*item的包裹*/    private static String ACTION_ITEM_TITLE = "item_title";/*item的标题*/    private static String ACTION_ITEM_STATUS = "item_status";/*item的状态*/    private static String ACTION_ITEM_TAG = "item_tag";/*item的TAG*/    private static String ACTION_ITEM_IMGURL = "item_imgurl";/*item的imageurl*/    private static String ACTION_ITEM_COLOR = "item_color";/*item的背景颜色*/    private static _pages page;    private final static String VALUES_STATUS_URL = "0";    private final static String VALUES_STATUS_WINDOW = "1";    /**     * 初始化 获取适配器     *     * @param _context         上下文     * @param _onCreateadapter 监听对象     */    public static void _init(final Context _context, final onCreateadapter _onCreateadapter) {        LocalValues.HTTP_ADDRS http_addrs = new LocalValues.HTTP_ADDRS(_context);        final ArrayList<_pages> ar_pages = new ArrayList<>();/*数据表集合*/        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(true);        xmlInstance.overDom();        Net.doPostXml(http_addrs.HTTP_ADDR_CLASSIFY_SYSTEM_GET_INITHOME, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                Log.i(MSG, "主页获取适配器返回数据:" + data.trim());                _refreshDialog.dismiss();                XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                /**                 * XML数据解析                 */                xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                    @Override                    public void onFaile() {                    }                    @Override                    public void onStartDocument(String tag) {                        ar_pages.clear();                    }                    @Override                    public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                        try {                            if (tag.equals(ACTION_ITEM)) {                                /*表示一个item*/                                page = new _pages();/*表集合*/                            }                            /*item的标题*/                            if (tag.equals(ACTION_ITEM_TITLE)) {                                page._title = pullParser.nextText().trim();                            }                            /*item的状态*/                            if (tag.equals(ACTION_ITEM_STATUS)) {                                page._status = pullParser.nextText().trim();                            }                            /*item的图片地址*/                            if (tag.equals(ACTION_ITEM_IMGURL)) {                                page._img = pullParser.nextText().trim();                            }                            /*item的tag*/                            if (tag.equals(ACTION_ITEM_TAG)) {                                page._tag = pullParser.nextText().trim();                            }                            /*item的标题颜色*/                            if (tag.equals(ACTION_ITEM_COLOR)) {                                page._color = pullParser.nextText().trim();                            }                        } catch (Exception e) {                        }                    }                    @Override                    public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                        if (tag.equals(ACTION_ITEM)) {                            ar_pages.add(page);                            page = null;/*设置为NULL*/                        }                    }                    @Override                    public void onEndDocument() {                        /*设置Adapter*/                        Log.i(MSG, "适配器数据总和为:" + ar_pages.size());                        _adapter adapter = new _adapter(ar_pages, _context);                        _onCreateadapter.onCreateOk(adapter);                    }                });            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                final WaitDialog.RefreshDialog refreshDialog = new WaitDialog.RefreshDialog                        (_context);                WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                wait_itme_dialogpage.setImg(R.id.item_wait_img);                wait_itme_dialogpage.setView(R.layout.item_wait);                wait_itme_dialogpage.setTitle(R.id.item_wait_title);                refreshDialog.Init(wait_itme_dialogpage);                refreshDialog.showRefreshDialog("请稍后...", false);                return refreshDialog;            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree().trim());    }    public static class _adapter extends BaseAdapter {        private Context _context;/*上下文对象*/        private ArrayList<_pages> ar_pages = new ArrayList<_pages>();        /**         * 初始化适配器         *         * @param _pages  页表集合         * @param context 上下文对象         */        public _adapter(ArrayList<_pages> _pages, Context context) {            this._context = context;            this.ar_pages.addAll(_pages);        }        @Override        public int getCount() {            Log.i(MSG, "进入适配器总和:" + this.ar_pages.size());            return this.ar_pages.size();        }        @Override        public Object getItem(int position) {            return position;        }        @Override        public long getItemId(int position) {            return position;        }        @SuppressLint("NewApi")        @Override        public View getView(final int position, View convertView, ViewGroup parent) {            values _values;            if (convertView != null) {                _values = (values) convertView.getTag();            } else {                _values = new values();                convertView = LayoutInflater.from(_context).inflate(R.layout.item_main_recomd,                        null, false);                _values._body = convertView.findViewById(R.id.item_main_recomdBody);/*边框*/                _values._img = convertView.findViewById(R.id.item_main_recomdImg);/*图片控件*/                _values._msg = convertView.findViewById(R.id.item_main_recomdMsg);/*信息*/                convertView.setTag(_values);            }            /**             * 设置边框             */            _values._body.setBackground(Tools.CreateDrawable(1, "#ffffff", "#ffffff", 20));            /*设置信息*/            TextUnt.with(_values._msg).setText(this.ar_pages.get(position)._title).setTextColor                    (this.ar_pages.get(position)._color);            /*设置图片*/            Glide.with(_context).load(this.ar_pages.get(position)._img).diskCacheStrategy                    (DiskCacheStrategy.NONE).skipMemoryCache(false).into(_values._img);            _values._body.setTag(_values);            /**             * 设置点击事件             */            _values._body.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    values _value = (values) v.getTag();                    if (ar_pages.get(position)._status.equals(VALUES_STATUS_URL)) {                        Log.i(MSG, "URL窗口");                    } else if (ar_pages.get(position)._status.equals(VALUES_STATUS_WINDOW)) {                        Log.i(MSG, "商品详情");                    }                    Log.i(MSG, "点击的标题为:");                }            });            return convertView;        }        class values {            RelativeLayout _body;            ImageView _img;            TextView _msg;        }    }    public interface onCreateadapter {        void onCreateOk(BaseAdapter _baseAdapter);/*创建Adapter完毕*/        void onCreateError();/*创建失败*/    }    /**     * 数据界面     */    public static class _pages {        String _title;/*标题*/        String _img;/*图片地址*/        String _status;/*状态 0代表着打开web 1表示打开窗口*/        String _tag;/*唯一标识号*/        String _color;/*背景的颜色*/    }}