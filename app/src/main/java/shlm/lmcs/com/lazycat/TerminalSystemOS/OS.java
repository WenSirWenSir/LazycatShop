package shlm.lmcs.com.lazycat.TerminalSystemOS;import android.content.Context;import android.util.Log;import org.xmlpull.v1.XmlPullParser;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyPage.WAIT_ITME_DIALOGPAGE;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Tools;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;/** * 发货单系统的管理 */public class OS {    private static String MSG = "OS.java[+]";    private static String ACTION_RETURN_CODE = "return_code";/*返回的状态*/    private final static String VALUES_OK = "0";/*成功*/    private final static String VALUES_ERROR = "1";/*失败*/    private final static String VALUES_NOT_LOGIN = "2";/*登录失败*/    public static String RETURN_CODE = "";/*返回的代码*/    private static OS_PAGES os_page = new OS_PAGES();    /**     * 删除订单     */    private final static String VALUES_DELETE_OK = "0";    private final static String VALUES_DELETE_NOORDER = "2";    private static String DELETE_RETURN_CODE = "";    /**     * 获取构造商品订单数据的表格     *     * @return     */    public static OS_PAGES getOs_page() {        return os_page;    }    /**     * 删除一个订单信息     *     * @param _context     * @param _onDeleorder     */    public static void _deleOrder(final Context _context, String _orderNumber, final onDeleorder _onDeleorder) {        LocalValues.HTTP_ADDRS http_addrs = new LocalValues.HTTP_ADDRS(_context);        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(true);        xmlInstance.setXmlTree(LocalAction.ACTION_ORDER._ORDERNUMBER, _orderNumber);        xmlInstance.setXmlTree(LocalAction.ACTION_DELIVER._DELIVER, Tools.getDevice(_context));        xmlInstance.overDom();        Net.doPostXml(http_addrs.HTTP_ADDR_TERMINALSYSTEM_OS_DELETEORDER, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                Log.i(MSG, "删除订单数据回传数据:" + data.trim());                _refreshDialog.dismiss();                XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                    @Override                    public void onFaile() {                    }                    @Override                    public void onStartDocument(String tag) {                    }                    @Override                    public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                        try {                            if (tag.equals(LocalAction.ACTION_RETURNCODE)) {                                DELETE_RETURN_CODE = pullParser.nextText().trim();                            }                        } catch (Exception e) {                            Log.e(MSG, "处理删除数据失败:" + e.getMessage());                        }                    }                    @Override                    public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                    }                    @Override                    public void onEndDocument() {                    }                });            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                return Tools.getShowwait(_context);            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree().trim());    }    /**     * 保存一个订单的信息     *     * @param _context     上下文对象     * @param _OnSaveorder 监听回调     */    public static void _saveOrder(final Context _context, final onSaveorder _OnSaveorder) {        final String return_code;        LocalValues.HTTP_ADDRS http_addrs = new LocalValues.HTTP_ADDRS(_context);        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getXmlinstanceBuilder(true);        xmlInstance.setXmlTree(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_ONLYID, os_page._onlyId);        xmlInstance.setXmlTree(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_TOPAYHOW, os_page._payHow);        xmlInstance.overDom();        Net.doPostXml(http_addrs.HTTP_ADDR_TERMINALSYSTEM_OS, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                _refreshDialog.dismiss();                Log.i(MSG, "保存发货单数据返回:" + data.trim());                if (data.trim().equals("") || data.trim().equals(LocalValues.NET_ERROR)) {                    _OnSaveorder.onSaveError();                } else {                    XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                    xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                        @Override                        public void onFaile() {                        }                        @Override                        public void onStartDocument(String tag) {                        }                        @Override                        public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                            try {                                if (tag.equals(ACTION_RETURN_CODE)) {                                    RETURN_CODE = pullParser.nextText().trim();                                }                            } catch (Exception e) {                                Log.e(MSG, "错误信息:" + e.getMessage());                            }                        }                        @Override                        public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                        }                        @Override                        public void onEndDocument() {                            Log.i(MSG, "调试返回的信息为:" + RETURN_CODE);                            switch (RETURN_CODE) {                                case VALUES_OK:                                    _OnSaveorder.onSaveOk();                                    break;                                case VALUES_NOT_LOGIN:                                    _OnSaveorder.onSaveNologin();                                    break;                            }                        }                    });                }            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                /*初始化一个DIALOG*/                final WaitDialog.RefreshDialog refreshDialog = new WaitDialog.RefreshDialog(_context);                WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();                wait_itme_dialogpage.setImg(R.id.item_wait_img);                wait_itme_dialogpage.setView(R.layout.item_wait);                wait_itme_dialogpage.setCanClose(false);                wait_itme_dialogpage.setTitle(R.id.item_wait_title);                refreshDialog.Init(wait_itme_dialogpage);                refreshDialog.showRefreshDialog("加载中...", false);                return refreshDialog;            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree().trim());    }    public interface onDeleorder {        void onDeleOk();        void onDeleError();    }    /**     * 保存订单的监听回调事件     */    public interface onSaveorder {        void onSaveOk();/*订单提交成功*/        void onSaveError();/*订单提交失败*/        void onSaveNologin();/*没有登录*/    }    /**     * 下面的方法都是提供给地勤管理系统使用的     */    /*取货*/    public static class Pickgoos {    }    /*管理*/    public static class Run {    }    /*送货*/    public static class Delivery {    }    /*到达*/    public static class In {    }    /*退货*/    public static class Returngoods {    }    /*售后*/    public static class Aftersale {    }    /**     * 构造的列表     */    /*购买的构造PAGES*/    public static class OS_PAGES {        public String _onlyId;        public String _payHow;    }}