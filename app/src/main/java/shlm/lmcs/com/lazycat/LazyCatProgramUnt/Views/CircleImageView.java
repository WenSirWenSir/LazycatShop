package shlm.lmcs.com.lazycat.LazyCatProgramUnt.Views;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapShader;import android.graphics.Canvas;import android.graphics.Matrix;import android.graphics.Paint;import android.graphics.Shader;import android.graphics.drawable.BitmapDrawable;import android.graphics.drawable.Drawable;import android.support.v7.widget.AppCompatImageView;import android.util.AttributeSet;/** * 这个是圆形ImageView */public class CircleImageView extends AppCompatImageView {    private float width;    private float height;    private float radius;    private Paint paint;    private Matrix matrix;    public CircleImageView(Context context) {        this(context, null);    }    public CircleImageView(Context context, AttributeSet attrs) {        this(context, attrs, 0);    }    public CircleImageView(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        paint = new Paint();        paint.setAntiAlias(true);/*抗锯齿*/        matrix = new Matrix();//初始化缩放矩阵    }    /**     * 测量控件的高度     */    @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        width = getMeasuredWidth();        height = getMeasuredHeight();        radius = Math.min(width, height) / 2;    }    @Override    protected void onDraw(Canvas canvas) {        Drawable drawable = getDrawable();        if (drawable == null) {            super.onDraw(canvas);            return;        }        if (drawable instanceof BitmapDrawable) {            paint.setShader(initBitmapShader((BitmapDrawable) drawable));            canvas.drawCircle(width / 2, height / 2, radius, paint);            return;        }        super.onDraw(canvas);    }    private BitmapShader initBitmapShader(BitmapDrawable drawable) {        Bitmap bitmap = drawable.getBitmap();        BitmapShader bitmapShader = new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader                .TileMode.CLAMP);        float scale = Math.max(width / bitmap.getWidth(), height / bitmap.getHeight());        matrix.setScale(scale, scale);/*避免拉升*/        bitmapShader.setLocalMatrix(matrix);        return bitmapShader;    }}