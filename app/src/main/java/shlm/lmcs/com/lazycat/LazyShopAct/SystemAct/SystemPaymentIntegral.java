package shlm.lmcs.com.lazycat.LazyShopAct.SystemAct;import android.annotation.SuppressLint;import android.graphics.Color;import android.graphics.Typeface;import android.os.Bundle;import android.support.annotation.Nullable;import android.text.Editable;import android.text.Html;import android.text.TextUtils;import android.text.TextWatcher;import android.util.Log;import android.view.View;import android.widget.EditText;import org.xmlpull.v1.XmlPullParser;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyAct.LazyCatAct;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.TextUnt;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Tools;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;/** * 请求支付积分的要求 */public class SystemPaymentIntegral extends LazyCatAct {    private LocalValues.HTTP_ADDRS http_addrs;    private String MSG = "SystemPaymentIntegral.java[+]";    private String _RETURNCODE = "";//返回的状态    private String canUseIntegral = "0.00";    private String frozenIntegral = "0.00";    private EditText ep_integral;//积分输入框    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setStatusBar("#efefef");        setContentView(R.layout.systempaymentintegral);        http_addrs = new LocalValues.HTTP_ADDRS(getApplicationContext());        ep_integral = findViewById(R.id.activity_integralPaymentEditMoney);        /*设置字体的颜色*/        Typeface typeface = Typeface.createFromAsset(getAssets(), "font/system_ttf" + "" + ".ttf");        ep_integral.setTypeface(typeface);        init();        listener();    }    @SuppressLint("ResourceType")    private void init() {        /**         * 设置提交的按钮的样式         * 鲁少军         */        TextUnt.with(this, R.id.systempaymentIntegralBtntopay).setBackground(Tools.CreateDrawable(1,                getResources().getString(R.color.ThemeColor), getResources().getString(R.color.ThemeColor), 10)).setTextColor("#ffffff");        /**         * 设置支付信息的body的样式         */        findViewById(R.id.systempaymentIntegralPayBody).setBackground(Tools.CreateDrawable(1, "#ffffff", "#ffffff",                20));        /*开始获取数据信息*/        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getJavaXmlinstanceBuilder(true);        xmlInstance.overJavaDom();        Net.doPostXml(http_addrs.HTTP_ADDR_GET_USERINTEGRAL, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                _refreshDialog.dismiss();                Log.i(MSG, "获取积分数据:" + data.trim());                XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data);                xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                    @Override                    public void onFaile() {                    }                    @Override                    public void onStartDocument(String tag) {                    }                    @Override                    public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                        try {                            if (tag.equals(LocalAction.ACTION_RETURNCODE)) {                                _RETURNCODE = pullParser.nextText().trim();                            }                            /*能使用的积分*/                            if (tag.equals(LocalAction.ACTION_INTEGRAL._CANUSEINTEGRAL)) {                                canUseIntegral = pullParser.nextText().trim();                            }                            /*冻结的积分*/                            if (tag.equals(LocalAction.ACTION_INTEGRAL.INTEGRAL_FROZEN)) {                                frozenIntegral = pullParser.nextText().trim();                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                    @Override                    public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                    }                    @Override                    public void onEndDocument() {                        if (_RETURNCODE.equals(LocalValues.NET_OK)) {                            //成功了                            TextUnt.with(SystemPaymentIntegral.this, R.id.activity_integraldepositIntegralmsg).setText("能兑换的积分:").setaddText(Html.fromHtml("<font color=\"#f30d88\">" + canUseIntegral + "积分" + "</font>")).setaddText(",冻结积分:").setaddText(Html.fromHtml("<font color=\"#a9a9a9" + "\">" + frozenIntegral + "积分" + "</font>"));                        } else {                            Tools.showError(SystemPaymentIntegral.this, "错误信息", "不好意思,获取积分数据失败");                        }                    }                });            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                return Tools.getShowwait(SystemPaymentIntegral.this);            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree().trim());    }    private void listener() {        /**         * 监听点击事件 判断         */        ep_integral.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @SuppressLint("ResourceType")            @Override            public void afterTextChanged(Editable s) {                if (TextUtils.isEmpty(s.toString())) {                } else {                    if (Float.parseFloat(s.toString()) > Float.parseFloat(canUseIntegral)) {                        ep_integral.setTextColor(Color.parseColor(getResources().getString(R.color.colorRed)));                    } else {                        ep_integral.setTextColor(Color.parseColor("#000000"));                    }                }            }        });        /**         * 点击支付的处理事件         */        findViewById(R.id.systempaymentIntegralBtntopay).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getJavaXmlinstanceBuilder(true);                xmlInstance.setXmlTree(LocalAction.ACTION_INTEGRAL._PAYMENTINTEGRAL,                        ep_integral.getText().toString().trim());                xmlInstance.overJavaDom();                Net.doPostXml(http_addrs.HTTP_ADDR_PAYMENTINTEGRAL, new ProgramInterface() {                    @Override                    public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                        _refreshDialog.dismiss();                        XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data);                        xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                            @Override                            public void onFaile() {                            }                            @Override                            public void onStartDocument(String tag) {                            }                            @Override                            public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                                try {                                    if (tag.equals(LocalAction.ACTION_RETURNCODE)) {                                        _RETURNCODE = pullParser.nextText().trim();                                    }                                } catch (Exception e) {                                    e.printStackTrace();                                }                            }                            @Override                            public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                            }                            @Override                            public void onEndDocument() {                                if (_RETURNCODE.equals(LocalValues.NET_OK)) {                                    Tools.showSuccess(SystemPaymentIntegral.this, "支付结果", "支付成功!");                                } else {                                    Tools.showError(SystemPaymentIntegral.this, "支付结果", "支付失败!");                                }                            }                        });                    }                    @Override                    public WaitDialog.RefreshDialog onStartLoad() {                        return Tools.getShowwait(SystemPaymentIntegral.this);                    }                    @Override                    public void onFaile(String data, int code) {                    }                }, xmlInstance.getXmlTree());            }        });    }}