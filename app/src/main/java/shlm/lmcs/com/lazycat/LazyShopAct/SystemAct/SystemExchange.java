package shlm.lmcs.com.lazycat.LazyShopAct.SystemAct;import android.annotation.SuppressLint;import android.os.Bundle;import android.support.annotation.Nullable;import android.text.Editable;import android.text.TextWatcher;import android.util.EventLog;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.Toast;import org.xmlpull.v1.XmlPullParser;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyAct.LazyCatAct;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Tools;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.LazyShopVip.SystemVip;import shlm.lmcs.com.lazycat.R;/** * 加盟VIP兑换 */public class SystemExchange extends LazyCatAct {    private String MSG = "SystemExchange.java[+]";    private LinearLayout inputCode;    private String _returnCode = null;    private EditText et_1;    private EditText et_2;    private EditText et_3;    private EditText et_4;    private EditText et_5;    private EditText et_6;    private EditText et_7;    private EditText et_8;    private EditText et_9;    @SuppressLint("ResourceType")    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setStatusBar(getResources().getString(R.color.ThemeColor));        setContentView(R.layout.activity_systemexchange);        setBackListener(R.id.activity_systemexchange_BtnExit);        findViewById(R.id.activity_exchangeInputBackground).setBackground(Tools.CreateDrawable(1, "#ffffff", "#ffffff"                , 15));        et_1 = findViewById(R.id.activity_systemExchange_1);        et_2 = findViewById(R.id.activity_systemExchange_2);        et_3 = findViewById(R.id.activity_systemExchange_3);        et_4 = findViewById(R.id.activity_systemExchange_4);        et_5 = findViewById(R.id.activity_systemExchange_5);        et_6 = findViewById(R.id.activity_systemExchange_6);        et_7 = findViewById(R.id.activity_systemExchange_7);        et_8 = findViewById(R.id.activity_systemExchange_8);        et_9 = findViewById(R.id.activity_systemExchange_9);        init();    }    private void init() {        inputListener();    }    /**     * 输出的监听事件     */    private void inputListener() {        /**         * 第一个输入框的按钮监听事件         */        et_1.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (s.length() > 0) {                    Tools.getFocusable(et_2);                } else {                }            }        });        et_2.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (s.length() > 0) {                    Tools.getFocusable(et_3);                } else {                    Tools.getFocusable(et_1);                }            }        });        et_3.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (s.length() > 0) {                    Tools.getFocusable(et_4);                } else {                    Tools.getFocusable(et_2);                }            }        });        et_4.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (s.length() > 0) {                    Tools.getFocusable(et_5);                } else {                    Tools.getFocusable(et_3);                }            }        });        et_5.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (s.length() > 0) {                    Tools.getFocusable(et_6);                } else {                    Tools.getFocusable(et_4);                }            }        });        et_6.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (s.length() > 0) {                    Tools.getFocusable(et_7);                } else {                    Tools.getFocusable(et_5);                }            }        });        et_7.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (s.length() > 0) {                    Tools.getFocusable(et_8);                } else {                    Tools.getFocusable(et_6);                }            }        });        et_8.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (s.length() > 0) {                    Tools.getFocusable(et_9);                } else {                    Tools.getFocusable(et_7);                }            }        });        et_9.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (s.length() > 0) {                    StringBuilder sb = new StringBuilder();                    sb.append(et_1.getText().toString().trim());                    sb.append(et_2.getText().toString().trim());                    sb.append(et_3.getText().toString().trim());                    sb.append(et_4.getText().toString().trim());                    sb.append(et_5.getText().toString().trim());                    sb.append(et_6.getText().toString().trim());                    sb.append(et_7.getText().toString().trim());                    sb.append(et_8.getText().toString().trim());                    sb.append(et_9.getText().toString().trim());                    doExchange(sb.toString());                } else {                    Tools.getFocusable(et_8);                }            }        });        et_1.setOnKeyListener(new View.OnKeyListener() {            @Override            public boolean onKey(View v, int keyCode, KeyEvent event) {                if (event.getAction() == KeyEvent.ACTION_UP) {                    if (keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL) {                    }                }                return false;            }        });        et_2.setOnKeyListener(new View.OnKeyListener() {            @Override            public boolean onKey(View v, int keyCode, KeyEvent event) {                if (event.getAction() == KeyEvent.ACTION_UP) {                    if (keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL) {                        Tools.getFocusable(et_1);                    }                }                return false;            }        });        et_3.setOnKeyListener(new View.OnKeyListener() {            @Override            public boolean onKey(View v, int keyCode, KeyEvent event) {                if (event.getAction() == KeyEvent.ACTION_UP) {                    if (keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL) {                        Tools.getFocusable(et_2);                    }                }                return false;            }        });        et_4.setOnKeyListener(new View.OnKeyListener() {            @Override            public boolean onKey(View v, int keyCode, KeyEvent event) {                if (event.getAction() == KeyEvent.ACTION_UP) {                    if (keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL) {                        Tools.getFocusable(et_3);                    }                }                return false;            }        });        et_5.setOnKeyListener(new View.OnKeyListener() {            @Override            public boolean onKey(View v, int keyCode, KeyEvent event) {                if (event.getAction() == KeyEvent.ACTION_UP) {                    if (keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL) {                        Tools.getFocusable(et_4);                    }                }                return false;            }        });        et_6.setOnKeyListener(new View.OnKeyListener() {            @Override            public boolean onKey(View v, int keyCode, KeyEvent event) {                if (event.getAction() == KeyEvent.ACTION_UP) {                    if (keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL) {                        Tools.getFocusable(et_5);                    }                }                return false;            }        });        et_7.setOnKeyListener(new View.OnKeyListener() {            @Override            public boolean onKey(View v, int keyCode, KeyEvent event) {                if (event.getAction() == KeyEvent.ACTION_UP) {                    if (keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL) {                        Tools.getFocusable(et_6);                    }                }                return false;            }        });        et_8.setOnKeyListener(new View.OnKeyListener() {            @Override            public boolean onKey(View v, int keyCode, KeyEvent event) {                if (event.getAction() == KeyEvent.ACTION_UP) {                    if (keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL) {                        Tools.getFocusable(et_7);                    }                }                return false;            }        });        et_9.setOnKeyListener(new View.OnKeyListener() {            @Override            public boolean onKey(View v, int keyCode, KeyEvent event) {                if (event.getAction() == KeyEvent.ACTION_UP) {                    if (keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL) {                        Tools.getFocusable(et_8);                    }                }                return false;            }        });    }    /**     * 开始兑换     *     * @param code 代码     */    private void doExchange(String code) {        LocalValues.HTTP_ADDRS http_addrs = new LocalValues.HTTP_ADDRS(getApplicationContext());        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getJavaXmlinstanceBuilder(true);        xmlInstance.setXmlTree(LocalAction.EXCHANGE._CODE, code);        xmlInstance.overJavaDom();        Log.i(MSG, "提交XML内容:" + xmlInstance.getXmlTree().trim());        Net.doPostXml(http_addrs.HTTP_ADDR_EXCHANGE, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                _refreshDialog.dismiss();                Log.i(MSG, "兑换系统回传信息为:" + data.trim());                if (!"".equals(data.trim()) || !LocalValues.NET_ERROR.equals(data)) {                    /*解析XML数据信息*/                    XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data);                    xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                        @Override                        public void onFaile() {                        }                        @Override                        public void onStartDocument(String tag) {                        }                        @Override                        public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                            try {                                if (tag.equals(LocalAction.ACTION_RETURNCODE)) {                                    _returnCode = pullParser.nextText().trim();                                }                            } catch (Exception e) {                                e.printStackTrace();                            }                        }                        @Override                        public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                        }                        @Override                        public void onEndDocument() {                            if (LocalValues.NET_OK.equals(_returnCode)) {                                Tools.showSuccess(SystemExchange.this, "提示信息", "您的兑换码兑换成功,已经为您开通7天加盟特权!");                            } else {                                Tools.showError(SystemExchange.this, "错误提示", "您输入的兑换码是错误的，或者它已经被别人使用过了");                            }                        }                    });                } else {                    Log.e(MSG, "兑换窗口没有回传数据信息");                }            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                return Tools.getShowwait(SystemExchange.this);            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree().trim());    }}