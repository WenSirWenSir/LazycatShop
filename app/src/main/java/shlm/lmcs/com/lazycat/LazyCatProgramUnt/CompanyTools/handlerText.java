package shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools;import android.annotation.SuppressLint;import android.graphics.Color;import android.graphics.Paint;import android.graphics.drawable.Drawable;import android.text.TextPaint;import android.text.TextUtils;import android.util.Log;import android.widget.TextView;/** * 处理文字边框 */public class handlerText {    private String MSG = "handlerText.java[+]";    private static handlerText _handlerText = new handlerText();    public static TextView tv;    public handlerText get(TextView _tv) {        this.tv = _tv;        return _handlerText;    }    public handlerText setText(String _text) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            tv.setText(_text.trim());        }        return _handlerText;    }    public handlerText setText(int _text) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不为空");        } else {            tv.setText(_text);        }        return _handlerText;    }    public handlerText setTextColor(String _color) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            if(TextUtils.isEmpty(_color)){                Log.e(MSG,"错误:设置的颜色为空 对应文字为:" + this.tv.getText().toString().trim());            }            else{                this.tv.setTextColor(Color.parseColor(_color.trim()));            }        }        return _handlerText;    }    public handlerText setTextColor(int _color) {        if (tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            tv.setTextColor(_color);        }        return _handlerText;    }    public handlerText setTextSize(int _size) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            this.tv.setTextSize(_size);        }        return _handlerText;    }    public handlerText setBackColor(String _color) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            this.tv.setBackgroundColor(Color.parseColor(_color));        }        return _handlerText;    }    public handlerText setBackColor(int _color) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            this.tv.setBackgroundColor(_color);        }        return _handlerText;    }    public handlerText setMidcourtLine(){        tv.getPaint().setFlags(Paint.STRIKE_THRU_TEXT_FLAG | Paint.ANTI_ALIAS_FLAG);        return _handlerText;    }    @SuppressLint("NewApi")    public handlerText setBackground(Drawable _background) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            this.tv.setBackground(_background);        }        return _handlerText;    }    public handlerText setBoldText(boolean is) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            TextPaint textPaint = this.tv.getPaint();            textPaint.setFakeBoldText(is);        }        return _handlerText;    }}