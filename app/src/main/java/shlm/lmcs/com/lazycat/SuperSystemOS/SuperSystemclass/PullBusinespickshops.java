package shlm.lmcs.com.lazycat.SuperSystemOS.SuperSystemclass;import android.content.Context;import android.util.Log;import org.xmlpull.v1.XmlPullParser;import java.util.ArrayList;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Tools;import shlm.lmcs.com.lazycat.LazyShopValues.LocalAction;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;/** * 拉取对应商家的所有的取货列表 */public class PullBusinespickshops {    private static String MSG = "PullBusinespickshops.java[+]";    private static BueinssPages _businesspages = new BueinssPages();    private static String RETURN_CODE = "";    private static PickShops _PickShops;    private static ArrayList<PickShops> ar_pages = new ArrayList<>();    public static void _pull(final Context _context, String _code, final onPickShops _onPickShops) {        XmlBuilder.XmlInstance xmlInstance = XmlBuilder.getJavaXmlinstanceBuilder(true);        xmlInstance.setXmlTree(LocalAction.ACTION_INTERFACE_BUSINESS._TAGBUSINESSCODE, _code);        xmlInstance.overJavaDom();        Log.i(MSG, "提交获取商家名下待取货的XML:" + xmlInstance.getXmlTree().trim());        LocalValues.HTTP_ADDRS http_addrs = new LocalValues.HTTP_ADDRS(_context);        Net.doPostXml(http_addrs.HTTP_ADDR_SUPER_PULLPICKSHOPS, new ProgramInterface() {            @Override            public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {                Log.i(MSG, "拉取商家所有商品的XML信息表:" + data.trim());                _refreshDialog.dismiss();                if (data.equals(LocalValues.NET_ERROR)) {                    _onPickShops._onError();                } else {                    XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());                    xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {                        @Override                        public void onFaile() {                        }                        @Override                        public void onStartDocument(String tag) {                            ar_pages.clear();                        }                        @Override                        public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {                            try {                                /*获取状态*/                                if (tag.equals(LocalAction.ACTION_RETURNCODE)) {                                    RETURN_CODE = pullParser.nextText().trim();                                }                                /* *//*获取对接商家信息*//*                                if (tag.equals(LocalAction.ACTION_SUPERBUSINESS._BUSINESSNAME)) {                                    _businesspages._businessname = pullParser.nextText().trim();                                }                                *//*获取对接商家电话*//*                                if (tag.equals(LocalAction.ACTION_SUPERBUSINESS._BUSINESSTEL)) {                                    _businesspages._businesstel = pullParser.nextText().trim();                                }                                *//*对接商家的地址*//*                                if (tag.equals(LocalAction.ACTION_SUPERBUSINESS._BUSINESSADDR)) {                                    _businesspages._businessaddr = pullParser.nextText().trim();                                }*/                                /**                                 * 整理有多少个取货商品                                 */                                if (tag.equals(LocalAction.ACTION_SUPERPICKSHOPS._PICKSHOPS)) {                                    _PickShops = new PickShops();                                }                                /*获取商品的标题*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_TITLE)) {                                    _PickShops._title = pullParser.nextText().trim();                                }                                /*获取商品的批发价格*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_TP)) {                                    _PickShops._tp = pullParser.nextText().trim();                                }                                /*获取商品的规格*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_SPEC)) {                                    _PickShops._spec = pullParser.nextText().trim();                                }                                /*获取商品价格对应的单位*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_COMPANY)) {                                    _PickShops._company = pullParser.nextText().trim();                                }                                /*获取商品的分割单位*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_SPLITUNIT)) {                                    _PickShops._splitunit = pullParser.nextText().trim();                                }                                /*获取商品的图片地址*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_IMG)) {                                    _PickShops._img = pullParser.nextText().trim();                                }                                /*获取取货数量*/                                if (tag.equals(LocalAction.ACTION_SUPERPICKSHOPS._PICKSHOPSPAYHOW)) {                                    _PickShops._payhow = pullParser.nextText().trim();                                }                                /*获取商品的积分*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_INTEGRAL)) {                                    _PickShops._integral = pullParser.nextText().trim();                                }                                /*获取商品ID*/                                if (tag.equals(LocalAction.ACTION_SHOPVALUES.ACTION_SHOPVALUES_ONLYID)) {                                    _PickShops._onlyId = pullParser.nextText().trim();                                }                            } catch (Exception e) {                                Log.i(MSG, "处理商家XML的信息失败:" + e.getMessage());                            }                        }                        @Override                        public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {                            if (tag.equals(LocalAction.ACTION_SUPERPICKSHOPS._PICKSHOPS)) {                                ar_pages.add(_PickShops);                                _PickShops = null;                            }                        }                        @Override                        public void onEndDocument() {                            if (RETURN_CODE.equals(LocalValues.NET_ERROR)) {                                _onPickShops._onError();                            } else if (RETURN_CODE.equals(LocalValues.NET_OK)) {                                _onPickShops._onGet(ar_pages, _businesspages);                            }                        }                    });                }            }            @Override            public WaitDialog.RefreshDialog onStartLoad() {                return Tools.getShowwait(_context);            }            @Override            public void onFaile(String data, int code) {            }        }, xmlInstance.getXmlTree().trim());    }    /**     * 接口回调     */    public interface onPickShops {        void _onGet(ArrayList<PickShops> _pickshops, BueinssPages _businesspage);        void _onError();    }    /**     * 拉取商品信息表格     */    public static class PickShops {        public String _integral;/*积分*/        public String _title;/*名称*/        public String _spec;/*规格*/        public String _company;/*价格对应单位*/        public String _splitunit;/*最低单位*/        public String _tp;/*批发价格*/        public String _payhow;/*取件数*/        public String _img;/*图片*/        public String _onlyId;/*商品唯一ID号*/    }    /**     * 合作商家的表格     */    public static class BueinssPages {        public String _businessname;/*合作商家的名称*/        public String _businesstel;/*合作商家的电话*/        public String _businessaddr;/*合作商家的地址*/        public String _businesspayhow;/*待取货数*/        public String _businesstotal;/*总的价值*/    }}