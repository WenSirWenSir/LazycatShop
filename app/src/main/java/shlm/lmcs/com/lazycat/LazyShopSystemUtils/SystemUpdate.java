package shlm.lmcs.com.lazycat.LazyShopSystemUtils;import android.content.Context;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.util.Log;import org.xmlpull.v1.XmlPullParser;import java.beans.IndexedPropertyChangeEvent;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyPage.WAIT_ITME_DIALOGPAGE;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.CompanyTools.XmlBuilder;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.WaitDialog;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Factory.XmlanalysisFactory;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Interface.ProgramInterface;import shlm.lmcs.com.lazycat.LazyCatProgramUnt.Net;import shlm.lmcs.com.lazycat.LazyShopValues.LocalValues;import shlm.lmcs.com.lazycat.R;/** * 检查是否需要更新APP */public class SystemUpdate {	public static String ACTION_VERSIONCODE = "versionCode";/*服务器更新的版本*/	private static String MSG = "SystemUpdate.java[+]";	public static void _check(final Context _context, final onCheck _onCheck) {		LocalValues.HTTP_ADDRS http_addrs = new LocalValues.HTTP_ADDRS(_context);		Net.doPostXml(http_addrs.HTTP_ADDR_UPDATE_APK, new ProgramInterface() {			@Override			public void onSucess(String data, int code, WaitDialog.RefreshDialog _refreshDialog) {				Log.i(MSG, "检查是否需要更新APP的返回信息:" + data.trim());				_refreshDialog.dismiss();				XmlanalysisFactory xmlanalysisFactory = new XmlanalysisFactory(data.trim());				xmlanalysisFactory.Startanalysis(new XmlanalysisFactory.XmlanalysisInterface() {					@Override					public void onFaile() {					}					@Override					public void onStartDocument(String tag) {					}					@Override					public void onStartTag(String tag, XmlPullParser pullParser, Integer id) {						try {							if (tag.equals(ACTION_VERSIONCODE)) {								/*获取版本号*/								PackageManager packageManager = _context.getPackageManager();								PackageInfo packageInfo =									packageManager.getPackageInfo(_context.getPackageName(), 0);								Log.i(MSG,"本地版本号:" + packageInfo.versionCode);								int Interversion = Integer.parseInt(pullParser.nextText().trim());								Log.i(MSG,"网络版本号:" + Interversion);								if (Interversion == packageInfo.versionCode) {									/*版本号相同*/									Log.i(MSG,"版本号相同");									if (_onCheck != null) {										_onCheck.onNotupdate();									}								} else {									/*版本号不同*/									Log.i(MSG,"版本号不相同");									if (_onCheck != null) {										_onCheck.onNeedupdate();									}								}							}						} catch (Exception e) {							Log.i(MSG, "更新APP解析错误信息:" + e.getMessage());						}					}					@Override					public void onEndTag(String tag, XmlPullParser pullParser, Integer id) {					}					@Override					public void onEndDocument() {					}				});			}			@Override			public WaitDialog.RefreshDialog onStartLoad() {				final WaitDialog.RefreshDialog refreshDialog =					new WaitDialog.RefreshDialog(_context);				WAIT_ITME_DIALOGPAGE wait_itme_dialogpage = new WAIT_ITME_DIALOGPAGE();				wait_itme_dialogpage.setImg(R.id.item_wait_img);				wait_itme_dialogpage.setView(R.layout.item_wait);				wait_itme_dialogpage.setTitle(R.id.item_wait_title);				refreshDialog.Init(wait_itme_dialogpage);				refreshDialog.showRefreshDialog("检查更新", false);				return refreshDialog;			}			@Override			public void onFaile(String data, int code) {			}		}, "");	}	public interface onCheck {		void onNeedupdate();/*需要更新*/		void onNotupdate();/*不需要更新*/	}}